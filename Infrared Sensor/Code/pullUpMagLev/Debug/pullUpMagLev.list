
EML.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009888  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009998  08009998  0000a998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e6c  08009e6c  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e6c  08009e6c  0000ae6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e74  08009e74  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e78  08009e78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009e7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001d8  0800a054  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a054  0000b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9fe  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a95  00000000  00000000  00018bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  0001b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba5  00000000  00000000  0001c5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cab  00000000  00000000  0001d14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121c3  00000000  00000000  00036df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091302  00000000  00000000  00048fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da2bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  000da300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000df520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009980 	.word	0x08009980

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08009980 	.word	0x08009980

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c6:	2afd      	cmp	r2, #253	@ 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	@ 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	@ 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_d2uiz>:
 8000c04:	004a      	lsls	r2, r1, #1
 8000c06:	d211      	bcs.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c0c:	d211      	bcs.n	8000c32 <__aeabi_d2uiz+0x2e>
 8000c0e:	d50d      	bpl.n	8000c2c <__aeabi_d2uiz+0x28>
 8000c10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c18:	d40e      	bmi.n	8000c38 <__aeabi_d2uiz+0x34>
 8000c1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c26:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2a:	4770      	bx	lr
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c36:	d102      	bne.n	8000c3e <__aeabi_d2uiz+0x3a>
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_d2f>:
 8000c44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c4c:	bf24      	itt	cs
 8000c4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c56:	d90d      	bls.n	8000c74 <__aeabi_d2f+0x30>
 8000c58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c6c:	bf08      	it	eq
 8000c6e:	f020 0001 	biceq.w	r0, r0, #1
 8000c72:	4770      	bx	lr
 8000c74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c78:	d121      	bne.n	8000cbe <__aeabi_d2f+0x7a>
 8000c7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c7e:	bfbc      	itt	lt
 8000c80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c84:	4770      	bxlt	lr
 8000c86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8e:	f1c2 0218 	rsb	r2, r2, #24
 8000c92:	f1c2 0c20 	rsb	ip, r2, #32
 8000c96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9e:	bf18      	it	ne
 8000ca0:	f040 0001 	orrne.w	r0, r0, #1
 8000ca4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb0:	ea40 000c 	orr.w	r0, r0, ip
 8000cb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cbc:	e7cc      	b.n	8000c58 <__aeabi_d2f+0x14>
 8000cbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc2:	d107      	bne.n	8000cd4 <__aeabi_d2f+0x90>
 8000cc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc8:	bf1e      	ittt	ne
 8000cca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd2:	4770      	bxne	lr
 8000cd4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cd8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cdc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_frsub>:
 8000ce4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ce8:	e002      	b.n	8000cf0 <__addsf3>
 8000cea:	bf00      	nop

08000cec <__aeabi_fsub>:
 8000cec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cf0 <__addsf3>:
 8000cf0:	0042      	lsls	r2, r0, #1
 8000cf2:	bf1f      	itttt	ne
 8000cf4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cf8:	ea92 0f03 	teqne	r2, r3
 8000cfc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000d00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d04:	d06a      	beq.n	8000ddc <__addsf3+0xec>
 8000d06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000d0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d0e:	bfc1      	itttt	gt
 8000d10:	18d2      	addgt	r2, r2, r3
 8000d12:	4041      	eorgt	r1, r0
 8000d14:	4048      	eorgt	r0, r1
 8000d16:	4041      	eorgt	r1, r0
 8000d18:	bfb8      	it	lt
 8000d1a:	425b      	neglt	r3, r3
 8000d1c:	2b19      	cmp	r3, #25
 8000d1e:	bf88      	it	hi
 8000d20:	4770      	bxhi	lr
 8000d22:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d2e:	bf18      	it	ne
 8000d30:	4240      	negne	r0, r0
 8000d32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d36:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d3a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d3e:	bf18      	it	ne
 8000d40:	4249      	negne	r1, r1
 8000d42:	ea92 0f03 	teq	r2, r3
 8000d46:	d03f      	beq.n	8000dc8 <__addsf3+0xd8>
 8000d48:	f1a2 0201 	sub.w	r2, r2, #1
 8000d4c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d50:	eb10 000c 	adds.w	r0, r0, ip
 8000d54:	f1c3 0320 	rsb	r3, r3, #32
 8000d58:	fa01 f103 	lsl.w	r1, r1, r3
 8000d5c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d60:	d502      	bpl.n	8000d68 <__addsf3+0x78>
 8000d62:	4249      	negs	r1, r1
 8000d64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d68:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d6c:	d313      	bcc.n	8000d96 <__addsf3+0xa6>
 8000d6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d72:	d306      	bcc.n	8000d82 <__addsf3+0x92>
 8000d74:	0840      	lsrs	r0, r0, #1
 8000d76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d7a:	f102 0201 	add.w	r2, r2, #1
 8000d7e:	2afe      	cmp	r2, #254	@ 0xfe
 8000d80:	d251      	bcs.n	8000e26 <__addsf3+0x136>
 8000d82:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8a:	bf08      	it	eq
 8000d8c:	f020 0001 	biceq.w	r0, r0, #1
 8000d90:	ea40 0003 	orr.w	r0, r0, r3
 8000d94:	4770      	bx	lr
 8000d96:	0049      	lsls	r1, r1, #1
 8000d98:	eb40 0000 	adc.w	r0, r0, r0
 8000d9c:	3a01      	subs	r2, #1
 8000d9e:	bf28      	it	cs
 8000da0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000da4:	d2ed      	bcs.n	8000d82 <__addsf3+0x92>
 8000da6:	fab0 fc80 	clz	ip, r0
 8000daa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000dae:	ebb2 020c 	subs.w	r2, r2, ip
 8000db2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000db6:	bfaa      	itet	ge
 8000db8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000dbc:	4252      	neglt	r2, r2
 8000dbe:	4318      	orrge	r0, r3
 8000dc0:	bfbc      	itt	lt
 8000dc2:	40d0      	lsrlt	r0, r2
 8000dc4:	4318      	orrlt	r0, r3
 8000dc6:	4770      	bx	lr
 8000dc8:	f092 0f00 	teq	r2, #0
 8000dcc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dd0:	bf06      	itte	eq
 8000dd2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dd6:	3201      	addeq	r2, #1
 8000dd8:	3b01      	subne	r3, #1
 8000dda:	e7b5      	b.n	8000d48 <__addsf3+0x58>
 8000ddc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000de0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000de4:	bf18      	it	ne
 8000de6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dea:	d021      	beq.n	8000e30 <__addsf3+0x140>
 8000dec:	ea92 0f03 	teq	r2, r3
 8000df0:	d004      	beq.n	8000dfc <__addsf3+0x10c>
 8000df2:	f092 0f00 	teq	r2, #0
 8000df6:	bf08      	it	eq
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	4770      	bx	lr
 8000dfc:	ea90 0f01 	teq	r0, r1
 8000e00:	bf1c      	itt	ne
 8000e02:	2000      	movne	r0, #0
 8000e04:	4770      	bxne	lr
 8000e06:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000e0a:	d104      	bne.n	8000e16 <__addsf3+0x126>
 8000e0c:	0040      	lsls	r0, r0, #1
 8000e0e:	bf28      	it	cs
 8000e10:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e14:	4770      	bx	lr
 8000e16:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e1a:	bf3c      	itt	cc
 8000e1c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e20:	4770      	bxcc	lr
 8000e22:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e26:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e2e:	4770      	bx	lr
 8000e30:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e34:	bf16      	itet	ne
 8000e36:	4608      	movne	r0, r1
 8000e38:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e3c:	4601      	movne	r1, r0
 8000e3e:	0242      	lsls	r2, r0, #9
 8000e40:	bf06      	itte	eq
 8000e42:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e46:	ea90 0f01 	teqeq	r0, r1
 8000e4a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e4e:	4770      	bx	lr

08000e50 <__aeabi_ui2f>:
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e004      	b.n	8000e60 <__aeabi_i2f+0x8>
 8000e56:	bf00      	nop

08000e58 <__aeabi_i2f>:
 8000e58:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e5c:	bf48      	it	mi
 8000e5e:	4240      	negmi	r0, r0
 8000e60:	ea5f 0c00 	movs.w	ip, r0
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e6c:	4601      	mov	r1, r0
 8000e6e:	f04f 0000 	mov.w	r0, #0
 8000e72:	e01c      	b.n	8000eae <__aeabi_l2f+0x2a>

08000e74 <__aeabi_ul2f>:
 8000e74:	ea50 0201 	orrs.w	r2, r0, r1
 8000e78:	bf08      	it	eq
 8000e7a:	4770      	bxeq	lr
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e00a      	b.n	8000e98 <__aeabi_l2f+0x14>
 8000e82:	bf00      	nop

08000e84 <__aeabi_l2f>:
 8000e84:	ea50 0201 	orrs.w	r2, r0, r1
 8000e88:	bf08      	it	eq
 8000e8a:	4770      	bxeq	lr
 8000e8c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e90:	d502      	bpl.n	8000e98 <__aeabi_l2f+0x14>
 8000e92:	4240      	negs	r0, r0
 8000e94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e98:	ea5f 0c01 	movs.w	ip, r1
 8000e9c:	bf02      	ittt	eq
 8000e9e:	4684      	moveq	ip, r0
 8000ea0:	4601      	moveq	r1, r0
 8000ea2:	2000      	moveq	r0, #0
 8000ea4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ea8:	bf08      	it	eq
 8000eaa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000eb2:	fabc f28c 	clz	r2, ip
 8000eb6:	3a08      	subs	r2, #8
 8000eb8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ebc:	db10      	blt.n	8000ee0 <__aeabi_l2f+0x5c>
 8000ebe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec8:	f1c2 0220 	rsb	r2, r2, #32
 8000ecc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ed0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed4:	eb43 0002 	adc.w	r0, r3, r2
 8000ed8:	bf08      	it	eq
 8000eda:	f020 0001 	biceq.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	f102 0220 	add.w	r2, r2, #32
 8000ee4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ee8:	f1c2 0220 	rsb	r2, r2, #32
 8000eec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ef0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ef4:	eb43 0002 	adc.w	r0, r3, r2
 8000ef8:	bf08      	it	eq
 8000efa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000efe:	4770      	bx	lr

08000f00 <__gesf2>:
 8000f00:	f04f 3cff 	mov.w	ip, #4294967295
 8000f04:	e006      	b.n	8000f14 <__cmpsf2+0x4>
 8000f06:	bf00      	nop

08000f08 <__lesf2>:
 8000f08:	f04f 0c01 	mov.w	ip, #1
 8000f0c:	e002      	b.n	8000f14 <__cmpsf2+0x4>
 8000f0e:	bf00      	nop

08000f10 <__cmpsf2>:
 8000f10:	f04f 0c01 	mov.w	ip, #1
 8000f14:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f24:	bf18      	it	ne
 8000f26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f2a:	d011      	beq.n	8000f50 <__cmpsf2+0x40>
 8000f2c:	b001      	add	sp, #4
 8000f2e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f32:	bf18      	it	ne
 8000f34:	ea90 0f01 	teqne	r0, r1
 8000f38:	bf58      	it	pl
 8000f3a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f3e:	bf88      	it	hi
 8000f40:	17c8      	asrhi	r0, r1, #31
 8000f42:	bf38      	it	cc
 8000f44:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f48:	bf18      	it	ne
 8000f4a:	f040 0001 	orrne.w	r0, r0, #1
 8000f4e:	4770      	bx	lr
 8000f50:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f54:	d102      	bne.n	8000f5c <__cmpsf2+0x4c>
 8000f56:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f5a:	d105      	bne.n	8000f68 <__cmpsf2+0x58>
 8000f5c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f60:	d1e4      	bne.n	8000f2c <__cmpsf2+0x1c>
 8000f62:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f66:	d0e1      	beq.n	8000f2c <__cmpsf2+0x1c>
 8000f68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__aeabi_cfrcmple>:
 8000f70:	4684      	mov	ip, r0
 8000f72:	4608      	mov	r0, r1
 8000f74:	4661      	mov	r1, ip
 8000f76:	e7ff      	b.n	8000f78 <__aeabi_cfcmpeq>

08000f78 <__aeabi_cfcmpeq>:
 8000f78:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f7a:	f7ff ffc9 	bl	8000f10 <__cmpsf2>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	bf48      	it	mi
 8000f82:	f110 0f00 	cmnmi.w	r0, #0
 8000f86:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f88 <__aeabi_fcmpeq>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff fff4 	bl	8000f78 <__aeabi_cfcmpeq>
 8000f90:	bf0c      	ite	eq
 8000f92:	2001      	moveq	r0, #1
 8000f94:	2000      	movne	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmplt>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffea 	bl	8000f78 <__aeabi_cfcmpeq>
 8000fa4:	bf34      	ite	cc
 8000fa6:	2001      	movcc	r0, #1
 8000fa8:	2000      	movcs	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmple>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffe0 	bl	8000f78 <__aeabi_cfcmpeq>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpge>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffd2 	bl	8000f70 <__aeabi_cfrcmple>
 8000fcc:	bf94      	ite	ls
 8000fce:	2001      	movls	r0, #1
 8000fd0:	2000      	movhi	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_fcmpgt>:
 8000fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fdc:	f7ff ffc8 	bl	8000f70 <__aeabi_cfrcmple>
 8000fe0:	bf34      	ite	cc
 8000fe2:	2001      	movcc	r0, #1
 8000fe4:	2000      	movcs	r0, #0
 8000fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fea:	bf00      	nop

08000fec <__aeabi_f2iz>:
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000ff4:	d30f      	bcc.n	8001016 <__aeabi_f2iz+0x2a>
 8000ff6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ffa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ffe:	d90d      	bls.n	800101c <__aeabi_f2iz+0x30>
 8001000:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001004:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001008:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800100c:	fa23 f002 	lsr.w	r0, r3, r2
 8001010:	bf18      	it	ne
 8001012:	4240      	negne	r0, r0
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr
 800101c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001020:	d101      	bne.n	8001026 <__aeabi_f2iz+0x3a>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	d105      	bne.n	8001032 <__aeabi_f2iz+0x46>
 8001026:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800102a:	bf08      	it	eq
 800102c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001030:	4770      	bx	lr
 8001032:	f04f 0000 	mov.w	r0, #0
 8001036:	4770      	bx	lr

08001038 <__aeabi_d2lz>:
 8001038:	b538      	push	{r3, r4, r5, lr}
 800103a:	2200      	movs	r2, #0
 800103c:	2300      	movs	r3, #0
 800103e:	4604      	mov	r4, r0
 8001040:	460d      	mov	r5, r1
 8001042:	f7ff fd79 	bl	8000b38 <__aeabi_dcmplt>
 8001046:	b928      	cbnz	r0, 8001054 <__aeabi_d2lz+0x1c>
 8001048:	4620      	mov	r0, r4
 800104a:	4629      	mov	r1, r5
 800104c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001050:	f000 b80a 	b.w	8001068 <__aeabi_d2ulz>
 8001054:	4620      	mov	r0, r4
 8001056:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800105a:	f000 f805 	bl	8001068 <__aeabi_d2ulz>
 800105e:	4240      	negs	r0, r0
 8001060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001064:	bd38      	pop	{r3, r4, r5, pc}
 8001066:	bf00      	nop

08001068 <__aeabi_d2ulz>:
 8001068:	b5d0      	push	{r4, r6, r7, lr}
 800106a:	2200      	movs	r2, #0
 800106c:	4b0b      	ldr	r3, [pc, #44]	@ (800109c <__aeabi_d2ulz+0x34>)
 800106e:	4606      	mov	r6, r0
 8001070:	460f      	mov	r7, r1
 8001072:	f7ff faef 	bl	8000654 <__aeabi_dmul>
 8001076:	f7ff fdc5 	bl	8000c04 <__aeabi_d2uiz>
 800107a:	4604      	mov	r4, r0
 800107c:	f7ff fa70 	bl	8000560 <__aeabi_ui2d>
 8001080:	2200      	movs	r2, #0
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <__aeabi_d2ulz+0x38>)
 8001084:	f7ff fae6 	bl	8000654 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4630      	mov	r0, r6
 800108e:	4639      	mov	r1, r7
 8001090:	f7ff f928 	bl	80002e4 <__aeabi_dsub>
 8001094:	f7ff fdb6 	bl	8000c04 <__aeabi_d2uiz>
 8001098:	4621      	mov	r1, r4
 800109a:	bdd0      	pop	{r4, r6, r7, pc}
 800109c:	3df00000 	.word	0x3df00000
 80010a0:	41f00000 	.word	0x41f00000

080010a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010b6:	4a19      	ldr	r2, [pc, #100]	@ (800111c <MX_ADC1_Init+0x78>)
 80010b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010ce:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010da:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010dc:	2201      	movs	r2, #1
 80010de:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	480d      	ldr	r0, [pc, #52]	@ (8001118 <MX_ADC1_Init+0x74>)
 80010e2:	f001 fa37 	bl	8002554 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 fdfc 	bl	8001ce8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_ADC1_Init+0x74>)
 8001102:	f001 fceb 	bl	8002adc <HAL_ADC_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800110c:	f000 fdec 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200001f4 	.word	0x200001f4
 800111c:	40012400 	.word	0x40012400

08001120 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a14      	ldr	r2, [pc, #80]	@ (800118c <HAL_ADC_MspInit+0x6c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d121      	bne.n	8001184 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 8001146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_ADC_MspInit+0x70>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001170:	2301      	movs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001174:	2303      	movs	r3, #3
 8001176:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <HAL_ADC_MspInit+0x74>)
 8001180:	f002 f8aa 	bl	80032d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40012400 	.word	0x40012400
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800

08001198 <ADC_Get_Average>:
  }
}

/* USER CODE BEGIN 1 */
//times(读取次数)
uint32_t ADC_Get_Average(ADC_HandleTypeDef *hadc, uint8_t ch, uint8_t times) {
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	70bb      	strb	r3, [r7, #2]
	ADC_ChannelConfTypeDef sConfig;		//通道初始化
	uint32_t value_sum = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
	uint8_t i;
	switch (ch)							//选择ADC通道
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b11      	cmp	r3, #17
 80011b0:	d84d      	bhi.n	800124e <ADC_Get_Average+0xb6>
 80011b2:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <ADC_Get_Average+0x20>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	08001201 	.word	0x08001201
 80011bc:	08001207 	.word	0x08001207
 80011c0:	0800120d 	.word	0x0800120d
 80011c4:	08001213 	.word	0x08001213
 80011c8:	08001219 	.word	0x08001219
 80011cc:	0800121f 	.word	0x0800121f
 80011d0:	08001225 	.word	0x08001225
 80011d4:	0800122b 	.word	0x0800122b
 80011d8:	08001231 	.word	0x08001231
 80011dc:	08001237 	.word	0x08001237
 80011e0:	0800123d 	.word	0x0800123d
 80011e4:	08001243 	.word	0x08001243
 80011e8:	0800124f 	.word	0x0800124f
 80011ec:	0800124f 	.word	0x0800124f
 80011f0:	0800124f 	.word	0x0800124f
 80011f4:	0800124f 	.word	0x0800124f
 80011f8:	0800124f 	.word	0x0800124f
 80011fc:	08001249 	.word	0x08001249
	{
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
		break;
 8001204:	e023      	b.n	800124e <ADC_Get_Average+0xb6>
	case 1:
		sConfig.Channel = ADC_CHANNEL_1;
 8001206:	2301      	movs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
		break;
 800120a:	e020      	b.n	800124e <ADC_Get_Average+0xb6>
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 800120c:	2302      	movs	r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
		break;
 8001210:	e01d      	b.n	800124e <ADC_Get_Average+0xb6>
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 8001212:	2303      	movs	r3, #3
 8001214:	60fb      	str	r3, [r7, #12]
		break;
 8001216:	e01a      	b.n	800124e <ADC_Get_Average+0xb6>
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 8001218:	2304      	movs	r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
		break;
 800121c:	e017      	b.n	800124e <ADC_Get_Average+0xb6>
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 800121e:	2305      	movs	r3, #5
 8001220:	60fb      	str	r3, [r7, #12]
		break;
 8001222:	e014      	b.n	800124e <ADC_Get_Average+0xb6>
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 8001224:	2306      	movs	r3, #6
 8001226:	60fb      	str	r3, [r7, #12]
		break;
 8001228:	e011      	b.n	800124e <ADC_Get_Average+0xb6>
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 800122a:	2307      	movs	r3, #7
 800122c:	60fb      	str	r3, [r7, #12]
		break;
 800122e:	e00e      	b.n	800124e <ADC_Get_Average+0xb6>
	case 8:
		sConfig.Channel = ADC_CHANNEL_8;
 8001230:	2308      	movs	r3, #8
 8001232:	60fb      	str	r3, [r7, #12]
		break;
 8001234:	e00b      	b.n	800124e <ADC_Get_Average+0xb6>
	case 9:
		sConfig.Channel = ADC_CHANNEL_9;
 8001236:	2309      	movs	r3, #9
 8001238:	60fb      	str	r3, [r7, #12]
		break;
 800123a:	e008      	b.n	800124e <ADC_Get_Average+0xb6>
	case 10:
		sConfig.Channel = ADC_CHANNEL_10;
 800123c:	230a      	movs	r3, #10
 800123e:	60fb      	str	r3, [r7, #12]
		break;
 8001240:	e005      	b.n	800124e <ADC_Get_Average+0xb6>
	case 11:
		sConfig.Channel = ADC_CHANNEL_11;
 8001242:	230b      	movs	r3, #11
 8001244:	60fb      	str	r3, [r7, #12]
		break;
 8001246:	e002      	b.n	800124e <ADC_Get_Average+0xb6>
	case 17:
		sConfig.Channel = ADC_CHANNEL_17;
 8001248:	2311      	movs	r3, #17
 800124a:	60fb      	str	r3, [r7, #12]
		break;
 800124c:	bf00      	nop
	}
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;		//采用周期239.5周期
 800124e:	2307      	movs	r3, #7
 8001250:	617b      	str	r3, [r7, #20]
	sConfig.Rank = 1;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(hadc, &sConfig);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f001 fc3d 	bl	8002adc <HAL_ADC_ConfigChannel>
	for (i = 0; i < times; i++) {
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e013      	b.n	8001290 <ADC_Get_Average+0xf8>
		HAL_ADC_Start(hadc);								//启动转换
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f001 fa4b 	bl	8002704 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, 30);				//等待转化结束
 800126e:	211e      	movs	r1, #30
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f001 fb21 	bl	80028b8 <HAL_ADC_PollForConversion>
		value_sum += HAL_ADC_GetValue(hadc);				//求和
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f001 fc24 	bl	8002ac4 <HAL_ADC_GetValue>
 800127c:	4602      	mov	r2, r0
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	4413      	add	r3, r2
 8001282:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Stop(hadc);								//停止转换
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f001 faeb 	bl	8002860 <HAL_ADC_Stop>
	for (i = 0; i < times; i++) {
 800128a:	7efb      	ldrb	r3, [r7, #27]
 800128c:	3301      	adds	r3, #1
 800128e:	76fb      	strb	r3, [r7, #27]
 8001290:	7efa      	ldrb	r2, [r7, #27]
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	429a      	cmp	r2, r3
 8001296:	d3e7      	bcc.n	8001268 <ADC_Get_Average+0xd0>
	}
	return (double) value_sum / times;									//返回平均值
 8001298:	69f8      	ldr	r0, [r7, #28]
 800129a:	f7ff f961 	bl	8000560 <__aeabi_ui2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	78bb      	ldrb	r3, [r7, #2]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f96b 	bl	8000580 <__aeabi_i2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7ff faf9 	bl	80008a8 <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fca1 	bl	8000c04 <__aeabi_d2uiz>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3720      	adds	r7, #32
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bdb0      	pop	{r4, r5, r7, pc}

080012cc <ADC_GetVotage>:

//以内部参考电压为基准得到ADC的平均电压
//ifCali=0 不进行校准    ifCali！=0 进行校准
double ADC_GetVotage(ADC_HandleTypeDef *hadc, uint8_t ch, uint8_t times,
		uint8_t ifCali) {
 80012cc:	b5b0      	push	{r4, r5, r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	70fb      	strb	r3, [r7, #3]
 80012de:	460b      	mov	r3, r1
 80012e0:	70bb      	strb	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	707b      	strb	r3, [r7, #1]
	uint32_t inf, value;
	if (ifCali) {
 80012e6:	787b      	ldrb	r3, [r7, #1]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <ADC_GetVotage+0x26>

		HAL_ADCEx_Calibration_Start(hadc);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f001 fd89 	bl	8002e04 <HAL_ADCEx_Calibration_Start>
	}
	value = ADC_Get_Average(hadc, ch, times);
 80012f2:	78ba      	ldrb	r2, [r7, #2]
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	4619      	mov	r1, r3
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff4d 	bl	8001198 <ADC_Get_Average>
 80012fe:	60f8      	str	r0, [r7, #12]
	if (ifCali) {
 8001300:	787b      	ldrb	r3, [r7, #1]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <ADC_GetVotage+0x40>

		HAL_ADCEx_Calibration_Start(&hadc1);
 8001306:	4813      	ldr	r0, [pc, #76]	@ (8001354 <ADC_GetVotage+0x88>)
 8001308:	f001 fd7c 	bl	8002e04 <HAL_ADCEx_Calibration_Start>
	}
	inf = ADC_Get_Average(&hadc1, 17, times);
 800130c:	78bb      	ldrb	r3, [r7, #2]
 800130e:	461a      	mov	r2, r3
 8001310:	2111      	movs	r1, #17
 8001312:	4810      	ldr	r0, [pc, #64]	@ (8001354 <ADC_GetVotage+0x88>)
 8001314:	f7ff ff40 	bl	8001198 <ADC_Get_Average>
 8001318:	60b8      	str	r0, [r7, #8]
	return 1.20 * (double)value / (double)inf;
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff f920 	bl	8000560 <__aeabi_ui2d>
 8001320:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <ADC_GetVotage+0x8c>)
 8001326:	f7ff f995 	bl	8000654 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4614      	mov	r4, r2
 8001330:	461d      	mov	r5, r3
 8001332:	68b8      	ldr	r0, [r7, #8]
 8001334:	f7ff f914 	bl	8000560 <__aeabi_ui2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7ff fab2 	bl	80008a8 <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1

}
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bdb0      	pop	{r4, r5, r7, pc}
 8001352:	bf00      	nop
 8001354:	200001f4 	.word	0x200001f4
 8001358:	3ff33333 	.word	0x3ff33333

0800135c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001370:	4b1e      	ldr	r3, [pc, #120]	@ (80013ec <MX_GPIO_Init+0x90>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <MX_GPIO_Init+0x90>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <MX_GPIO_Init+0x90>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_GPIO_Init+0x90>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a17      	ldr	r2, [pc, #92]	@ (80013ec <MX_GPIO_Init+0x90>)
 800138e:	f043 0320 	orr.w	r3, r3, #32
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <MX_GPIO_Init+0x90>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_GPIO_Init+0x90>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <MX_GPIO_Init+0x90>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_GPIO_Init+0x90>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013b8:	2200      	movs	r2, #0
 80013ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013be:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <MX_GPIO_Init+0x94>)
 80013c0:	f002 f90e 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_GPIO_Init+0x94>)
 80013de:	f001 ff7b 	bl	80032d8 <HAL_GPIO_Init>

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40011000 	.word	0x40011000

080013f4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 80013fc:	1d39      	adds	r1, r7, #4
 80013fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001402:	2201      	movs	r2, #1
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <__io_putchar+0x20>)
 8001406:	f003 fe50 	bl	80050aa <HAL_UART_Transmit>
	return ch;
 800140a:	687b      	ldr	r3, [r7, #4]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	2000030c 	.word	0x2000030c

08001418 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001418:	b5b0      	push	{r4, r5, r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	float filtered_value=0;
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
	float measure;
	// float target = 2.4; // Moved to global scope
	uint16_t adc, inf;
	uint16_t count_p = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	837b      	strh	r3, [r7, #26]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001428:	f001 f80e 	bl	8002448 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800142c:	f000 f990 	bl	8001750 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001430:	f7ff ff94 	bl	800135c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001434:	f000 ff64 	bl	8002300 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001438:	f7ff fe34 	bl	80010a4 <MX_ADC1_Init>
	MX_TIM3_Init();
 800143c:	f000 fe94 	bl	8002168 <MX_TIM3_Init>
	MX_TIM2_Init();
 8001440:	f000 fe46 	bl	80020d0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	pid.P = 1025;        //P.I.D常量初始化   不同的线圈,不同的电源,参数不同
 8001444:	4baf      	ldr	r3, [pc, #700]	@ (8001704 <main+0x2ec>)
 8001446:	4ab0      	ldr	r2, [pc, #704]	@ (8001708 <main+0x2f0>)
 8001448:	601a      	str	r2, [r3, #0]
	pid.I = 0;
 800144a:	4bae      	ldr	r3, [pc, #696]	@ (8001704 <main+0x2ec>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
	pid.D = 568;
 8001452:	4bac      	ldr	r3, [pc, #688]	@ (8001704 <main+0x2ec>)
 8001454:	4aad      	ldr	r2, [pc, #692]	@ (800170c <main+0x2f4>)
 8001456:	609a      	str	r2, [r3, #8]
	pid.Ilimit = 0.8;
 8001458:	4baa      	ldr	r3, [pc, #680]	@ (8001704 <main+0x2ec>)
 800145a:	4aad      	ldr	r2, [pc, #692]	@ (8001710 <main+0x2f8>)
 800145c:	61da      	str	r2, [r3, #28]
	pid.PreError = 0;
 800145e:	4ba9      	ldr	r3, [pc, #676]	@ (8001704 <main+0x2ec>)
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
	pid.Ilimit_flag = 0;
 8001466:	4ba7      	ldr	r3, [pc, #668]	@ (8001704 <main+0x2ec>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pid.Irang = 10;
 800146e:	4ba5      	ldr	r3, [pc, #660]	@ (8001704 <main+0x2ec>)
 8001470:	4aa8      	ldr	r2, [pc, #672]	@ (8001714 <main+0x2fc>)
 8001472:	621a      	str	r2, [r3, #32]
	pid.Integral = 0;
 8001474:	4ba3      	ldr	r3, [pc, #652]	@ (8001704 <main+0x2ec>)
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	611a      	str	r2, [r3, #16]

	HAL_ADCEx_Calibration_Start(&hadc1);    //校准ADC
 800147c:	48a6      	ldr	r0, [pc, #664]	@ (8001718 <main+0x300>)
 800147e:	f001 fcc1 	bl	8002e04 <HAL_ADCEx_Calibration_Start>
	measure = ADC_GetVotage(&hadc1, 0, 3, 1);
 8001482:	2301      	movs	r3, #1
 8001484:	2203      	movs	r2, #3
 8001486:	2100      	movs	r1, #0
 8001488:	48a3      	ldr	r0, [pc, #652]	@ (8001718 <main+0x300>)
 800148a:	f7ff ff1f 	bl	80012cc <ADC_GetVotage>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fbd5 	bl	8000c44 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	617b      	str	r3, [r7, #20]
	pid.PreError = target - measure;
 800149e:	4b9f      	ldr	r3, [pc, #636]	@ (800171c <main+0x304>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc21 	bl	8000cec <__aeabi_fsub>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b95      	ldr	r3, [pc, #596]	@ (8001704 <main+0x2ec>)
 80014b0:	619a      	str	r2, [r3, #24]

	HAL_TIM_Base_Start_IT(&htim2);          //开启定时器,定时采样
 80014b2:	489b      	ldr	r0, [pc, #620]	@ (8001720 <main+0x308>)
 80014b4:	f002 fea6 	bl	8004204 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b8:	2100      	movs	r1, #0
 80014ba:	489a      	ldr	r0, [pc, #616]	@ (8001724 <main+0x30c>)
 80014bc:	f002 ff44 	bl	8004348 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // Start with PWM off
 80014c0:	4b98      	ldr	r3, [pc, #608]	@ (8001724 <main+0x30c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_UART_Receive_IT(&huart1, &num, 1);    //开启串口接收中断
 80014c8:	2201      	movs	r2, #1
 80014ca:	4997      	ldr	r1, [pc, #604]	@ (8001728 <main+0x310>)
 80014cc:	4897      	ldr	r0, [pc, #604]	@ (800172c <main+0x314>)
 80014ce:	f003 fe7e 	bl	80051ce <HAL_UART_Receive_IT>

	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;		//采用周期239.5周期
 80014d2:	2307      	movs	r3, #7
 80014d4:	60fb      	str	r3, [r7, #12]
	sConfig.Rank = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);           //开机LED闪烁
 80014da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014de:	4894      	ldr	r0, [pc, #592]	@ (8001730 <main+0x318>)
 80014e0:	f002 f896 	bl	8003610 <HAL_GPIO_TogglePin>
	HAL_Delay(200);												 //调试时使用,以判断单片机是否运行
 80014e4:	20c8      	movs	r0, #200	@ 0xc8
 80014e6:	f001 f811 	bl	800250c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80014ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014ee:	4890      	ldr	r0, [pc, #576]	@ (8001730 <main+0x318>)
 80014f0:	f002 f88e 	bl	8003610 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80014f4:	20c8      	movs	r0, #200	@ 0xc8
 80014f6:	f001 f809 	bl	800250c <HAL_Delay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80014fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014fe:	488c      	ldr	r0, [pc, #560]	@ (8001730 <main+0x318>)
 8001500:	f002 f886 	bl	8003610 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8001504:	20c8      	movs	r0, #200	@ 0xc8
 8001506:	f001 f801 	bl	800250c <HAL_Delay>
	while (1) {
		/* USER CODE END WHILE */


		/* USER CODE BEGIN 3 */
		if (isTriggered) {
 800150a:	4b8a      	ldr	r3, [pc, #552]	@ (8001734 <main+0x31c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0fb      	beq.n	800150a <main+0xf2>
			isTriggered = 0;
 8001512:	4b88      	ldr	r3, [pc, #544]	@ (8001734 <main+0x31c>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]

            // ADC sampling part
			sConfig.Channel = ADC_CHANNEL_0;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	487d      	ldr	r0, [pc, #500]	@ (8001718 <main+0x300>)
 8001522:	f001 fadb 	bl	8002adc <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 8001526:	487c      	ldr	r0, [pc, #496]	@ (8001718 <main+0x300>)
 8001528:	f001 f8ec 	bl	8002704 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 30);
 800152c:	211e      	movs	r1, #30
 800152e:	487a      	ldr	r0, [pc, #488]	@ (8001718 <main+0x300>)
 8001530:	f001 f9c2 	bl	80028b8 <HAL_ADC_PollForConversion>
			adc = HAL_ADC_GetValue(&hadc1);
 8001534:	4878      	ldr	r0, [pc, #480]	@ (8001718 <main+0x300>)
 8001536:	f001 fac5 	bl	8002ac4 <HAL_ADC_GetValue>
 800153a:	4603      	mov	r3, r0
 800153c:	827b      	strh	r3, [r7, #18]
			HAL_ADC_Stop(&hadc1);
 800153e:	4876      	ldr	r0, [pc, #472]	@ (8001718 <main+0x300>)
 8001540:	f001 f98e 	bl	8002860 <HAL_ADC_Stop>

			sConfig.Channel = ADC_CHANNEL_17;
 8001544:	2311      	movs	r3, #17
 8001546:	607b      	str	r3, [r7, #4]
			HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4872      	ldr	r0, [pc, #456]	@ (8001718 <main+0x300>)
 800154e:	f001 fac5 	bl	8002adc <HAL_ADC_ConfigChannel>
			HAL_ADC_Start(&hadc1);
 8001552:	4871      	ldr	r0, [pc, #452]	@ (8001718 <main+0x300>)
 8001554:	f001 f8d6 	bl	8002704 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 30);
 8001558:	211e      	movs	r1, #30
 800155a:	486f      	ldr	r0, [pc, #444]	@ (8001718 <main+0x300>)
 800155c:	f001 f9ac 	bl	80028b8 <HAL_ADC_PollForConversion>
			inf = HAL_ADC_GetValue(&hadc1);
 8001560:	486d      	ldr	r0, [pc, #436]	@ (8001718 <main+0x300>)
 8001562:	f001 faaf 	bl	8002ac4 <HAL_ADC_GetValue>
 8001566:	4603      	mov	r3, r0
 8001568:	823b      	strh	r3, [r7, #16]
			HAL_ADC_Stop(&hadc1);
 800156a:	486b      	ldr	r0, [pc, #428]	@ (8001718 <main+0x300>)
 800156c:	f001 f978 	bl	8002860 <HAL_ADC_Stop>

			measure = 1.20 * (float) adc / (float) inf;
 8001570:	8a7b      	ldrh	r3, [r7, #18]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fc6c 	bl	8000e50 <__aeabi_ui2f>
 8001578:	4603      	mov	r3, r0
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff f812 	bl	80005a4 <__aeabi_f2d>
 8001580:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001584:	4b6c      	ldr	r3, [pc, #432]	@ (8001738 <main+0x320>)
 8001586:	f7ff f865 	bl	8000654 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4614      	mov	r4, r2
 8001590:	461d      	mov	r5, r3
 8001592:	8a3b      	ldrh	r3, [r7, #16]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fc5b 	bl	8000e50 <__aeabi_ui2f>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff f801 	bl	80005a4 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7ff f97d 	bl	80008a8 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fb45 	bl	8000c44 <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	617b      	str	r3, [r7, #20]
			filtered_value = 0.5 * filtered_value + 0.5 * measure;
 80015be:	69f8      	ldr	r0, [r7, #28]
 80015c0:	f7fe fff0 	bl	80005a4 <__aeabi_f2d>
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <main+0x324>)
 80015ca:	f7ff f843 	bl	8000654 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4614      	mov	r4, r2
 80015d4:	461d      	mov	r5, r3
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7fe ffe4 	bl	80005a4 <__aeabi_f2d>
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	4b56      	ldr	r3, [pc, #344]	@ (800173c <main+0x324>)
 80015e2:	f7ff f837 	bl	8000654 <__aeabi_dmul>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7fe fe7b 	bl	80002e8 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff fb23 	bl	8000c44 <__aeabi_d2f>
 80015fe:	4603      	mov	r3, r0
 8001600:	61fb      	str	r3, [r7, #28]

            if(pid_running)
 8001602:	4b4f      	ldr	r3, [pc, #316]	@ (8001740 <main+0x328>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d072      	beq.n	80016f0 <main+0x2d8>
            {

                PID_Position_Cal(&pid, target, measure);
 800160a:	4b44      	ldr	r3, [pc, #272]	@ (800171c <main+0x304>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4619      	mov	r1, r3
 8001612:	483c      	ldr	r0, [pc, #240]	@ (8001704 <main+0x2ec>)
 8001614:	f000 fb6e 	bl	8001cf4 <PID_Position_Cal>

                if (pid.Output < 0.0) {
 8001618:	4b3a      	ldr	r3, [pc, #232]	@ (8001704 <main+0x2ec>)
 800161a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800161c:	f04f 0100 	mov.w	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fcbb 	bl	8000f9c <__aeabi_fcmplt>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <main+0x21e>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800162c:	4b3d      	ldr	r3, [pc, #244]	@ (8001724 <main+0x30c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
 8001634:	e033      	b.n	800169e <main+0x286>
                } else if (pid.Output > 100.0) {
 8001636:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <main+0x2ec>)
 8001638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163a:	4942      	ldr	r1, [pc, #264]	@ (8001744 <main+0x32c>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fccb 	bl	8000fd8 <__aeabi_fcmpgt>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <main+0x23e>
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, htim3.Instance->ARR);
 8001648:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <main+0x30c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b35      	ldr	r3, [pc, #212]	@ (8001724 <main+0x30c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001652:	635a      	str	r2, [r3, #52]	@ 0x34
 8001654:	e023      	b.n	800169e <main+0x286>
                } else {
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, (uint32_t )(pid.Output / 100.0 * htim3.Instance->ARR));
 8001656:	4b2b      	ldr	r3, [pc, #172]	@ (8001704 <main+0x2ec>)
 8001658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ffa2 	bl	80005a4 <__aeabi_f2d>
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <main+0x330>)
 8001666:	f7ff f91f 	bl	80008a8 <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4614      	mov	r4, r2
 8001670:	461d      	mov	r5, r3
 8001672:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <main+0x30c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff71 	bl	8000560 <__aeabi_ui2d>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7fe ffe5 	bl	8000654 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4925      	ldr	r1, [pc, #148]	@ (8001724 <main+0x30c>)
 8001690:	680c      	ldr	r4, [r1, #0]
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fab5 	bl	8000c04 <__aeabi_d2uiz>
 800169a:	4603      	mov	r3, r0
 800169c:	6363      	str	r3, [r4, #52]	@ 0x34
                }

                count_p++;
 800169e:	8b7b      	ldrh	r3, [r7, #26]
 80016a0:	3301      	adds	r3, #1
 80016a2:	837b      	strh	r3, [r7, #26]
                if(count_p >= 50){ // Use >= for safety
 80016a4:	8b7b      	ldrh	r3, [r7, #26]
 80016a6:	2b31      	cmp	r3, #49	@ 0x31
 80016a8:	f67f af2f 	bls.w	800150a <main+0xf2>
                    count_p = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	837b      	strh	r3, [r7, #26]
                    printf("t%d,m%d,pid%d\n",(int)(target*100),(int)(measure*100), (int)(pid.Output));
 80016b0:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <main+0x304>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4923      	ldr	r1, [pc, #140]	@ (8001744 <main+0x32c>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe fd5c 	bl	8000174 <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fc94 	bl	8000fec <__aeabi_f2iz>
 80016c4:	4604      	mov	r4, r0
 80016c6:	491f      	ldr	r1, [pc, #124]	@ (8001744 <main+0x32c>)
 80016c8:	6978      	ldr	r0, [r7, #20]
 80016ca:	f7fe fd53 	bl	8000174 <__aeabi_fmul>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc8b 	bl	8000fec <__aeabi_f2iz>
 80016d6:	4605      	mov	r5, r0
 80016d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <main+0x2ec>)
 80016da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fc85 	bl	8000fec <__aeabi_f2iz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	462a      	mov	r2, r5
 80016e6:	4621      	mov	r1, r4
 80016e8:	4818      	ldr	r0, [pc, #96]	@ (800174c <main+0x334>)
 80016ea:	f005 fda5 	bl	8007238 <iprintf>
 80016ee:	e70c      	b.n	800150a <main+0xf2>
                }

            }
            else
            {
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0); // Keep PWM off if stopped
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <main+0x30c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2200      	movs	r2, #0
 80016f6:	635a      	str	r2, [r3, #52]	@ 0x34
                pid.Integral = 0; // Reset integral term to prevent windup
 80016f8:	4b02      	ldr	r3, [pc, #8]	@ (8001704 <main+0x2ec>)
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
		if (isTriggered) {
 8001700:	e703      	b.n	800150a <main+0xf2>
 8001702:	bf00      	nop
 8001704:	20000224 	.word	0x20000224
 8001708:	44802000 	.word	0x44802000
 800170c:	440e0000 	.word	0x440e0000
 8001710:	3f4ccccd 	.word	0x3f4ccccd
 8001714:	41200000 	.word	0x41200000
 8001718:	200001f4 	.word	0x200001f4
 800171c:	20000000 	.word	0x20000000
 8001720:	2000027c 	.word	0x2000027c
 8001724:	200002c4 	.word	0x200002c4
 8001728:	2000025d 	.word	0x2000025d
 800172c:	2000030c 	.word	0x2000030c
 8001730:	40011000 	.word	0x40011000
 8001734:	2000025c 	.word	0x2000025c
 8001738:	3ff33333 	.word	0x3ff33333
 800173c:	3fe00000 	.word	0x3fe00000
 8001740:	2000025e 	.word	0x2000025e
 8001744:	42c80000 	.word	0x42c80000
 8001748:	40590000 	.word	0x40590000
 800174c:	08009998 	.word	0x08009998

08001750 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b094      	sub	sp, #80	@ 0x50
 8001754:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175a:	2228      	movs	r2, #40	@ 0x28
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f005 feb2 	bl	80074c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001780:	2301      	movs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178e:	2301      	movs	r3, #1
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001792:	2302      	movs	r3, #2
 8001794:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800179a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800179c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80017a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80017a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 ff4c 	bl	8003644 <HAL_RCC_OscConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0x66>
		Error_Handler();
 80017b2:	f000 fa99 	bl	8001ce8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80017b6:	230f      	movs	r3, #15
 80017b8:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ba:	2302      	movs	r3, #2
 80017bc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c6:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2102      	movs	r1, #2
 80017d2:	4618      	mov	r0, r3
 80017d4:	f002 f9b8 	bl	8003b48 <HAL_RCC_ClockConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x92>
		Error_Handler();
 80017de:	f000 fa83 	bl	8001ce8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017e2:	2302      	movs	r3, #2
 80017e4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80017e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017ea:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fb42 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0xae>
		Error_Handler();
 80017fa:	f000 fa75 	bl	8001ce8 <Error_Handler>
	}
}
 80017fe:	bf00      	nop
 8001800:	3750      	adds	r7, #80	@ 0x50
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//定时采样
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // 1.25Khz
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	if (htim == (&htim2)) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d102      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x16>
		isTriggered = 1;
 8001818:	4b04      	ldr	r3, [pc, #16]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
	}
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	2000027c 	.word	0x2000027c
 800182c:	2000025c 	.word	0x2000025c

08001830 <HAL_UART_RxCpltCallback>:
 * - 实现了通过"start"和"stop"指令控制PID启停
 * - 实现了通过特定字符('+','-','(',')','<','>')在线调整PID参数
 * - 实现了通过接收一串数字（以换行符'\n'结尾）来修改目标值`target`
 * - 新增：通过 'p', 'i', 'd' + 数字 的形式直接设定PID参数
 ******************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a9c      	ldr	r2, [pc, #624]	@ (8001ab0 <HAL_UART_RxCpltCallback+0x280>)
 800183e:	4293      	cmp	r3, r2
 8001840:	f040 822e 	bne.w	8001ca0 <HAL_UART_RxCpltCallback+0x470>
        // Check for single character PID tuning commands
        if (num == '+') {
 8001844:	4b9b      	ldr	r3, [pc, #620]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b2b      	cmp	r3, #43	@ 0x2b
 800184a:	d127      	bne.n	800189c <HAL_UART_RxCpltCallback+0x6c>
            pid.D += 1;
 800184c:	4b9a      	ldr	r3, [pc, #616]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fa4b 	bl	8000cf0 <__addsf3>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	4b96      	ldr	r3, [pc, #600]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001860:	609a      	str	r2, [r3, #8]
			printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 8001862:	4b95      	ldr	r3, [pc, #596]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fbc0 	bl	8000fec <__aeabi_f2iz>
 800186c:	4604      	mov	r4, r0
 800186e:	4b92      	ldr	r3, [pc, #584]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4992      	ldr	r1, [pc, #584]	@ (8001abc <HAL_UART_RxCpltCallback+0x28c>)
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fc7d 	bl	8000174 <__aeabi_fmul>
 800187a:	4603      	mov	r3, r0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fbb5 	bl	8000fec <__aeabi_f2iz>
 8001882:	4605      	mov	r5, r0
 8001884:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fbaf 	bl	8000fec <__aeabi_f2iz>
 800188e:	4603      	mov	r3, r0
 8001890:	462a      	mov	r2, r5
 8001892:	4621      	mov	r1, r4
 8001894:	488a      	ldr	r0, [pc, #552]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x290>)
 8001896:	f005 fccf 	bl	8007238 <iprintf>
 800189a:	e1fc      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
        } else if (num == '-') {
 800189c:	4b85      	ldr	r3, [pc, #532]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b2d      	cmp	r3, #45	@ 0x2d
 80018a2:	d127      	bne.n	80018f4 <HAL_UART_RxCpltCallback+0xc4>
            pid.D -= 1;
 80018a4:	4b84      	ldr	r3, [pc, #528]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fa1d 	bl	8000cec <__aeabi_fsub>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b80      	ldr	r3, [pc, #512]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80018b8:	609a      	str	r2, [r3, #8]
			printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 80018ba:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fb94 	bl	8000fec <__aeabi_f2iz>
 80018c4:	4604      	mov	r4, r0
 80018c6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	497c      	ldr	r1, [pc, #496]	@ (8001abc <HAL_UART_RxCpltCallback+0x28c>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fc51 	bl	8000174 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fb89 	bl	8000fec <__aeabi_f2iz>
 80018da:	4605      	mov	r5, r0
 80018dc:	4b76      	ldr	r3, [pc, #472]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fb83 	bl	8000fec <__aeabi_f2iz>
 80018e6:	4603      	mov	r3, r0
 80018e8:	462a      	mov	r2, r5
 80018ea:	4621      	mov	r1, r4
 80018ec:	4874      	ldr	r0, [pc, #464]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x290>)
 80018ee:	f005 fca3 	bl	8007238 <iprintf>
 80018f2:	e1d0      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
        } else if (num == ')') {
 80018f4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b29      	cmp	r3, #41	@ 0x29
 80018fa:	d127      	bne.n	800194c <HAL_UART_RxCpltCallback+0x11c>
            pid.P += 2;
 80018fc:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f9f3 	bl	8000cf0 <__addsf3>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001910:	601a      	str	r2, [r3, #0]
			printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 8001912:	4b69      	ldr	r3, [pc, #420]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fb68 	bl	8000fec <__aeabi_f2iz>
 800191c:	4604      	mov	r4, r0
 800191e:	4b66      	ldr	r3, [pc, #408]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4966      	ldr	r1, [pc, #408]	@ (8001abc <HAL_UART_RxCpltCallback+0x28c>)
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fc25 	bl	8000174 <__aeabi_fmul>
 800192a:	4603      	mov	r3, r0
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fb5d 	bl	8000fec <__aeabi_f2iz>
 8001932:	4605      	mov	r5, r0
 8001934:	4b60      	ldr	r3, [pc, #384]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fb57 	bl	8000fec <__aeabi_f2iz>
 800193e:	4603      	mov	r3, r0
 8001940:	462a      	mov	r2, r5
 8001942:	4621      	mov	r1, r4
 8001944:	485e      	ldr	r0, [pc, #376]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x290>)
 8001946:	f005 fc77 	bl	8007238 <iprintf>
 800194a:	e1a4      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
        } else if (num == '(') {
 800194c:	4b59      	ldr	r3, [pc, #356]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b28      	cmp	r3, #40	@ 0x28
 8001952:	d127      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0x174>
            pid.P -= 2;
 8001954:	4b58      	ldr	r3, [pc, #352]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9c5 	bl	8000cec <__aeabi_fsub>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b54      	ldr	r3, [pc, #336]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001968:	601a      	str	r2, [r3, #0]
			printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 800196a:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb3c 	bl	8000fec <__aeabi_f2iz>
 8001974:	4604      	mov	r4, r0
 8001976:	4b50      	ldr	r3, [pc, #320]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4950      	ldr	r1, [pc, #320]	@ (8001abc <HAL_UART_RxCpltCallback+0x28c>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fbf9 	bl	8000174 <__aeabi_fmul>
 8001982:	4603      	mov	r3, r0
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fb31 	bl	8000fec <__aeabi_f2iz>
 800198a:	4605      	mov	r5, r0
 800198c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fb2b 	bl	8000fec <__aeabi_f2iz>
 8001996:	4603      	mov	r3, r0
 8001998:	462a      	mov	r2, r5
 800199a:	4621      	mov	r1, r4
 800199c:	4848      	ldr	r0, [pc, #288]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x290>)
 800199e:	f005 fc4b 	bl	8007238 <iprintf>
 80019a2:	e178      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
        } else if (num == '<') {
 80019a4:	4b43      	ldr	r3, [pc, #268]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b3c      	cmp	r3, #60	@ 0x3c
 80019aa:	d12f      	bne.n	8001a0c <HAL_UART_RxCpltCallback+0x1dc>
            pid.I -= 0.1;
 80019ac:	4b42      	ldr	r3, [pc, #264]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdf7 	bl	80005a4 <__aeabi_f2d>
 80019b6:	a33c      	add	r3, pc, #240	@ (adr r3, 8001aa8 <HAL_UART_RxCpltCallback+0x278>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fc92 	bl	80002e4 <__aeabi_dsub>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4610      	mov	r0, r2
 80019c6:	4619      	mov	r1, r3
 80019c8:	f7ff f93c 	bl	8000c44 <__aeabi_d2f>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80019d0:	6053      	str	r3, [r2, #4]
			printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 80019d2:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb08 	bl	8000fec <__aeabi_f2iz>
 80019dc:	4604      	mov	r4, r0
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	4936      	ldr	r1, [pc, #216]	@ (8001abc <HAL_UART_RxCpltCallback+0x28c>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fbc5 	bl	8000174 <__aeabi_fmul>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fafd 	bl	8000fec <__aeabi_f2iz>
 80019f2:	4605      	mov	r5, r0
 80019f4:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff faf7 	bl	8000fec <__aeabi_f2iz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	462a      	mov	r2, r5
 8001a02:	4621      	mov	r1, r4
 8001a04:	482e      	ldr	r0, [pc, #184]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x290>)
 8001a06:	f005 fc17 	bl	8007238 <iprintf>
 8001a0a:	e144      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
        } else if (num == '>') {
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a12:	d12f      	bne.n	8001a74 <HAL_UART_RxCpltCallback+0x244>
            pid.I += 0.1;
 8001a14:	4b28      	ldr	r3, [pc, #160]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fdc3 	bl	80005a4 <__aeabi_f2d>
 8001a1e:	a322      	add	r3, pc, #136	@ (adr r3, 8001aa8 <HAL_UART_RxCpltCallback+0x278>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fc60 	bl	80002e8 <__adddf3>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f908 	bl	8000c44 <__aeabi_d2f>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a20      	ldr	r2, [pc, #128]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001a38:	6053      	str	r3, [r2, #4]
			printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fad4 	bl	8000fec <__aeabi_f2iz>
 8001a44:	4604      	mov	r4, r0
 8001a46:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	491c      	ldr	r1, [pc, #112]	@ (8001abc <HAL_UART_RxCpltCallback+0x28c>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fb91 	bl	8000174 <__aeabi_fmul>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fac9 	bl	8000fec <__aeabi_f2iz>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_UART_RxCpltCallback+0x288>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fac3 	bl	8000fec <__aeabi_f2iz>
 8001a66:	4603      	mov	r3, r0
 8001a68:	462a      	mov	r2, r5
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	4814      	ldr	r0, [pc, #80]	@ (8001ac0 <HAL_UART_RxCpltCallback+0x290>)
 8001a6e:	f005 fbe3 	bl	8007238 <iprintf>
 8001a72:	e110      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
        }
        // Process string commands (start/stop/target value/PID set)
        else {
            if (num != '\n' && num != '\r' && rx_index < RX_BUFFER_SIZE - 1) {
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b0a      	cmp	r3, #10
 8001a7a:	d027      	beq.n	8001acc <HAL_UART_RxCpltCallback+0x29c>
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b0d      	cmp	r3, #13
 8001a82:	d023      	beq.n	8001acc <HAL_UART_RxCpltCallback+0x29c>
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x294>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d81f      	bhi.n	8001acc <HAL_UART_RxCpltCallback+0x29c>
                rx_buffer[rx_index++] = num;
 8001a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x294>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	b2d1      	uxtb	r1, r2
 8001a94:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <HAL_UART_RxCpltCallback+0x294>)
 8001a96:	7011      	strb	r1, [r2, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_UART_RxCpltCallback+0x284>)
 8001a9c:	7819      	ldrb	r1, [r3, #0]
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x298>)
 8001aa0:	5499      	strb	r1, [r3, r2]
 8001aa2:	e0f8      	b.n	8001c96 <HAL_UART_RxCpltCallback+0x466>
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	9999999a 	.word	0x9999999a
 8001aac:	3fb99999 	.word	0x3fb99999
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	2000025d 	.word	0x2000025d
 8001ab8:	20000224 	.word	0x20000224
 8001abc:	41200000 	.word	0x41200000
 8001ac0:	080099a8 	.word	0x080099a8
 8001ac4:	20000274 	.word	0x20000274
 8001ac8:	20000260 	.word	0x20000260
            } else { // Received a newline or buffer is full
                rx_buffer[rx_index] = '\0';
 8001acc:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x478>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b76      	ldr	r3, [pc, #472]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	5499      	strb	r1, [r3, r2]
                if (rx_index > 0) {
 8001ad8:	4b73      	ldr	r3, [pc, #460]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x478>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80d7 	beq.w	8001c90 <HAL_UART_RxCpltCallback+0x460>
                    if (strcmp((const char*)rx_buffer, "start") == 0) {
 8001ae2:	4973      	ldr	r1, [pc, #460]	@ (8001cb0 <HAL_UART_RxCpltCallback+0x480>)
 8001ae4:	4871      	ldr	r0, [pc, #452]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001ae6:	f7fe fb33 	bl	8000150 <strcmp>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d106      	bne.n	8001afe <HAL_UART_RxCpltCallback+0x2ce>
                        pid_running = 1;
 8001af0:	4b70      	ldr	r3, [pc, #448]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x484>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
                        printf("PID started.\n");
 8001af6:	4870      	ldr	r0, [pc, #448]	@ (8001cb8 <HAL_UART_RxCpltCallback+0x488>)
 8001af8:	f005 fc06 	bl	8007308 <puts>
 8001afc:	e0c8      	b.n	8001c90 <HAL_UART_RxCpltCallback+0x460>
                    } else if (strcmp((const char*)rx_buffer, "stop") == 0) {
 8001afe:	496f      	ldr	r1, [pc, #444]	@ (8001cbc <HAL_UART_RxCpltCallback+0x48c>)
 8001b00:	486a      	ldr	r0, [pc, #424]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001b02:	f7fe fb25 	bl	8000150 <strcmp>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d106      	bne.n	8001b1a <HAL_UART_RxCpltCallback+0x2ea>
                        pid_running = 0;
 8001b0c:	4b69      	ldr	r3, [pc, #420]	@ (8001cb4 <HAL_UART_RxCpltCallback+0x484>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
                        printf("PID stopped.\n");
 8001b12:	486b      	ldr	r0, [pc, #428]	@ (8001cc0 <HAL_UART_RxCpltCallback+0x490>)
 8001b14:	f005 fbf8 	bl	8007308 <puts>
 8001b18:	e0ba      	b.n	8001c90 <HAL_UART_RxCpltCallback+0x460>
                    }
                    // ===== NEW FUNCTIONALITY START =====
                    else if (rx_buffer[0] == 'p' || rx_buffer[0] == 'P') {
 8001b1a:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b70      	cmp	r3, #112	@ 0x70
 8001b20:	d003      	beq.n	8001b2a <HAL_UART_RxCpltCallback+0x2fa>
 8001b22:	4b62      	ldr	r3, [pc, #392]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b50      	cmp	r3, #80	@ 0x50
 8001b28:	d129      	bne.n	8001b7e <HAL_UART_RxCpltCallback+0x34e>
                        pid.P = atof((const char*)rx_buffer + 1);
 8001b2a:	4b66      	ldr	r3, [pc, #408]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x494>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 ffa7 	bl	8005a80 <atof>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f883 	bl	8000c44 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4a61      	ldr	r2, [pc, #388]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001b42:	6013      	str	r3, [r2, #0]
                        printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 8001b44:	4b60      	ldr	r3, [pc, #384]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fa4f 	bl	8000fec <__aeabi_f2iz>
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	495d      	ldr	r1, [pc, #372]	@ (8001ccc <HAL_UART_RxCpltCallback+0x49c>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fb0c 	bl	8000174 <__aeabi_fmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fa44 	bl	8000fec <__aeabi_f2iz>
 8001b64:	4605      	mov	r5, r0
 8001b66:	4b58      	ldr	r3, [pc, #352]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fa3e 	bl	8000fec <__aeabi_f2iz>
 8001b70:	4603      	mov	r3, r0
 8001b72:	462a      	mov	r2, r5
 8001b74:	4621      	mov	r1, r4
 8001b76:	4856      	ldr	r0, [pc, #344]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x4a0>)
 8001b78:	f005 fb5e 	bl	8007238 <iprintf>
 8001b7c:	e088      	b.n	8001c90 <HAL_UART_RxCpltCallback+0x460>
                    } else if (rx_buffer[0] == 'i' || rx_buffer[0] == 'I') {
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b69      	cmp	r3, #105	@ 0x69
 8001b84:	d003      	beq.n	8001b8e <HAL_UART_RxCpltCallback+0x35e>
 8001b86:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b49      	cmp	r3, #73	@ 0x49
 8001b8c:	d129      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0x3b2>
                        pid.I = atof((const char*)rx_buffer + 1);
 8001b8e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x494>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 ff75 	bl	8005a80 <atof>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7ff f851 	bl	8000c44 <__aeabi_d2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a48      	ldr	r2, [pc, #288]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001ba6:	6053      	str	r3, [r2, #4]
                        printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 8001ba8:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa1d 	bl	8000fec <__aeabi_f2iz>
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4944      	ldr	r1, [pc, #272]	@ (8001ccc <HAL_UART_RxCpltCallback+0x49c>)
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fada 	bl	8000174 <__aeabi_fmul>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa12 	bl	8000fec <__aeabi_f2iz>
 8001bc8:	4605      	mov	r5, r0
 8001bca:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa0c 	bl	8000fec <__aeabi_f2iz>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	462a      	mov	r2, r5
 8001bd8:	4621      	mov	r1, r4
 8001bda:	483d      	ldr	r0, [pc, #244]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x4a0>)
 8001bdc:	f005 fb2c 	bl	8007238 <iprintf>
 8001be0:	e056      	b.n	8001c90 <HAL_UART_RxCpltCallback+0x460>
                    } else if (rx_buffer[0] == 'd' || rx_buffer[0] == 'D') {
 8001be2:	4b32      	ldr	r3, [pc, #200]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b64      	cmp	r3, #100	@ 0x64
 8001be8:	d003      	beq.n	8001bf2 <HAL_UART_RxCpltCallback+0x3c2>
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b44      	cmp	r3, #68	@ 0x44
 8001bf0:	d129      	bne.n	8001c46 <HAL_UART_RxCpltCallback+0x416>
                        pid.D = atof((const char*)rx_buffer + 1);
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_UART_RxCpltCallback+0x494>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 ff43 	bl	8005a80 <atof>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7ff f81f 	bl	8000c44 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4a2f      	ldr	r2, [pc, #188]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001c0a:	6093      	str	r3, [r2, #8]
                        printf("P:%d, I*10:%d, D:%d\n", (int)pid.P, (int)(pid.I * 10), (int)pid.D);
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f9eb 	bl	8000fec <__aeabi_f2iz>
 8001c16:	4604      	mov	r4, r0
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	492b      	ldr	r1, [pc, #172]	@ (8001ccc <HAL_UART_RxCpltCallback+0x49c>)
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe faa8 	bl	8000174 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f9e0 	bl	8000fec <__aeabi_f2iz>
 8001c2c:	4605      	mov	r5, r0
 8001c2e:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <HAL_UART_RxCpltCallback+0x498>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f9da 	bl	8000fec <__aeabi_f2iz>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	462a      	mov	r2, r5
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	4824      	ldr	r0, [pc, #144]	@ (8001cd0 <HAL_UART_RxCpltCallback+0x4a0>)
 8001c40:	f005 fafa 	bl	8007238 <iprintf>
 8001c44:	e024      	b.n	8001c90 <HAL_UART_RxCpltCallback+0x460>
                    }
                    // ===== NEW FUNCTIONALITY END =====
                    else {
                        float new_target = atof((const char*)rx_buffer);
 8001c46:	4819      	ldr	r0, [pc, #100]	@ (8001cac <HAL_UART_RxCpltCallback+0x47c>)
 8001c48:	f003 ff1a 	bl	8005a80 <atof>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fff6 	bl	8000c44 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]
                        if (new_target > 0) { // Basic validation
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff f9b9 	bl	8000fd8 <__aeabi_fcmpgt>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d011      	beq.n	8001c90 <HAL_UART_RxCpltCallback+0x460>
                            target = new_target;
 8001c6c:	4a19      	ldr	r2, [pc, #100]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x4a4>)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6013      	str	r3, [r2, #0]
                            printf("New Target set to: %d\n", (int)(target * 100));
 8001c72:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_UART_RxCpltCallback+0x4a4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4918      	ldr	r1, [pc, #96]	@ (8001cd8 <HAL_UART_RxCpltCallback+0x4a8>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fa7b 	bl	8000174 <__aeabi_fmul>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f9b3 	bl	8000fec <__aeabi_f2iz>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4814      	ldr	r0, [pc, #80]	@ (8001cdc <HAL_UART_RxCpltCallback+0x4ac>)
 8001c8c:	f005 fad4 	bl	8007238 <iprintf>
                        }
                    }
                }
                rx_index = 0; // Reset buffer index for the next command
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_UART_RxCpltCallback+0x478>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
            }
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart1, &num, 1);
 8001c96:	2201      	movs	r2, #1
 8001c98:	4911      	ldr	r1, [pc, #68]	@ (8001ce0 <HAL_UART_RxCpltCallback+0x4b0>)
 8001c9a:	4812      	ldr	r0, [pc, #72]	@ (8001ce4 <HAL_UART_RxCpltCallback+0x4b4>)
 8001c9c:	f003 fa97 	bl	80051ce <HAL_UART_Receive_IT>
    }
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca8:	20000274 	.word	0x20000274
 8001cac:	20000260 	.word	0x20000260
 8001cb0:	080099c0 	.word	0x080099c0
 8001cb4:	2000025e 	.word	0x2000025e
 8001cb8:	080099c8 	.word	0x080099c8
 8001cbc:	080099d8 	.word	0x080099d8
 8001cc0:	080099e0 	.word	0x080099e0
 8001cc4:	20000261 	.word	0x20000261
 8001cc8:	20000224 	.word	0x20000224
 8001ccc:	41200000 	.word	0x41200000
 8001cd0:	080099a8 	.word	0x080099a8
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	42c80000 	.word	0x42c80000
 8001cdc:	080099f0 	.word	0x080099f0
 8001ce0:	2000025d 	.word	0x2000025d
 8001ce4:	2000030c 	.word	0x2000030c

08001ce8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <Error_Handler+0x8>

08001cf4 <PID_Position_Cal>:

#include "pid.h"


//PID计算
void PID_Position_Cal(PID_TYPE *PID, float target, float measure) {
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]

	PID->Error = target - measure;
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	68b8      	ldr	r0, [r7, #8]
 8001d04:	f7fe fff2 	bl	8000cec <__aeabi_fsub>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	60da      	str	r2, [r3, #12]
	PID->Differ = PID->Error - PID->PreError;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f7fe ffe6 	bl	8000cec <__aeabi_fsub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	615a      	str	r2, [r3, #20]
	PID->Integral += PID->Error;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4619      	mov	r1, r3
 8001d32:	4610      	mov	r0, r2
 8001d34:	f7fe ffdc 	bl	8000cf0 <__addsf3>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	611a      	str	r2, [r3, #16]


	if(measure < PID->Ilimit)      //如果磁铁距离线圈太远,不可能吸上,便不再输出
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff f928 	bl	8000f9c <__aeabi_fcmplt>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d014      	beq.n	8001d7c <PID_Position_Cal+0x88>
	{
		PID->Iout = 0;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
		PID->Dout = 0;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	631a      	str	r2, [r3, #48]	@ 0x30

		PID->Output = 0;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	@ 0x34

		PID->PreError = PID->Error;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	619a      	str	r2, [r3, #24]
		PID->Ilimit_flag = 0;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		return;
 8001d7a:	e06b      	b.n	8001e54 <PID_Position_Cal+0x160>
	}
	PID->Ilimit_flag = 1;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24


	//积分限幅
	if (PID->Integral > PID->Irang)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f7ff f922 	bl	8000fd8 <__aeabi_fcmpgt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <PID_Position_Cal+0xb0>
		PID->Integral = PID->Irang;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	e01b      	b.n	8001ddc <PID_Position_Cal+0xe8>
	else if (PID->Integral < 0 - PID->Irang)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691c      	ldr	r4, [r3, #16]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	4619      	mov	r1, r3
 8001dae:	f04f 0000 	mov.w	r0, #0
 8001db2:	f7fe ff9b 	bl	8000cec <__aeabi_fsub>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff f8ee 	bl	8000f9c <__aeabi_fcmplt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <PID_Position_Cal+0xe8>
		PID->Integral = 0 - PID->Irang;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0000 	mov.w	r0, #0
 8001dd0:	f7fe ff8c 	bl	8000cec <__aeabi_fsub>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	611a      	str	r2, [r3, #16]


	//计算输出
	PID->Pout = PID->P * PID->Error;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f7fe f9c4 	bl	8000174 <__aeabi_fmul>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
	PID->Iout = PID->I * PID->Integral;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4610      	mov	r0, r2
 8001e00:	f7fe f9b8 	bl	8000174 <__aeabi_fmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	PID->Dout = PID->D * PID->Differ;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f7fe f9ac 	bl	8000174 <__aeabi_fmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	631a      	str	r2, [r3, #48]	@ 0x30

	PID->Output = PID->Pout + PID->Iout + PID->Dout;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7fe ff5e 	bl	8000cf0 <__addsf3>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f7fe ff56 	bl	8000cf0 <__addsf3>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	635a      	str	r2, [r3, #52]	@ 0x34

	PID->PreError = PID->Error;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	619a      	str	r2, [r3, #24]
}
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd90      	pop	{r4, r7, pc}
	...

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_MspInit+0x5c>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <HAL_MspInit+0x5c>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6193      	str	r3, [r2, #24]
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_MspInit+0x5c>)
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <HAL_MspInit+0x5c>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb8 <HAL_MspInit+0x5c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_MspInit+0x5c>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_MspInit+0x60>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <HAL_MspInit+0x60>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010000 	.word	0x40010000

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f10:	f000 fae0 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <TIM2_IRQHandler+0x10>)
 8001f1e:	f002 fab5 	bl	800448c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000027c 	.word	0x2000027c

08001f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <USART1_IRQHandler+0x10>)
 8001f32:	f003 f97d 	bl	8005230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000030c 	.word	0x2000030c

08001f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	return 1;
 8001f44:	2301      	movs	r3, #1
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <_kill>:

int _kill(int pid, int sig)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f58:	f005 fb2a 	bl	80075b0 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2216      	movs	r2, #22
 8001f60:	601a      	str	r2, [r3, #0]
	return -1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_exit>:

void _exit (int status)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f76:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffe7 	bl	8001f4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <_exit+0x12>

08001f84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	e00a      	b.n	8001fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4601      	mov	r1, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	b2ca      	uxtb	r2, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf0      	blt.n	8001f96 <_read+0x12>
	}

return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e009      	b.n	8001fe4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	60ba      	str	r2, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fa0b 	bl	80013f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf1      	blt.n	8001fd0 <_write+0x12>
	}
	return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_close>:

int _close(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800201c:	605a      	str	r2, [r3, #4]
	return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <_isatty>:

int _isatty(int file)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
	return 1;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800203e:	b480      	push	{r7}
 8002040:	b085      	sub	sp, #20
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
	return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002060:	4a14      	ldr	r2, [pc, #80]	@ (80020b4 <_sbrk+0x5c>)
 8002062:	4b15      	ldr	r3, [pc, #84]	@ (80020b8 <_sbrk+0x60>)
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800206c:	4b13      	ldr	r3, [pc, #76]	@ (80020bc <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d102      	bne.n	800207a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <_sbrk+0x64>)
 8002076:	4a12      	ldr	r2, [pc, #72]	@ (80020c0 <_sbrk+0x68>)
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800207a:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	429a      	cmp	r2, r3
 8002086:	d207      	bcs.n	8002098 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002088:	f005 fa92 	bl	80075b0 <__errno>
 800208c:	4603      	mov	r3, r0
 800208e:	220c      	movs	r2, #12
 8002090:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e009      	b.n	80020ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002098:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <_sbrk+0x64>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <_sbrk+0x64>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <_sbrk+0x64>)
 80020a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020aa:	68fb      	ldr	r3, [r7, #12]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20005000 	.word	0x20005000
 80020b8:	00000400 	.word	0x00000400
 80020bc:	20000278 	.word	0x20000278
 80020c0:	200004a0 	.word	0x200004a0

080020c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <MX_TIM2_Init+0x94>)
 80020ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <MX_TIM2_Init+0x94>)
 80020f6:	2247      	movs	r2, #71	@ 0x47
 80020f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002164 <MX_TIM2_Init+0x94>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 8002100:	4b18      	ldr	r3, [pc, #96]	@ (8002164 <MX_TIM2_Init+0x94>)
 8002102:	f240 321f 	movw	r2, #799	@ 0x31f
 8002106:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002108:	4b16      	ldr	r3, [pc, #88]	@ (8002164 <MX_TIM2_Init+0x94>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <MX_TIM2_Init+0x94>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002114:	4813      	ldr	r0, [pc, #76]	@ (8002164 <MX_TIM2_Init+0x94>)
 8002116:	f002 f825 	bl	8004164 <HAL_TIM_Base_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002120:	f7ff fde2 	bl	8001ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002124:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	4619      	mov	r1, r3
 8002130:	480c      	ldr	r0, [pc, #48]	@ (8002164 <MX_TIM2_Init+0x94>)
 8002132:	f002 fb71 	bl	8004818 <HAL_TIM_ConfigClockSource>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800213c:	f7ff fdd4 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002148:	463b      	mov	r3, r7
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <MX_TIM2_Init+0x94>)
 800214e:	f002 feef 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002158:	f7ff fdc6 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800215c:	bf00      	nop
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000027c 	.word	0x2000027c

08002168 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
 8002182:	60da      	str	r2, [r3, #12]
 8002184:	611a      	str	r2, [r3, #16]
 8002186:	615a      	str	r2, [r3, #20]
 8002188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218a:	4b21      	ldr	r3, [pc, #132]	@ (8002210 <MX_TIM3_Init+0xa8>)
 800218c:	4a21      	ldr	r2, [pc, #132]	@ (8002214 <MX_TIM3_Init+0xac>)
 800218e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002190:	4b1f      	ldr	r3, [pc, #124]	@ (8002210 <MX_TIM3_Init+0xa8>)
 8002192:	2247      	movs	r2, #71	@ 0x47
 8002194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <MX_TIM3_Init+0xa8>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 249;
 800219c:	4b1c      	ldr	r3, [pc, #112]	@ (8002210 <MX_TIM3_Init+0xa8>)
 800219e:	22f9      	movs	r2, #249	@ 0xf9
 80021a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002210 <MX_TIM3_Init+0xa8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a8:	4b19      	ldr	r3, [pc, #100]	@ (8002210 <MX_TIM3_Init+0xa8>)
 80021aa:	2280      	movs	r2, #128	@ 0x80
 80021ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021ae:	4818      	ldr	r0, [pc, #96]	@ (8002210 <MX_TIM3_Init+0xa8>)
 80021b0:	f002 f87a 	bl	80042a8 <HAL_TIM_PWM_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80021ba:	f7ff fd95 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021c6:	f107 0320 	add.w	r3, r7, #32
 80021ca:	4619      	mov	r1, r3
 80021cc:	4810      	ldr	r0, [pc, #64]	@ (8002210 <MX_TIM3_Init+0xa8>)
 80021ce:	f002 feaf 	bl	8004f30 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80021d8:	f7ff fd86 	bl	8001ce8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021dc:	2360      	movs	r3, #96	@ 0x60
 80021de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4807      	ldr	r0, [pc, #28]	@ (8002210 <MX_TIM3_Init+0xa8>)
 80021f4:	f002 fa52 	bl	800469c <HAL_TIM_PWM_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021fe:	f7ff fd73 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002202:	4803      	ldr	r0, [pc, #12]	@ (8002210 <MX_TIM3_Init+0xa8>)
 8002204:	f000 f84a 	bl	800229c <HAL_TIM_MspPostInit>

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	@ 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200002c4 	.word	0x200002c4
 8002214:	40000400 	.word	0x40000400

08002218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002228:	d113      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800222a:	4b0c      	ldr	r3, [pc, #48]	@ (800225c <HAL_TIM_Base_MspInit+0x44>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a0b      	ldr	r2, [pc, #44]	@ (800225c <HAL_TIM_Base_MspInit+0x44>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_TIM_Base_MspInit+0x44>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	201c      	movs	r0, #28
 8002248:	f000 ff5f 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800224c:	201c      	movs	r0, #28
 800224e:	f000 ff78 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000

08002260 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <HAL_TIM_PWM_MspInit+0x34>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10b      	bne.n	800228a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002272:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <HAL_TIM_PWM_MspInit+0x38>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_TIM_PWM_MspInit+0x38>)
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_TIM_PWM_MspInit+0x38>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40000400 	.word	0x40000400
 8002298:	40021000 	.word	0x40021000

0800229c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_TIM_MspPostInit+0x58>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d117      	bne.n	80022ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <HAL_TIM_MspPostInit+0x5c>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <HAL_TIM_MspPostInit+0x5c>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <HAL_TIM_MspPostInit+0x5c>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022d4:	2340      	movs	r3, #64	@ 0x40
 80022d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2302      	movs	r3, #2
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4619      	mov	r1, r3
 80022e6:	4805      	ldr	r0, [pc, #20]	@ (80022fc <HAL_TIM_MspPostInit+0x60>)
 80022e8:	f000 fff6 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3720      	adds	r7, #32
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010800 	.word	0x40010800

08002300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 8002306:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <MX_USART1_UART_Init+0x50>)
 8002308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800230a:	4b10      	ldr	r3, [pc, #64]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 800230c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b08      	ldr	r3, [pc, #32]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b06      	ldr	r3, [pc, #24]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	@ (800234c <MX_USART1_UART_Init+0x4c>)
 8002338:	f002 fe6a 	bl	8005010 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002342:	f7ff fcd1 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000030c 	.word	0x2000030c
 8002350:	40013800 	.word	0x40013800

08002354 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a20      	ldr	r2, [pc, #128]	@ (80023f0 <HAL_UART_MspInit+0x9c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d139      	bne.n	80023e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002374:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <HAL_UART_MspInit+0xa0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a1e      	ldr	r2, [pc, #120]	@ (80023f4 <HAL_UART_MspInit+0xa0>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <HAL_UART_MspInit+0xa0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_UART_MspInit+0xa0>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a18      	ldr	r2, [pc, #96]	@ (80023f4 <HAL_UART_MspInit+0xa0>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b16      	ldr	r3, [pc, #88]	@ (80023f4 <HAL_UART_MspInit+0xa0>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	4619      	mov	r1, r3
 80023b8:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <HAL_UART_MspInit+0xa4>)
 80023ba:	f000 ff8d 	bl	80032d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <HAL_UART_MspInit+0xa4>)
 80023d4:	f000 ff80 	bl	80032d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2104      	movs	r1, #4
 80023dc:	2025      	movs	r0, #37	@ 0x25
 80023de:	f000 fe94 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023e2:	2025      	movs	r0, #37	@ 0x25
 80023e4:	f000 fead 	bl	8003142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023e8:	bf00      	nop
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40010800 	.word	0x40010800

080023fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480c      	ldr	r0, [pc, #48]	@ (8002430 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fe:	490d      	ldr	r1, [pc, #52]	@ (8002434 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002400:	4a0d      	ldr	r2, [pc, #52]	@ (8002438 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002414:	4c0a      	ldr	r4, [pc, #40]	@ (8002440 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002422:	f7ff fe4f 	bl	80020c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f005 f8c9 	bl	80075bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800242a:	f7fe fff5 	bl	8001418 <main>
  bx lr
 800242e:	4770      	bx	lr
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002438:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 800243c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002440:	200004a0 	.word	0x200004a0

08002444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC1_2_IRQHandler>
	...

08002448 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800244c:	4b08      	ldr	r3, [pc, #32]	@ (8002470 <HAL_Init+0x28>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <HAL_Init+0x28>)
 8002452:	f043 0310 	orr.w	r3, r3, #16
 8002456:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002458:	2003      	movs	r0, #3
 800245a:	f000 fe4b 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245e:	2000      	movs	r0, #0
 8002460:	f000 f808 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002464:	f7ff fcfa 	bl	8001e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fe63 	bl	800315e <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f000 fe2b 	bl	800310a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	@ (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000004 	.word	0x20000004
 80024cc:	2000000c 	.word	0x2000000c
 80024d0:	20000008 	.word	0x20000008

080024d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_IncTick+0x1c>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_IncTick+0x20>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a03      	ldr	r2, [pc, #12]	@ (80024f4 <HAL_IncTick+0x20>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	20000350 	.word	0x20000350

080024f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b02      	ldr	r3, [pc, #8]	@ (8002508 <HAL_GetTick+0x10>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	20000350 	.word	0x20000350

0800250c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002514:	f7ff fff0 	bl	80024f8 <HAL_GetTick>
 8002518:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d005      	beq.n	8002532 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002526:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <HAL_Delay+0x44>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002532:	bf00      	nop
 8002534:	f7ff ffe0 	bl	80024f8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	429a      	cmp	r2, r3
 8002542:	d8f7      	bhi.n	8002534 <HAL_Delay+0x28>
  {
  }
}
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000000c 	.word	0x2000000c

08002554 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0be      	b.n	80026f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d109      	bne.n	8002598 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fdc4 	bl	8001120 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fbf1 	bl	8002d80 <ADC_ConversionStop_Disable>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8099 	bne.w	80026e2 <HAL_ADC_Init+0x18e>
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8095 	bne.w	80026e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025c0:	f023 0302 	bic.w	r3, r3, #2
 80025c4:	f043 0202 	orr.w	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7b1b      	ldrb	r3, [r3, #12]
 80025da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ec:	d003      	beq.n	80025f6 <HAL_ADC_Init+0xa2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_ADC_Init+0xa8>
 80025f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025fa:	e000      	b.n	80025fe <HAL_ADC_Init+0xaa>
 80025fc:	2300      	movs	r3, #0
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7d1b      	ldrb	r3, [r3, #20]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d119      	bne.n	8002640 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7b1b      	ldrb	r3, [r3, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d109      	bne.n	8002628 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	3b01      	subs	r3, #1
 800261a:	035a      	lsls	r2, r3, #13
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	e00b      	b.n	8002640 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <HAL_ADC_Init+0x1a8>)
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6812      	ldr	r2, [r2, #0]
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	430b      	orrs	r3, r1
 8002666:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002670:	d003      	beq.n	800267a <HAL_ADC_Init+0x126>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d104      	bne.n	8002684 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	3b01      	subs	r3, #1
 8002680:	051b      	lsls	r3, r3, #20
 8002682:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	430a      	orrs	r2, r1
 8002696:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <HAL_ADC_Init+0x1ac>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10b      	bne.n	80026c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026be:	e018      	b.n	80026f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c4:	f023 0312 	bic.w	r3, r3, #18
 80026c8:	f043 0210 	orr.w	r2, r3, #16
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026e0:	e007      	b.n	80026f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	f043 0210 	orr.w	r2, r3, #16
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002700:	ff1f0efe 	.word	0xff1f0efe

08002704 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADC_Start+0x1a>
 800271a:	2302      	movs	r3, #2
 800271c:	e098      	b.n	8002850 <HAL_ADC_Start+0x14c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fad0 	bl	8002ccc <ADC_Enable>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 8087 	bne.w	8002846 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a41      	ldr	r2, [pc, #260]	@ (8002858 <HAL_ADC_Start+0x154>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d105      	bne.n	8002762 <HAL_ADC_Start+0x5e>
 8002756:	4b41      	ldr	r3, [pc, #260]	@ (800285c <HAL_ADC_Start+0x158>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002766:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d026      	beq.n	80027ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002780:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002784:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278c:	e01d      	b.n	80027ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002792:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <HAL_ADC_Start+0x158>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_Start+0xaa>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002858 <HAL_ADC_Start+0x154>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <HAL_ADC_Start+0xc6>
 80027ae:	4b2b      	ldr	r3, [pc, #172]	@ (800285c <HAL_ADC_Start+0x158>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	f023 0206 	bic.w	r2, r3, #6
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80027e2:	e002      	b.n	80027ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0202 	mvn.w	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002806:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800280a:	d113      	bne.n	8002834 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002810:	4a11      	ldr	r2, [pc, #68]	@ (8002858 <HAL_ADC_Start+0x154>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d105      	bne.n	8002822 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002816:	4b11      	ldr	r3, [pc, #68]	@ (800285c <HAL_ADC_Start+0x158>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800281e:	2b00      	cmp	r3, #0
 8002820:	d108      	bne.n	8002834 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	e00c      	b.n	800284e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	e003      	b.n	800284e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40012800 	.word	0x40012800
 800285c:	40012400 	.word	0x40012400

08002860 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_Stop+0x1a>
 8002876:	2302      	movs	r3, #2
 8002878:	e01a      	b.n	80028b0 <HAL_ADC_Stop+0x50>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa7c 	bl	8002d80 <ADC_ConversionStop_Disable>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	f043 0201 	orr.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80028ce:	f7ff fe13 	bl	80024f8 <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00b      	beq.n	80028fa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	f043 0220 	orr.w	r2, r3, #32
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0d3      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d131      	bne.n	800296c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d12a      	bne.n	800296c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002916:	e021      	b.n	800295c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291e:	d01d      	beq.n	800295c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d007      	beq.n	8002936 <HAL_ADC_PollForConversion+0x7e>
 8002926:	f7ff fde7 	bl	80024f8 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d212      	bcs.n	800295c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	f043 0204 	orr.w	r2, r3, #4
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0a2      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0d6      	beq.n	8002918 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800296a:	e070      	b.n	8002a4e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800296c:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <HAL_ADC_PollForConversion+0x1f4>)
 800296e:	681c      	ldr	r4, [r3, #0]
 8002970:	2002      	movs	r0, #2
 8002972:	f001 fb37 	bl	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002976:	4603      	mov	r3, r0
 8002978:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab0 <HAL_ADC_PollForConversion+0x1f8>)
 8002984:	400b      	ands	r3, r1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_ADC_PollForConversion+0x104>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68d9      	ldr	r1, [r3, #12]
 8002990:	4b48      	ldr	r3, [pc, #288]	@ (8002ab4 <HAL_ADC_PollForConversion+0x1fc>)
 8002992:	400b      	ands	r3, r1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <HAL_ADC_PollForConversion+0x104>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	4b46      	ldr	r3, [pc, #280]	@ (8002ab8 <HAL_ADC_PollForConversion+0x200>)
 80029a0:	400b      	ands	r3, r1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d108      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x100>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68d9      	ldr	r1, [r3, #12]
 80029ac:	4b43      	ldr	r3, [pc, #268]	@ (8002abc <HAL_ADC_PollForConversion+0x204>)
 80029ae:	400b      	ands	r3, r1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x100>
 80029b4:	2314      	movs	r3, #20
 80029b6:	e020      	b.n	80029fa <HAL_ADC_PollForConversion+0x142>
 80029b8:	2329      	movs	r3, #41	@ 0x29
 80029ba:	e01e      	b.n	80029fa <HAL_ADC_PollForConversion+0x142>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6919      	ldr	r1, [r3, #16]
 80029c2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_ADC_PollForConversion+0x200>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_PollForConversion+0x120>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68d9      	ldr	r1, [r3, #12]
 80029d0:	4b3a      	ldr	r3, [pc, #232]	@ (8002abc <HAL_ADC_PollForConversion+0x204>)
 80029d2:	400b      	ands	r3, r1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00d      	beq.n	80029f4 <HAL_ADC_PollForConversion+0x13c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	4b38      	ldr	r3, [pc, #224]	@ (8002ac0 <HAL_ADC_PollForConversion+0x208>)
 80029e0:	400b      	ands	r3, r1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d108      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x140>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68d9      	ldr	r1, [r3, #12]
 80029ec:	4b34      	ldr	r3, [pc, #208]	@ (8002ac0 <HAL_ADC_PollForConversion+0x208>)
 80029ee:	400b      	ands	r3, r1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x140>
 80029f4:	2354      	movs	r3, #84	@ 0x54
 80029f6:	e000      	b.n	80029fa <HAL_ADC_PollForConversion+0x142>
 80029f8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a00:	e021      	b.n	8002a46 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a08:	d01a      	beq.n	8002a40 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_ADC_PollForConversion+0x168>
 8002a10:	f7ff fd72 	bl	80024f8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d20f      	bcs.n	8002a40 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d90b      	bls.n	8002a40 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e030      	b.n	8002aa2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d8d9      	bhi.n	8002a02 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0212 	mvn.w	r2, #18
 8002a56:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002a6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002a72:	d115      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d111      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	f043 0201 	orr.w	r2, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	24924924 	.word	0x24924924
 8002ab4:	00924924 	.word	0x00924924
 8002ab8:	12492492 	.word	0x12492492
 8002abc:	00492492 	.word	0x00492492
 8002ac0:	00249249 	.word	0x00249249

08002ac4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x20>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e0dc      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x1da>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d81c      	bhi.n	8002b46 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b05      	subs	r3, #5
 8002b1e:	221f      	movs	r2, #31
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4019      	ands	r1, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	3b05      	subs	r3, #5
 8002b38:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b44:	e03c      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d81c      	bhi.n	8002b88 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3b23      	subs	r3, #35	@ 0x23
 8002b60:	221f      	movs	r2, #31
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	4019      	ands	r1, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3b23      	subs	r3, #35	@ 0x23
 8002b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b86:	e01b      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b41      	subs	r3, #65	@ 0x41
 8002b9a:	221f      	movs	r2, #31
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	4019      	ands	r1, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b41      	subs	r3, #65	@ 0x41
 8002bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b09      	cmp	r3, #9
 8002bc6:	d91c      	bls.n	8002c02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b1e      	subs	r3, #30
 8002bda:	2207      	movs	r2, #7
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	4019      	ands	r1, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6898      	ldr	r0, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b1e      	subs	r3, #30
 8002bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	e019      	b.n	8002c36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6919      	ldr	r1, [r3, #16]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	2207      	movs	r2, #7
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	4019      	ands	r1, r3
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	6898      	ldr	r0, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d003      	beq.n	8002c46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c42:	2b11      	cmp	r3, #17
 8002c44:	d132      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d125      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d126      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002c6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b10      	cmp	r3, #16
 8002c74:	d11a      	bne.n	8002cac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c76:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a13      	ldr	r2, [pc, #76]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0c9a      	lsrs	r2, r3, #18
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x1b2>
 8002c9a:	e007      	b.n	8002cac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	40012400 	.word	0x40012400
 8002cc4:	20000004 	.word	0x20000004
 8002cc8:	431bde83 	.word	0x431bde83

08002ccc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d040      	beq.n	8002d6c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d78 <ADC_Enable+0xac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8002d7c <ADC_Enable+0xb0>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	0c9b      	lsrs	r3, r3, #18
 8002d06:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d08:	e002      	b.n	8002d10 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1f9      	bne.n	8002d0a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d16:	f7ff fbef 	bl	80024f8 <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d1c:	e01f      	b.n	8002d5e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d1e:	f7ff fbeb 	bl	80024f8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d918      	bls.n	8002d5e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d011      	beq.n	8002d5e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e007      	b.n	8002d6e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d1d8      	bne.n	8002d1e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	431bde83 	.word	0x431bde83

08002d80 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d12e      	bne.n	8002df8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002daa:	f7ff fba5 	bl	80024f8 <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002db0:	e01b      	b.n	8002dea <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002db2:	f7ff fba1 	bl	80024f8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d914      	bls.n	8002dea <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10d      	bne.n	8002dea <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	f043 0210 	orr.w	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e007      	b.n	8002dfa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d0dc      	beq.n	8002db2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e095      	b.n	8002f4e <HAL_ADCEx_Calibration_Start+0x14a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa8 	bl	8002d80 <ADC_ConversionStop_Disable>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8084 	bne.w	8002f44 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	f043 0202 	orr.w	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002e50:	4b41      	ldr	r3, [pc, #260]	@ (8002f58 <HAL_ADCEx_Calibration_Start+0x154>)
 8002e52:	681c      	ldr	r4, [r3, #0]
 8002e54:	2002      	movs	r0, #2
 8002e56:	f001 f8c5 	bl	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002e60:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002e62:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002e64:	e002      	b.n	8002e6c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f9      	bne.n	8002e66 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff2a 	bl	8002ccc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0208 	orr.w	r2, r2, #8
 8002e86:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e88:	f7ff fb36 	bl	80024f8 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e8e:	e01b      	b.n	8002ec8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e90:	f7ff fb32 	bl	80024f8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d914      	bls.n	8002ec8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb0:	f023 0312 	bic.w	r3, r3, #18
 8002eb4:	f043 0210 	orr.w	r2, r3, #16
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e042      	b.n	8002f4e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1dc      	bne.n	8002e90 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0204 	orr.w	r2, r2, #4
 8002ee4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002ee6:	f7ff fb07 	bl	80024f8 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002eec:	e01b      	b.n	8002f26 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002eee:	f7ff fb03 	bl	80024f8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b0a      	cmp	r3, #10
 8002efa:	d914      	bls.n	8002f26 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00d      	beq.n	8002f26 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	f023 0312 	bic.w	r3, r3, #18
 8002f12:	f043 0210 	orr.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e013      	b.n	8002f4e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1dc      	bne.n	8002eee <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f38:	f023 0303 	bic.w	r3, r3, #3
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000004 	.word	0x20000004

08002f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f8e:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	60d3      	str	r3, [r2, #12]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	e000ed00 	.word	0xe000ed00

08002fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fa8:	4b04      	ldr	r3, [pc, #16]	@ (8002fbc <__NVIC_GetPriorityGrouping+0x18>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	0a1b      	lsrs	r3, r3, #8
 8002fae:	f003 0307 	and.w	r3, r3, #7
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	db0b      	blt.n	8002fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4906      	ldr	r1, [pc, #24]	@ (8002ff4 <__NVIC_EnableIRQ+0x34>)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000e100 	.word	0xe000e100

08002ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	2b00      	cmp	r3, #0
 800300a:	db0a      	blt.n	8003022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	490c      	ldr	r1, [pc, #48]	@ (8003044 <__NVIC_SetPriority+0x4c>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	0112      	lsls	r2, r2, #4
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	440b      	add	r3, r1
 800301c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003020:	e00a      	b.n	8003038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	4908      	ldr	r1, [pc, #32]	@ (8003048 <__NVIC_SetPriority+0x50>)
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	3b04      	subs	r3, #4
 8003030:	0112      	lsls	r2, r2, #4
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	440b      	add	r3, r1
 8003036:	761a      	strb	r2, [r3, #24]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	e000e100 	.word	0xe000e100
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	@ 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f1c3 0307 	rsb	r3, r3, #7
 8003066:	2b04      	cmp	r3, #4
 8003068:	bf28      	it	cs
 800306a:	2304      	movcs	r3, #4
 800306c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3304      	adds	r3, #4
 8003072:	2b06      	cmp	r3, #6
 8003074:	d902      	bls.n	800307c <NVIC_EncodePriority+0x30>
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3b03      	subs	r3, #3
 800307a:	e000      	b.n	800307e <NVIC_EncodePriority+0x32>
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	f04f 32ff 	mov.w	r2, #4294967295
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43da      	mvns	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	401a      	ands	r2, r3
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003094:	f04f 31ff 	mov.w	r1, #4294967295
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	43d9      	mvns	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	4313      	orrs	r3, r2
         );
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3724      	adds	r7, #36	@ 0x24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	@ (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff90 	bl	8002ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff ff2d 	bl	8002f5c <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800311c:	f7ff ff42 	bl	8002fa4 <__NVIC_GetPriorityGrouping>
 8003120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff90 	bl	800304c <NVIC_EncodePriority>
 800312c:	4602      	mov	r2, r0
 800312e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff5f 	bl	8002ff8 <__NVIC_SetPriority>
}
 800313a:	bf00      	nop
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff ff35 	bl	8002fc0 <__NVIC_EnableIRQ>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffa2 	bl	80030b0 <SysTick_Config>
 800316c:	4603      	mov	r3, r0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003176:	b480      	push	{r7}
 8003178:	b085      	sub	sp, #20
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003188:	2b02      	cmp	r3, #2
 800318a:	d008      	beq.n	800319e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2204      	movs	r2, #4
 8003190:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e020      	b.n	80031e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 020e 	bic.w	r2, r2, #14
 80031ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 0201 	bic.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80031de:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d005      	beq.n	800320e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2204      	movs	r2, #4
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e051      	b.n	80032b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 020e 	bic.w	r2, r2, #14
 800321c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0201 	bic.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a22      	ldr	r2, [pc, #136]	@ (80032bc <HAL_DMA_Abort_IT+0xd0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d029      	beq.n	800328c <HAL_DMA_Abort_IT+0xa0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a20      	ldr	r2, [pc, #128]	@ (80032c0 <HAL_DMA_Abort_IT+0xd4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMA_Abort_IT+0x9c>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <HAL_DMA_Abort_IT+0xd8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01a      	beq.n	8003282 <HAL_DMA_Abort_IT+0x96>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <HAL_DMA_Abort_IT+0xdc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d012      	beq.n	800327c <HAL_DMA_Abort_IT+0x90>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1c      	ldr	r2, [pc, #112]	@ (80032cc <HAL_DMA_Abort_IT+0xe0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00a      	beq.n	8003276 <HAL_DMA_Abort_IT+0x8a>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1a      	ldr	r2, [pc, #104]	@ (80032d0 <HAL_DMA_Abort_IT+0xe4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d102      	bne.n	8003270 <HAL_DMA_Abort_IT+0x84>
 800326a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800326e:	e00e      	b.n	800328e <HAL_DMA_Abort_IT+0xa2>
 8003270:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003274:	e00b      	b.n	800328e <HAL_DMA_Abort_IT+0xa2>
 8003276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800327a:	e008      	b.n	800328e <HAL_DMA_Abort_IT+0xa2>
 800327c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003280:	e005      	b.n	800328e <HAL_DMA_Abort_IT+0xa2>
 8003282:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003286:	e002      	b.n	800328e <HAL_DMA_Abort_IT+0xa2>
 8003288:	2310      	movs	r3, #16
 800328a:	e000      	b.n	800328e <HAL_DMA_Abort_IT+0xa2>
 800328c:	2301      	movs	r3, #1
 800328e:	4a11      	ldr	r2, [pc, #68]	@ (80032d4 <HAL_DMA_Abort_IT+0xe8>)
 8003290:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
    } 
  }
  return status;
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40020008 	.word	0x40020008
 80032c0:	4002001c 	.word	0x4002001c
 80032c4:	40020030 	.word	0x40020030
 80032c8:	40020044 	.word	0x40020044
 80032cc:	40020058 	.word	0x40020058
 80032d0:	4002006c 	.word	0x4002006c
 80032d4:	40020000 	.word	0x40020000

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b08b      	sub	sp, #44	@ 0x2c
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	e169      	b.n	80035c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032ec:	2201      	movs	r2, #1
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	429a      	cmp	r2, r3
 8003306:	f040 8158 	bne.w	80035ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a9a      	ldr	r2, [pc, #616]	@ (8003578 <HAL_GPIO_Init+0x2a0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d05e      	beq.n	80033d2 <HAL_GPIO_Init+0xfa>
 8003314:	4a98      	ldr	r2, [pc, #608]	@ (8003578 <HAL_GPIO_Init+0x2a0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d875      	bhi.n	8003406 <HAL_GPIO_Init+0x12e>
 800331a:	4a98      	ldr	r2, [pc, #608]	@ (800357c <HAL_GPIO_Init+0x2a4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d058      	beq.n	80033d2 <HAL_GPIO_Init+0xfa>
 8003320:	4a96      	ldr	r2, [pc, #600]	@ (800357c <HAL_GPIO_Init+0x2a4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d86f      	bhi.n	8003406 <HAL_GPIO_Init+0x12e>
 8003326:	4a96      	ldr	r2, [pc, #600]	@ (8003580 <HAL_GPIO_Init+0x2a8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d052      	beq.n	80033d2 <HAL_GPIO_Init+0xfa>
 800332c:	4a94      	ldr	r2, [pc, #592]	@ (8003580 <HAL_GPIO_Init+0x2a8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d869      	bhi.n	8003406 <HAL_GPIO_Init+0x12e>
 8003332:	4a94      	ldr	r2, [pc, #592]	@ (8003584 <HAL_GPIO_Init+0x2ac>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d04c      	beq.n	80033d2 <HAL_GPIO_Init+0xfa>
 8003338:	4a92      	ldr	r2, [pc, #584]	@ (8003584 <HAL_GPIO_Init+0x2ac>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d863      	bhi.n	8003406 <HAL_GPIO_Init+0x12e>
 800333e:	4a92      	ldr	r2, [pc, #584]	@ (8003588 <HAL_GPIO_Init+0x2b0>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d046      	beq.n	80033d2 <HAL_GPIO_Init+0xfa>
 8003344:	4a90      	ldr	r2, [pc, #576]	@ (8003588 <HAL_GPIO_Init+0x2b0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d85d      	bhi.n	8003406 <HAL_GPIO_Init+0x12e>
 800334a:	2b12      	cmp	r3, #18
 800334c:	d82a      	bhi.n	80033a4 <HAL_GPIO_Init+0xcc>
 800334e:	2b12      	cmp	r3, #18
 8003350:	d859      	bhi.n	8003406 <HAL_GPIO_Init+0x12e>
 8003352:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <HAL_GPIO_Init+0x80>)
 8003354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003358:	080033d3 	.word	0x080033d3
 800335c:	080033ad 	.word	0x080033ad
 8003360:	080033bf 	.word	0x080033bf
 8003364:	08003401 	.word	0x08003401
 8003368:	08003407 	.word	0x08003407
 800336c:	08003407 	.word	0x08003407
 8003370:	08003407 	.word	0x08003407
 8003374:	08003407 	.word	0x08003407
 8003378:	08003407 	.word	0x08003407
 800337c:	08003407 	.word	0x08003407
 8003380:	08003407 	.word	0x08003407
 8003384:	08003407 	.word	0x08003407
 8003388:	08003407 	.word	0x08003407
 800338c:	08003407 	.word	0x08003407
 8003390:	08003407 	.word	0x08003407
 8003394:	08003407 	.word	0x08003407
 8003398:	08003407 	.word	0x08003407
 800339c:	080033b5 	.word	0x080033b5
 80033a0:	080033c9 	.word	0x080033c9
 80033a4:	4a79      	ldr	r2, [pc, #484]	@ (800358c <HAL_GPIO_Init+0x2b4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033aa:	e02c      	b.n	8003406 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	623b      	str	r3, [r7, #32]
          break;
 80033b2:	e029      	b.n	8003408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	3304      	adds	r3, #4
 80033ba:	623b      	str	r3, [r7, #32]
          break;
 80033bc:	e024      	b.n	8003408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	3308      	adds	r3, #8
 80033c4:	623b      	str	r3, [r7, #32]
          break;
 80033c6:	e01f      	b.n	8003408 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	330c      	adds	r3, #12
 80033ce:	623b      	str	r3, [r7, #32]
          break;
 80033d0:	e01a      	b.n	8003408 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033da:	2304      	movs	r3, #4
 80033dc:	623b      	str	r3, [r7, #32]
          break;
 80033de:	e013      	b.n	8003408 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033e8:	2308      	movs	r3, #8
 80033ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	611a      	str	r2, [r3, #16]
          break;
 80033f2:	e009      	b.n	8003408 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033f4:	2308      	movs	r3, #8
 80033f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	615a      	str	r2, [r3, #20]
          break;
 80033fe:	e003      	b.n	8003408 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
          break;
 8003404:	e000      	b.n	8003408 <HAL_GPIO_Init+0x130>
          break;
 8003406:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2bff      	cmp	r3, #255	@ 0xff
 800340c:	d801      	bhi.n	8003412 <HAL_GPIO_Init+0x13a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	e001      	b.n	8003416 <HAL_GPIO_Init+0x13e>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2bff      	cmp	r3, #255	@ 0xff
 800341c:	d802      	bhi.n	8003424 <HAL_GPIO_Init+0x14c>
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	e002      	b.n	800342a <HAL_GPIO_Init+0x152>
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	3b08      	subs	r3, #8
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	210f      	movs	r1, #15
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	fa01 f303 	lsl.w	r3, r1, r3
 8003444:	431a      	orrs	r2, r3
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80b1 	beq.w	80035ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003458:	4b4d      	ldr	r3, [pc, #308]	@ (8003590 <HAL_GPIO_Init+0x2b8>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a4c      	ldr	r2, [pc, #304]	@ (8003590 <HAL_GPIO_Init+0x2b8>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b4a      	ldr	r3, [pc, #296]	@ (8003590 <HAL_GPIO_Init+0x2b8>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003470:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <HAL_GPIO_Init+0x2bc>)
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4013      	ands	r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a40      	ldr	r2, [pc, #256]	@ (8003598 <HAL_GPIO_Init+0x2c0>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d013      	beq.n	80034c4 <HAL_GPIO_Init+0x1ec>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a3f      	ldr	r2, [pc, #252]	@ (800359c <HAL_GPIO_Init+0x2c4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00d      	beq.n	80034c0 <HAL_GPIO_Init+0x1e8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a3e      	ldr	r2, [pc, #248]	@ (80035a0 <HAL_GPIO_Init+0x2c8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d007      	beq.n	80034bc <HAL_GPIO_Init+0x1e4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a3d      	ldr	r2, [pc, #244]	@ (80035a4 <HAL_GPIO_Init+0x2cc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <HAL_GPIO_Init+0x1e0>
 80034b4:	2303      	movs	r3, #3
 80034b6:	e006      	b.n	80034c6 <HAL_GPIO_Init+0x1ee>
 80034b8:	2304      	movs	r3, #4
 80034ba:	e004      	b.n	80034c6 <HAL_GPIO_Init+0x1ee>
 80034bc:	2302      	movs	r3, #2
 80034be:	e002      	b.n	80034c6 <HAL_GPIO_Init+0x1ee>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <HAL_GPIO_Init+0x1ee>
 80034c4:	2300      	movs	r3, #0
 80034c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c8:	f002 0203 	and.w	r2, r2, #3
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	4093      	lsls	r3, r2
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80034d6:	492f      	ldr	r1, [pc, #188]	@ (8003594 <HAL_GPIO_Init+0x2bc>)
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034f0:	4b2d      	ldr	r3, [pc, #180]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	492c      	ldr	r1, [pc, #176]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
 80034fc:	e006      	b.n	800350c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034fe:	4b2a      	ldr	r3, [pc, #168]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	43db      	mvns	r3, r3
 8003506:	4928      	ldr	r1, [pc, #160]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003508:	4013      	ands	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003518:	4b23      	ldr	r3, [pc, #140]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	4922      	ldr	r1, [pc, #136]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
 8003524:	e006      	b.n	8003534 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003526:	4b20      	ldr	r3, [pc, #128]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	43db      	mvns	r3, r3
 800352e:	491e      	ldr	r1, [pc, #120]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003530:	4013      	ands	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d006      	beq.n	800354e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4918      	ldr	r1, [pc, #96]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	608b      	str	r3, [r1, #8]
 800354c:	e006      	b.n	800355c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	43db      	mvns	r3, r3
 8003556:	4914      	ldr	r1, [pc, #80]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 8003558:	4013      	ands	r3, r2
 800355a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d021      	beq.n	80035ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003568:	4b0f      	ldr	r3, [pc, #60]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	490e      	ldr	r1, [pc, #56]	@ (80035a8 <HAL_GPIO_Init+0x2d0>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	60cb      	str	r3, [r1, #12]
 8003574:	e021      	b.n	80035ba <HAL_GPIO_Init+0x2e2>
 8003576:	bf00      	nop
 8003578:	10320000 	.word	0x10320000
 800357c:	10310000 	.word	0x10310000
 8003580:	10220000 	.word	0x10220000
 8003584:	10210000 	.word	0x10210000
 8003588:	10120000 	.word	0x10120000
 800358c:	10110000 	.word	0x10110000
 8003590:	40021000 	.word	0x40021000
 8003594:	40010000 	.word	0x40010000
 8003598:	40010800 	.word	0x40010800
 800359c:	40010c00 	.word	0x40010c00
 80035a0:	40011000 	.word	0x40011000
 80035a4:	40011400 	.word	0x40011400
 80035a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035ac:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_GPIO_Init+0x304>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	4909      	ldr	r1, [pc, #36]	@ (80035dc <HAL_GPIO_Init+0x304>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	3301      	adds	r3, #1
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f47f ae8e 	bne.w	80032ec <HAL_GPIO_Init+0x14>
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	372c      	adds	r7, #44	@ 0x2c
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	43d9      	mvns	r1, r3
 800362e:	887b      	ldrh	r3, [r7, #2]
 8003630:	400b      	ands	r3, r1
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	611a      	str	r2, [r3, #16]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
	...

08003644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e272      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8087 	beq.w	8003772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003664:	4b92      	ldr	r3, [pc, #584]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b04      	cmp	r3, #4
 800366e:	d00c      	beq.n	800368a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003670:	4b8f      	ldr	r3, [pc, #572]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 030c 	and.w	r3, r3, #12
 8003678:	2b08      	cmp	r3, #8
 800367a:	d112      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5e>
 800367c:	4b8c      	ldr	r3, [pc, #560]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003688:	d10b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368a:	4b89      	ldr	r3, [pc, #548]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d06c      	beq.n	8003770 <HAL_RCC_OscConfig+0x12c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d168      	bne.n	8003770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e24c      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x76>
 80036ac:	4b80      	ldr	r3, [pc, #512]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a7f      	ldr	r2, [pc, #508]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e02e      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x98>
 80036c2:	4b7b      	ldr	r3, [pc, #492]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7a      	ldr	r2, [pc, #488]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b78      	ldr	r3, [pc, #480]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a77      	ldr	r2, [pc, #476]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e01d      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0xbc>
 80036e6:	4b72      	ldr	r3, [pc, #456]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a71      	ldr	r2, [pc, #452]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b6f      	ldr	r3, [pc, #444]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6e      	ldr	r2, [pc, #440]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0xd4>
 8003700:	4b6b      	ldr	r3, [pc, #428]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6a      	ldr	r2, [pc, #424]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b68      	ldr	r3, [pc, #416]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a67      	ldr	r2, [pc, #412]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe feea 	bl	80024f8 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe fee6 	bl	80024f8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	@ 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e200      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b5d      	ldr	r3, [pc, #372]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0xe4>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe fed6 	bl	80024f8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe fed2 	bl	80024f8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	@ 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1ec      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x10c>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377e:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378a:	4b49      	ldr	r3, [pc, #292]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x18c>
 8003796:	4b46      	ldr	r3, [pc, #280]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b43      	ldr	r3, [pc, #268]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x176>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1c0      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b3d      	ldr	r3, [pc, #244]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4939      	ldr	r1, [pc, #228]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b36      	ldr	r3, [pc, #216]	@ (80038b4 <HAL_RCC_OscConfig+0x270>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe fe8b 	bl	80024f8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e6:	f7fe fe87 	bl	80024f8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e1a1      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b2a      	ldr	r3, [pc, #168]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4927      	ldr	r1, [pc, #156]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381a:	4b26      	ldr	r3, [pc, #152]	@ (80038b4 <HAL_RCC_OscConfig+0x270>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fe6a 	bl	80024f8 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe fe66 	bl	80024f8 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e180      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03a      	beq.n	80038c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b17      	ldr	r3, [pc, #92]	@ (80038b8 <HAL_RCC_OscConfig+0x274>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003860:	f7fe fe4a 	bl	80024f8 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003868:	f7fe fe46 	bl	80024f8 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e160      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <HAL_RCC_OscConfig+0x26c>)
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003886:	2001      	movs	r0, #1
 8003888:	f000 fad8 	bl	8003e3c <RCC_Delay>
 800388c:	e01c      	b.n	80038c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800388e:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <HAL_RCC_OscConfig+0x274>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7fe fe30 	bl	80024f8 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800389a:	e00f      	b.n	80038bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389c:	f7fe fe2c 	bl	80024f8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d908      	bls.n	80038bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e146      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
 80038ae:	bf00      	nop
 80038b0:	40021000 	.word	0x40021000
 80038b4:	42420000 	.word	0x42420000
 80038b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	4b92      	ldr	r3, [pc, #584]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e9      	bne.n	800389c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a6 	beq.w	8003a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038da:	4b8b      	ldr	r3, [pc, #556]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10d      	bne.n	8003902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e6:	4b88      	ldr	r3, [pc, #544]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038e8:	69db      	ldr	r3, [r3, #28]
 80038ea:	4a87      	ldr	r2, [pc, #540]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038f0:	61d3      	str	r3, [r2, #28]
 80038f2:	4b85      	ldr	r3, [pc, #532]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fe:	2301      	movs	r3, #1
 8003900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b82      	ldr	r3, [pc, #520]	@ (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7e      	ldr	r2, [pc, #504]	@ (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7fe fded 	bl	80024f8 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fe fde9 	bl	80024f8 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	@ 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e103      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b75      	ldr	r3, [pc, #468]	@ (8003b0c <HAL_RCC_OscConfig+0x4c8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HAL_RCC_OscConfig+0x312>
 8003948:	4b6f      	ldr	r3, [pc, #444]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4a6e      	ldr	r2, [pc, #440]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6213      	str	r3, [r2, #32]
 8003954:	e02d      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10c      	bne.n	8003978 <HAL_RCC_OscConfig+0x334>
 800395e:	4b6a      	ldr	r3, [pc, #424]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	4a69      	ldr	r2, [pc, #420]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	6213      	str	r3, [r2, #32]
 800396a:	4b67      	ldr	r3, [pc, #412]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	4a66      	ldr	r2, [pc, #408]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003970:	f023 0304 	bic.w	r3, r3, #4
 8003974:	6213      	str	r3, [r2, #32]
 8003976:	e01c      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d10c      	bne.n	800399a <HAL_RCC_OscConfig+0x356>
 8003980:	4b61      	ldr	r3, [pc, #388]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4a60      	ldr	r2, [pc, #384]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003986:	f043 0304 	orr.w	r3, r3, #4
 800398a:	6213      	str	r3, [r2, #32]
 800398c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4a5d      	ldr	r2, [pc, #372]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003992:	f043 0301 	orr.w	r3, r3, #1
 8003996:	6213      	str	r3, [r2, #32]
 8003998:	e00b      	b.n	80039b2 <HAL_RCC_OscConfig+0x36e>
 800399a:	4b5b      	ldr	r3, [pc, #364]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4a5a      	ldr	r2, [pc, #360]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	f023 0301 	bic.w	r3, r3, #1
 80039a4:	6213      	str	r3, [r2, #32]
 80039a6:	4b58      	ldr	r3, [pc, #352]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4a57      	ldr	r2, [pc, #348]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	f023 0304 	bic.w	r3, r3, #4
 80039b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d015      	beq.n	80039e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fe fd9d 	bl	80024f8 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039c2:	f7fe fd99 	bl	80024f8 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e0b1      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ee      	beq.n	80039c2 <HAL_RCC_OscConfig+0x37e>
 80039e4:	e014      	b.n	8003a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e6:	f7fe fd87 	bl	80024f8 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	e00a      	b.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ee:	f7fe fd83 	bl	80024f8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e09b      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a04:	4b40      	ldr	r3, [pc, #256]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ee      	bne.n	80039ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a10:	7dfb      	ldrb	r3, [r7, #23]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b3c      	ldr	r3, [pc, #240]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8087 	beq.w	8003b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2c:	4b36      	ldr	r3, [pc, #216]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d061      	beq.n	8003afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d146      	bne.n	8003ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a40:	4b33      	ldr	r3, [pc, #204]	@ (8003b10 <HAL_RCC_OscConfig+0x4cc>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a46:	f7fe fd57 	bl	80024f8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fe fd53 	bl	80024f8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e06d      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a60:	4b29      	ldr	r3, [pc, #164]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a74:	d108      	bne.n	8003a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a76:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	4921      	ldr	r1, [pc, #132]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a88:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a19      	ldr	r1, [r3, #32]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	491b      	ldr	r1, [pc, #108]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <HAL_RCC_OscConfig+0x4cc>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa6:	f7fe fd27 	bl	80024f8 <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fe fd23 	bl	80024f8 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e03d      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x46a>
 8003acc:	e035      	b.n	8003b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <HAL_RCC_OscConfig+0x4cc>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fd10 	bl	80024f8 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe fd0c 	bl	80024f8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e026      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x498>
 8003afa:	e01e      	b.n	8003b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e019      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <HAL_RCC_OscConfig+0x500>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d106      	bne.n	8003b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d001      	beq.n	8003b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0d0      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b67      	ldr	r3, [pc, #412]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4965      	ldr	r1, [pc, #404]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0b8      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b59      	ldr	r3, [pc, #356]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4a58      	ldr	r2, [pc, #352]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bbc:	4b53      	ldr	r3, [pc, #332]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a52      	ldr	r2, [pc, #328]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b50      	ldr	r3, [pc, #320]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	494d      	ldr	r1, [pc, #308]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d040      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d107      	bne.n	8003bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b47      	ldr	r3, [pc, #284]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d115      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e07f      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b41      	ldr	r3, [pc, #260]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e073      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3d      	ldr	r3, [pc, #244]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e06b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4936      	ldr	r1, [pc, #216]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fe fc5e 	bl	80024f8 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fe fc5a 	bl	80024f8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e053      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b27      	ldr	r3, [pc, #156]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d210      	bcs.n	8003c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b24      	ldr	r3, [pc, #144]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f023 0207 	bic.w	r2, r3, #7
 8003c7e:	4922      	ldr	r1, [pc, #136]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c86:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e032      	b.n	8003cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca4:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4916      	ldr	r1, [pc, #88]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	490e      	ldr	r1, [pc, #56]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cd6:	f000 f821 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	490a      	ldr	r1, [pc, #40]	@ (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	5ccb      	ldrb	r3, [r1, r3]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	4a09      	ldr	r2, [pc, #36]	@ (8003d14 <HAL_RCC_ClockConfig+0x1cc>)
 8003cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cf2:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCC_ClockConfig+0x1d0>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fbbc 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	08009a28 	.word	0x08009a28
 8003d14:	20000004 	.word	0x20000004
 8003d18:	20000008 	.word	0x20000008

08003d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b490      	push	{r4, r7}
 8003d1e:	b08a      	sub	sp, #40	@ 0x28
 8003d20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d22:	4b29      	ldr	r3, [pc, #164]	@ (8003dc8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d24:	1d3c      	adds	r4, r7, #4
 8003d26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d2c:	f240 2301 	movw	r3, #513	@ 0x201
 8003d30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d46:	4b21      	ldr	r3, [pc, #132]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d002      	beq.n	8003d5c <HAL_RCC_GetSysClockFreq+0x40>
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d003      	beq.n	8003d62 <HAL_RCC_GetSysClockFreq+0x46>
 8003d5a:	e02b      	b.n	8003db4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d5e:	623b      	str	r3, [r7, #32]
      break;
 8003d60:	e02b      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	0c9b      	lsrs	r3, r3, #18
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	3328      	adds	r3, #40	@ 0x28
 8003d6c:	443b      	add	r3, r7
 8003d6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d012      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0c5b      	lsrs	r3, r3, #17
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	3328      	adds	r3, #40	@ 0x28
 8003d8a:	443b      	add	r3, r7
 8003d8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d96:	fb03 f202 	mul.w	r2, r3, r2
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da2:	e004      	b.n	8003dae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003da8:	fb02 f303 	mul.w	r3, r2, r3
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	623b      	str	r3, [r7, #32]
      break;
 8003db2:	e002      	b.n	8003dba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003db6:	623b      	str	r3, [r7, #32]
      break;
 8003db8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dba:	6a3b      	ldr	r3, [r7, #32]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3728      	adds	r7, #40	@ 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc90      	pop	{r4, r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	08009a08 	.word	0x08009a08
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	007a1200 	.word	0x007a1200
 8003dd4:	003d0900 	.word	0x003d0900

08003dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ddc:	4b02      	ldr	r3, [pc, #8]	@ (8003de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	20000004 	.word	0x20000004

08003dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003df0:	f7ff fff2 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	@ (8003e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	08009a38 	.word	0x08009a38

08003e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e18:	f7ff ffde 	bl	8003dd8 <HAL_RCC_GetHCLKFreq>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	0adb      	lsrs	r3, r3, #11
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	4903      	ldr	r1, [pc, #12]	@ (8003e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e2a:	5ccb      	ldrb	r3, [r1, r3]
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	08009a38 	.word	0x08009a38

08003e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e44:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <RCC_Delay+0x34>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0a      	ldr	r2, [pc, #40]	@ (8003e74 <RCC_Delay+0x38>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	0a5b      	lsrs	r3, r3, #9
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e58:	bf00      	nop
  }
  while (Delay --);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	60fa      	str	r2, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f9      	bne.n	8003e58 <RCC_Delay+0x1c>
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr
 8003e70:	20000004 	.word	0x20000004
 8003e74:	10624dd3 	.word	0x10624dd3

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	2300      	movs	r3, #0
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d07d      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e94:	2300      	movs	r3, #0
 8003e96:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e98:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	4a4b      	ldr	r2, [pc, #300]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	61d3      	str	r3, [r2, #28]
 8003eb0:	4b49      	ldr	r3, [pc, #292]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b46      	ldr	r3, [pc, #280]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d118      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ecc:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed8:	f7fe fb0e 	bl	80024f8 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ede:	e008      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee0:	f7fe fb0a 	bl	80024f8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	@ 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e06d      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003efe:	4b36      	ldr	r3, [pc, #216]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d02e      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d027      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f26:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f32:	4a29      	ldr	r2, [pc, #164]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d014      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f42:	f7fe fad9 	bl	80024f8 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fe fad5 	bl	80024f8 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e036      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f60:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0ee      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4917      	ldr	r1, [pc, #92]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d105      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f84:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4a13      	ldr	r2, [pc, #76]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	490b      	ldr	r1, [pc, #44]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fba:	4b07      	ldr	r3, [pc, #28]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	4904      	ldr	r1, [pc, #16]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40007000 	.word	0x40007000
 8003fe0:	42420440 	.word	0x42420440

08003fe4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b08d      	sub	sp, #52	@ 0x34
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fec:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003fee:	f107 040c 	add.w	r4, r7, #12
 8003ff2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ff4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ff8:	f240 2301 	movw	r3, #513	@ 0x201
 8003ffc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
 8004002:	2300      	movs	r3, #0
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004006:	2300      	movs	r3, #0
 8004008:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	2300      	movs	r3, #0
 8004010:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d00a      	beq.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b10      	cmp	r3, #16
 800401c:	f200 808e 	bhi.w	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d049      	beq.n	80040ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d079      	beq.n	8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800402c:	e086      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800402e:	4b49      	ldr	r3, [pc, #292]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004034:	4b47      	ldr	r3, [pc, #284]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d07f      	beq.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	0c9b      	lsrs	r3, r3, #18
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	3330      	adds	r3, #48	@ 0x30
 800404a:	443b      	add	r3, r7
 800404c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004050:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d017      	beq.n	800408c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800405c:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	0c5b      	lsrs	r3, r3, #17
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	3330      	adds	r3, #48	@ 0x30
 8004068:	443b      	add	r3, r7
 800406a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00d      	beq.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800407a:	4a37      	ldr	r2, [pc, #220]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	fb02 f303 	mul.w	r3, r2, r3
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	4a33      	ldr	r2, [pc, #204]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004096:	4b2f      	ldr	r3, [pc, #188]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040a2:	d102      	bne.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80040a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80040a8:	e04a      	b.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80040aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 80040b8:	e042      	b.n	8004140 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80040ba:	4b26      	ldr	r3, [pc, #152]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ca:	d108      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80040d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040dc:	e01f      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e8:	d109      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80040ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80040f6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80040fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040fc:	e00f      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004108:	d11c      	bne.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800410a:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004116:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800411c:	e012      	b.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800411e:	e011      	b.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004120:	f7ff fe78 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b0b      	ldr	r3, [pc, #44]	@ (8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	0b9b      	lsrs	r3, r3, #14
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	3301      	adds	r3, #1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb2 f3f3 	udiv	r3, r2, r3
 8004138:	62bb      	str	r3, [r7, #40]	@ 0x28
      break;
 800413a:	e004      	b.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800413c:	bf00      	nop
 800413e:	e002      	b.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004140:	bf00      	nop
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004144:	bf00      	nop
    }
  }
  return (frequency);
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8004148:	4618      	mov	r0, r3
 800414a:	3734      	adds	r7, #52	@ 0x34
 800414c:	46bd      	mov	sp, r7
 800414e:	bd90      	pop	{r4, r7, pc}
 8004150:	08009a18 	.word	0x08009a18
 8004154:	40021000 	.word	0x40021000
 8004158:	007a1200 	.word	0x007a1200
 800415c:	003d0900 	.word	0x003d0900
 8004160:	aaaaaaab 	.word	0xaaaaaaab

08004164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e041      	b.n	80041fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe f844 	bl	8002218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	4610      	mov	r0, r2
 80041a4:	f000 fc20 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b01      	cmp	r3, #1
 8004216:	d001      	beq.n	800421c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e03a      	b.n	8004292 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a18      	ldr	r2, [pc, #96]	@ (800429c <HAL_TIM_Base_Start_IT+0x98>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00e      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x58>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004246:	d009      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x58>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_TIM_Base_Start_IT+0x58>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d111      	bne.n	8004280 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0307 	and.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b06      	cmp	r3, #6
 800426c:	d010      	beq.n	8004290 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427e:	e007      	b.n	8004290 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800

080042a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd ffc6 	bl	8002260 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fb7e 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <HAL_TIM_PWM_Start+0x24>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	e022      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b04      	cmp	r3, #4
 8004370:	d109      	bne.n	8004386 <HAL_TIM_PWM_Start+0x3e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b01      	cmp	r3, #1
 800437c:	bf14      	ite	ne
 800437e:	2301      	movne	r3, #1
 8004380:	2300      	moveq	r3, #0
 8004382:	b2db      	uxtb	r3, r3
 8004384:	e015      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d109      	bne.n	80043a0 <HAL_TIM_PWM_Start+0x58>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
 800439e:	e008      	b.n	80043b2 <HAL_TIM_PWM_Start+0x6a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e05e      	b.n	8004478 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_TIM_PWM_Start+0x82>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043c8:	e013      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d104      	bne.n	80043da <HAL_TIM_PWM_Start+0x92>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043d8:	e00b      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d104      	bne.n	80043ea <HAL_TIM_PWM_Start+0xa2>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043e8:	e003      	b.n	80043f2 <HAL_TIM_PWM_Start+0xaa>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2202      	movs	r2, #2
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2201      	movs	r2, #1
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd74 	bl	8004ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_TIM_PWM_Start+0x138>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d107      	bne.n	800441a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004418:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a18      	ldr	r2, [pc, #96]	@ (8004480 <HAL_TIM_PWM_Start+0x138>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442c:	d009      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a14      	ldr	r2, [pc, #80]	@ (8004484 <HAL_TIM_PWM_Start+0x13c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_TIM_PWM_Start+0xfa>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <HAL_TIM_PWM_Start+0x140>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b06      	cmp	r3, #6
 8004452:	d010      	beq.n	8004476 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	e007      	b.n	8004476 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40012c00 	.word	0x40012c00
 8004484:	40000400 	.word	0x40000400
 8004488:	40000800 	.word	0x40000800

0800448c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d122      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d11b      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0202 	mvn.w	r2, #2
 80044b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fa6f 	bl	80049b2 <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fa62 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fa71 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d122      	bne.n	800453c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d11b      	bne.n	800453c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0204 	mvn.w	r2, #4
 800450c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fa45 	bl	80049b2 <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa38 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa47 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b08      	cmp	r3, #8
 8004548:	d122      	bne.n	8004590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d11b      	bne.n	8004590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0208 	mvn.w	r2, #8
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa1b 	bl	80049b2 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa0e 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa1d 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b10      	cmp	r3, #16
 800459c:	d122      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d11b      	bne.n	80045e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0210 	mvn.w	r2, #16
 80045b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2208      	movs	r2, #8
 80045ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9f1 	bl	80049b2 <HAL_TIM_IC_CaptureCallback>
 80045d0:	e005      	b.n	80045de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9e4 	bl	80049a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9f3 	bl	80049c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10e      	bne.n	8004610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0201 	mvn.w	r2, #1
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd f8fc 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b80      	cmp	r3, #128	@ 0x80
 800461c:	d10e      	bne.n	800463c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	d107      	bne.n	800463c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fce1 	bl	8004ffe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	d10e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004654:	2b40      	cmp	r3, #64	@ 0x40
 8004656:	d107      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9b7 	bl	80049d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b20      	cmp	r3, #32
 8004674:	d10e      	bne.n	8004694 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b20      	cmp	r3, #32
 8004682:	d107      	bne.n	8004694 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0220 	mvn.w	r2, #32
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fcac 	bl	8004fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e0ac      	b.n	8004810 <HAL_TIM_PWM_ConfigChannel+0x174>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	f200 809f 	bhi.w	8004804 <HAL_TIM_PWM_ConfigChannel+0x168>
 80046c6:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004805 	.word	0x08004805
 80046d4:	08004805 	.word	0x08004805
 80046d8:	08004805 	.word	0x08004805
 80046dc:	08004741 	.word	0x08004741
 80046e0:	08004805 	.word	0x08004805
 80046e4:	08004805 	.word	0x08004805
 80046e8:	08004805 	.word	0x08004805
 80046ec:	08004783 	.word	0x08004783
 80046f0:	08004805 	.word	0x08004805
 80046f4:	08004805 	.word	0x08004805
 80046f8:	08004805 	.word	0x08004805
 80046fc:	080047c3 	.word	0x080047c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 f9d0 	bl	8004aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0208 	orr.w	r2, r2, #8
 800471a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699a      	ldr	r2, [r3, #24]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0204 	bic.w	r2, r2, #4
 800472a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6999      	ldr	r1, [r3, #24]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691a      	ldr	r2, [r3, #16]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	619a      	str	r2, [r3, #24]
      break;
 800473e:	e062      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fa16 	bl	8004b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800475a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699a      	ldr	r2, [r3, #24]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800476a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	619a      	str	r2, [r3, #24]
      break;
 8004780:	e041      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fa5f 	bl	8004c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69da      	ldr	r2, [r3, #28]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0208 	orr.w	r2, r2, #8
 800479c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0204 	bic.w	r2, r2, #4
 80047ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69d9      	ldr	r1, [r3, #28]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	61da      	str	r2, [r3, #28]
      break;
 80047c0:	e021      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 faa9 	bl	8004d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69da      	ldr	r2, [r3, #28]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69da      	ldr	r2, [r3, #28]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69d9      	ldr	r1, [r3, #28]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	021a      	lsls	r2, r3, #8
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	61da      	str	r2, [r3, #28]
      break;
 8004802:	e000      	b.n	8004806 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_TIM_ConfigClockSource+0x18>
 800482c:	2302      	movs	r3, #2
 800482e:	e0b3      	b.n	8004998 <HAL_TIM_ConfigClockSource+0x180>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800484e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004856:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004868:	d03e      	beq.n	80048e8 <HAL_TIM_ConfigClockSource+0xd0>
 800486a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800486e:	f200 8087 	bhi.w	8004980 <HAL_TIM_ConfigClockSource+0x168>
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004876:	f000 8085 	beq.w	8004984 <HAL_TIM_ConfigClockSource+0x16c>
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487e:	d87f      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 8004880:	2b70      	cmp	r3, #112	@ 0x70
 8004882:	d01a      	beq.n	80048ba <HAL_TIM_ConfigClockSource+0xa2>
 8004884:	2b70      	cmp	r3, #112	@ 0x70
 8004886:	d87b      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 8004888:	2b60      	cmp	r3, #96	@ 0x60
 800488a:	d050      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x116>
 800488c:	2b60      	cmp	r3, #96	@ 0x60
 800488e:	d877      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 8004890:	2b50      	cmp	r3, #80	@ 0x50
 8004892:	d03c      	beq.n	800490e <HAL_TIM_ConfigClockSource+0xf6>
 8004894:	2b50      	cmp	r3, #80	@ 0x50
 8004896:	d873      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d058      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x136>
 800489c:	2b40      	cmp	r3, #64	@ 0x40
 800489e:	d86f      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 80048a0:	2b30      	cmp	r3, #48	@ 0x30
 80048a2:	d064      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x156>
 80048a4:	2b30      	cmp	r3, #48	@ 0x30
 80048a6:	d86b      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d060      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x156>
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d867      	bhi.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d05c      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x156>
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d05a      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80048b8:	e062      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	6899      	ldr	r1, [r3, #8]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f000 faee 	bl	8004eaa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80048dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	609a      	str	r2, [r3, #8]
      break;
 80048e6:	e04e      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	6899      	ldr	r1, [r3, #8]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f000 fad7 	bl	8004eaa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800490a:	609a      	str	r2, [r3, #8]
      break;
 800490c:	e03b      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	461a      	mov	r2, r3
 800491c:	f000 fa4e 	bl	8004dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2150      	movs	r1, #80	@ 0x50
 8004926:	4618      	mov	r0, r3
 8004928:	f000 faa5 	bl	8004e76 <TIM_ITRx_SetConfig>
      break;
 800492c:	e02b      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	461a      	mov	r2, r3
 800493c:	f000 fa6c 	bl	8004e18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2160      	movs	r1, #96	@ 0x60
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fa95 	bl	8004e76 <TIM_ITRx_SetConfig>
      break;
 800494c:	e01b      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	461a      	mov	r2, r3
 800495c:	f000 fa2e 	bl	8004dbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2140      	movs	r1, #64	@ 0x40
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fa85 	bl	8004e76 <TIM_ITRx_SetConfig>
      break;
 800496c:	e00b      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f000 fa7c 	bl	8004e76 <TIM_ITRx_SetConfig>
        break;
 800497e:	e002      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004980:	bf00      	nop
 8004982:	e000      	b.n	8004986 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004984:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bc80      	pop	{r7}
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a29      	ldr	r2, [pc, #164]	@ (8004aa0 <TIM_Base_SetConfig+0xb8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d00b      	beq.n	8004a18 <TIM_Base_SetConfig+0x30>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a06:	d007      	beq.n	8004a18 <TIM_Base_SetConfig+0x30>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a26      	ldr	r2, [pc, #152]	@ (8004aa4 <TIM_Base_SetConfig+0xbc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_Base_SetConfig+0x30>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a25      	ldr	r2, [pc, #148]	@ (8004aa8 <TIM_Base_SetConfig+0xc0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d108      	bne.n	8004a2a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <TIM_Base_SetConfig+0xb8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00b      	beq.n	8004a4a <TIM_Base_SetConfig+0x62>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a38:	d007      	beq.n	8004a4a <TIM_Base_SetConfig+0x62>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a19      	ldr	r2, [pc, #100]	@ (8004aa4 <TIM_Base_SetConfig+0xbc>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d003      	beq.n	8004a4a <TIM_Base_SetConfig+0x62>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a18      	ldr	r2, [pc, #96]	@ (8004aa8 <TIM_Base_SetConfig+0xc0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d108      	bne.n	8004a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a07      	ldr	r2, [pc, #28]	@ (8004aa0 <TIM_Base_SetConfig+0xb8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d103      	bne.n	8004a90 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	615a      	str	r2, [r3, #20]
}
 8004a96:	bf00      	nop
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800

08004aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	f023 0201 	bic.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0303 	bic.w	r3, r3, #3
 8004ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 0302 	bic.w	r3, r3, #2
 8004af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a1c      	ldr	r2, [pc, #112]	@ (8004b74 <TIM_OC1_SetConfig+0xc8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10c      	bne.n	8004b22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0308 	bic.w	r3, r3, #8
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f023 0304 	bic.w	r3, r3, #4
 8004b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a13      	ldr	r2, [pc, #76]	@ (8004b74 <TIM_OC1_SetConfig+0xc8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d111      	bne.n	8004b4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	621a      	str	r2, [r3, #32]
}
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40012c00 	.word	0x40012c00

08004b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f023 0210 	bic.w	r2, r3, #16
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f023 0320 	bic.w	r3, r3, #32
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c48 <TIM_OC2_SetConfig+0xd0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d10d      	bne.n	8004bf4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	@ (8004c48 <TIM_OC2_SetConfig+0xd0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d113      	bne.n	8004c24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	40012c00 	.word	0x40012c00

08004c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <TIM_OC3_SetConfig+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d10d      	bne.n	8004cc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a14      	ldr	r2, [pc, #80]	@ (8004d1c <TIM_OC3_SetConfig+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d113      	bne.n	8004cf6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00

08004d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	021b      	lsls	r3, r3, #8
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8004db8 <TIM_OC4_SetConfig+0x98>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d109      	bne.n	8004d94 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	019b      	lsls	r3, r3, #6
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	40012c00 	.word	0x40012c00

08004dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 030a 	bic.w	r3, r3, #10
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0210 	bic.w	r2, r3, #16
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	031b      	lsls	r3, r3, #12
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004e54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b085      	sub	sp, #20
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f043 0307 	orr.w	r3, r3, #7
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	609a      	str	r2, [r3, #8]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bc80      	pop	{r7}
 8004ea8:	4770      	bx	lr

08004eaa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	60b9      	str	r1, [r7, #8]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	021a      	lsls	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	609a      	str	r2, [r3, #8]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2201      	movs	r2, #1
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a1a      	ldr	r2, [r3, #32]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6a1a      	ldr	r2, [r3, #32]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	6879      	ldr	r1, [r7, #4]
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
}
 8004f26:	bf00      	nop
 8004f28:	371c      	adds	r7, #28
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e046      	b.n	8004fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a16      	ldr	r2, [pc, #88]	@ (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f94:	d009      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a12      	ldr	r2, [pc, #72]	@ (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a10      	ldr	r2, [pc, #64]	@ (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	68ba      	ldr	r2, [r7, #8]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800

08004fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bc80      	pop	{r7}
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e03f      	b.n	80050a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fd f98c 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	@ 0x24
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fc85 	bl	8005964 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3708      	adds	r7, #8
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b08a      	sub	sp, #40	@ 0x28
 80050ae:	af02      	add	r7, sp, #8
 80050b0:	60f8      	str	r0, [r7, #12]
 80050b2:	60b9      	str	r1, [r7, #8]
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b20      	cmp	r3, #32
 80050c8:	d17c      	bne.n	80051c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_UART_Transmit+0x2c>
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d101      	bne.n	80050da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e075      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_UART_Transmit+0x3e>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e06e      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2221      	movs	r2, #33	@ 0x21
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050fe:	f7fd f9fb 	bl	80024f8 <HAL_GetTick>
 8005102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005118:	d108      	bne.n	800512c <HAL_UART_Transmit+0x82>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e003      	b.n	8005134 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800513c:	e02a      	b.n	8005194 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2180      	movs	r1, #128	@ 0x80
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 fa38 	bl	80055be <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e036      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800516c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	3302      	adds	r3, #2
 8005172:	61bb      	str	r3, [r7, #24]
 8005174:	e007      	b.n	8005186 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1cf      	bne.n	800513e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2140      	movs	r1, #64	@ 0x40
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fa08 	bl	80055be <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e006      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e000      	b.n	80051c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051c4:	2302      	movs	r3, #2
  }
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	4613      	mov	r3, r2
 80051da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d11d      	bne.n	8005224 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_UART_Receive_IT+0x26>
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e016      	b.n	8005226 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_UART_Receive_IT+0x38>
 8005202:	2302      	movs	r3, #2
 8005204:	e00f      	b.n	8005226 <HAL_UART_Receive_IT+0x58>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	461a      	mov	r2, r3
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fa19 	bl	8005652 <UART_Start_Receive_IT>
 8005220:	4603      	mov	r3, r0
 8005222:	e000      	b.n	8005226 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	@ 0x28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10d      	bne.n	8005282 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x52>
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fac9 	bl	8005812 <UART_Receive_IT>
      return;
 8005280:	e17b      	b.n	800557a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 80b1 	beq.w	80053ec <HAL_UART_IRQHandler+0x1bc>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_UART_IRQHandler+0x70>
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 80a6 	beq.w	80053ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00a      	beq.n	80052c0 <HAL_UART_IRQHandler+0x90>
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f043 0201 	orr.w	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <HAL_UART_IRQHandler+0xb0>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	f043 0202 	orr.w	r2, r3, #2
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_UART_IRQHandler+0xd0>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00f      	beq.n	800532a <HAL_UART_IRQHandler+0xfa>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	f003 0320 	and.w	r3, r3, #32
 8005310:	2b00      	cmp	r3, #0
 8005312:	d104      	bne.n	800531e <HAL_UART_IRQHandler+0xee>
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	f043 0208 	orr.w	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 811e 	beq.w	8005570 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	f003 0320 	and.w	r3, r3, #32
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_UART_IRQHandler+0x11e>
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fa62 	bl	8005812 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005358:	2b00      	cmp	r3, #0
 800535a:	bf14      	ite	ne
 800535c:	2301      	movne	r3, #1
 800535e:	2300      	moveq	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <HAL_UART_IRQHandler+0x146>
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d031      	beq.n	80053da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f9a4 	bl	80056c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005386:	2b00      	cmp	r3, #0
 8005388:	d023      	beq.n	80053d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005398:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d013      	beq.n	80053ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	4a76      	ldr	r2, [pc, #472]	@ (8005580 <HAL_UART_IRQHandler+0x350>)
 80053a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fd ff1c 	bl	80031ec <HAL_DMA_Abort_IT>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d016      	beq.n	80053e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053c4:	4610      	mov	r0, r2
 80053c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c8:	e00e      	b.n	80053e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8e3 	bl	8005596 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d0:	e00a      	b.n	80053e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8df 	bl	8005596 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	e006      	b.n	80053e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8db 	bl	8005596 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80053e6:	e0c3      	b.n	8005570 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	bf00      	nop
    return;
 80053ea:	e0c1      	b.n	8005570 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f040 80a1 	bne.w	8005538 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 809b 	beq.w	8005538 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8095 	beq.w	8005538 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04e      	beq.n	80054d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800543c:	8a3b      	ldrh	r3, [r7, #16]
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 8098 	beq.w	8005574 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005448:	8a3a      	ldrh	r2, [r7, #16]
 800544a:	429a      	cmp	r2, r3
 800544c:	f080 8092 	bcs.w	8005574 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8a3a      	ldrh	r2, [r7, #16]
 8005454:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b20      	cmp	r3, #32
 800545e:	d02b      	beq.n	80054b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800546e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695a      	ldr	r2, [r3, #20]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0201 	bic.w	r2, r2, #1
 800547e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800548e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0210 	bic.w	r2, r2, #16
 80054ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fd fe5f 	bl	8003176 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f86d 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054ce:	e051      	b.n	8005574 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d047      	beq.n	8005578 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80054e8:	8a7b      	ldrh	r3, [r7, #18]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d044      	beq.n	8005578 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80054fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695a      	ldr	r2, [r3, #20]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	631a      	str	r2, [r3, #48]	@ 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0210 	bic.w	r2, r2, #16
 800552a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800552c:	8a7b      	ldrh	r3, [r7, #18]
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f839 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005536:	e01f      	b.n	8005578 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d008      	beq.n	8005554 <HAL_UART_IRQHandler+0x324>
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f8f9 	bl	8005744 <UART_Transmit_IT>
    return;
 8005552:	e012      	b.n	800557a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <HAL_UART_IRQHandler+0x34a>
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f93a 	bl	80057e2 <UART_EndTransmit_IT>
    return;
 800556e:	e004      	b.n	800557a <HAL_UART_IRQHandler+0x34a>
    return;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <HAL_UART_IRQHandler+0x34a>
      return;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <HAL_UART_IRQHandler+0x34a>
      return;
 8005578:	bf00      	nop
  }
}
 800557a:	3728      	adds	r7, #40	@ 0x28
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	0800571d 	.word	0x0800571d

08005584 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr

08005596 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bc80      	pop	{r7}
 80055bc:	4770      	bx	lr

080055be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ce:	e02c      	b.n	800562a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d6:	d028      	beq.n	800562a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <UART_WaitOnFlagUntilTimeout+0x30>
 80055de:	f7fc ff8b 	bl	80024f8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d21d      	bcs.n	800562a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80055fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e00f      	b.n	800564a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	429a      	cmp	r2, r3
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	461a      	mov	r2, r3
 8005642:	79fb      	ldrb	r3, [r7, #7]
 8005644:	429a      	cmp	r2, r3
 8005646:	d0c3      	beq.n	80055d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	4613      	mov	r3, r2
 800565e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	88fa      	ldrh	r2, [r7, #6]
 800566a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	88fa      	ldrh	r2, [r7, #6]
 8005670:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2222      	movs	r2, #34	@ 0x22
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68da      	ldr	r2, [r3, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005696:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0220 	orr.w	r2, r2, #32
 80056b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr

080056c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80056da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d107      	bne.n	8005704 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0210 	bic.w	r2, r2, #16
 8005702:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	bc80      	pop	{r7}
 800571a:	4770      	bx	lr

0800571c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005728:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff ff2d 	bl	8005596 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800573c:	bf00      	nop
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b21      	cmp	r3, #33	@ 0x21
 8005756:	d13e      	bne.n	80057d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005760:	d114      	bne.n	800578c <UART_Transmit_IT+0x48>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d110      	bne.n	800578c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800577e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	1c9a      	adds	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	621a      	str	r2, [r3, #32]
 800578a:	e008      	b.n	800579e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6211      	str	r1, [r2, #32]
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	4619      	mov	r1, r3
 80057ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68da      	ldr	r2, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff febe 	bl	8005584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b086      	sub	sp, #24
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b22      	cmp	r3, #34	@ 0x22
 8005824:	f040 8099 	bne.w	800595a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005830:	d117      	bne.n	8005862 <UART_Receive_IT+0x50>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d113      	bne.n	8005862 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	b29b      	uxth	r3, r3
 800584c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005850:	b29a      	uxth	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	1c9a      	adds	r2, r3, #2
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005860:	e026      	b.n	80058b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005874:	d007      	beq.n	8005886 <UART_Receive_IT+0x74>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <UART_Receive_IT+0x82>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	e008      	b.n	80058a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	4619      	mov	r1, r3
 80058be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d148      	bne.n	8005956 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0220 	bic.w	r2, r2, #32
 80058d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695a      	ldr	r2, [r3, #20]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0201 	bic.w	r2, r2, #1
 80058f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005900:	2b01      	cmp	r3, #1
 8005902:	d123      	bne.n	800594c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0210 	bic.w	r2, r2, #16
 8005918:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0310 	and.w	r3, r3, #16
 8005924:	2b10      	cmp	r3, #16
 8005926:	d10a      	bne.n	800593e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fe2f 	bl	80055a8 <HAL_UARTEx_RxEventCallback>
 800594a:	e002      	b.n	8005952 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7fb ff6f 	bl	8001830 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	e002      	b.n	800595c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800599e:	f023 030c 	bic.w	r3, r3, #12
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	430b      	orrs	r3, r1
 80059aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005a78 <UART_SetConfig+0x114>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d103      	bne.n	80059d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059cc:	f7fe fa22 	bl	8003e14 <HAL_RCC_GetPCLK2Freq>
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	e002      	b.n	80059da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059d4:	f7fe fa0a 	bl	8003dec <HAL_RCC_GetPCLK1Freq>
 80059d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <UART_SetConfig+0x118>)
 80059f2:	fba2 2303 	umull	r2, r3, r2, r3
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	0119      	lsls	r1, r3, #4
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4613      	mov	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	009a      	lsls	r2, r3, #2
 8005a04:	441a      	add	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a10:	4b1a      	ldr	r3, [pc, #104]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a12:	fba3 0302 	umull	r0, r3, r3, r2
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2064      	movs	r0, #100	@ 0x64
 8005a1a:	fb00 f303 	mul.w	r3, r0, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	3332      	adds	r3, #50	@ 0x32
 8005a24:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a30:	4419      	add	r1, r3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a4a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	2064      	movs	r0, #100	@ 0x64
 8005a52:	fb00 f303 	mul.w	r3, r0, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	3332      	adds	r3, #50	@ 0x32
 8005a5c:	4a07      	ldr	r2, [pc, #28]	@ (8005a7c <UART_SetConfig+0x118>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40013800 	.word	0x40013800
 8005a7c:	51eb851f 	.word	0x51eb851f

08005a80 <atof>:
 8005a80:	2100      	movs	r1, #0
 8005a82:	f000 beb1 	b.w	80067e8 <strtod>
	...

08005a88 <malloc>:
 8005a88:	4b02      	ldr	r3, [pc, #8]	@ (8005a94 <malloc+0xc>)
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	f000 b825 	b.w	8005adc <_malloc_r>
 8005a92:	bf00      	nop
 8005a94:	20000188 	.word	0x20000188

08005a98 <sbrk_aligned>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ad8 <sbrk_aligned+0x40>)
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	6831      	ldr	r1, [r6, #0]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	b911      	cbnz	r1, 8005aaa <sbrk_aligned+0x12>
 8005aa4:	f001 fd62 	bl	800756c <_sbrk_r>
 8005aa8:	6030      	str	r0, [r6, #0]
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f001 fd5d 	bl	800756c <_sbrk_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d103      	bne.n	8005abe <sbrk_aligned+0x26>
 8005ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8005aba:	4620      	mov	r0, r4
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	1cc4      	adds	r4, r0, #3
 8005ac0:	f024 0403 	bic.w	r4, r4, #3
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d0f8      	beq.n	8005aba <sbrk_aligned+0x22>
 8005ac8:	1a21      	subs	r1, r4, r0
 8005aca:	4628      	mov	r0, r5
 8005acc:	f001 fd4e 	bl	800756c <_sbrk_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1f2      	bne.n	8005aba <sbrk_aligned+0x22>
 8005ad4:	e7ef      	b.n	8005ab6 <sbrk_aligned+0x1e>
 8005ad6:	bf00      	nop
 8005ad8:	20000354 	.word	0x20000354

08005adc <_malloc_r>:
 8005adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae0:	1ccd      	adds	r5, r1, #3
 8005ae2:	f025 0503 	bic.w	r5, r5, #3
 8005ae6:	3508      	adds	r5, #8
 8005ae8:	2d0c      	cmp	r5, #12
 8005aea:	bf38      	it	cc
 8005aec:	250c      	movcc	r5, #12
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	4606      	mov	r6, r0
 8005af2:	db01      	blt.n	8005af8 <_malloc_r+0x1c>
 8005af4:	42a9      	cmp	r1, r5
 8005af6:	d904      	bls.n	8005b02 <_malloc_r+0x26>
 8005af8:	230c      	movs	r3, #12
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	2000      	movs	r0, #0
 8005afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bd8 <_malloc_r+0xfc>
 8005b06:	f000 f869 	bl	8005bdc <__malloc_lock>
 8005b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0e:	461c      	mov	r4, r3
 8005b10:	bb44      	cbnz	r4, 8005b64 <_malloc_r+0x88>
 8005b12:	4629      	mov	r1, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff ffbf 	bl	8005a98 <sbrk_aligned>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	d158      	bne.n	8005bd2 <_malloc_r+0xf6>
 8005b20:	f8d8 4000 	ldr.w	r4, [r8]
 8005b24:	4627      	mov	r7, r4
 8005b26:	2f00      	cmp	r7, #0
 8005b28:	d143      	bne.n	8005bb2 <_malloc_r+0xd6>
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d04b      	beq.n	8005bc6 <_malloc_r+0xea>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	eb04 0903 	add.w	r9, r4, r3
 8005b38:	f001 fd18 	bl	800756c <_sbrk_r>
 8005b3c:	4581      	cmp	r9, r0
 8005b3e:	d142      	bne.n	8005bc6 <_malloc_r+0xea>
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	4630      	mov	r0, r6
 8005b44:	1a6d      	subs	r5, r5, r1
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7ff ffa6 	bl	8005a98 <sbrk_aligned>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d03a      	beq.n	8005bc6 <_malloc_r+0xea>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	442b      	add	r3, r5
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	f8d8 3000 	ldr.w	r3, [r8]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	bb62      	cbnz	r2, 8005bb8 <_malloc_r+0xdc>
 8005b5e:	f8c8 7000 	str.w	r7, [r8]
 8005b62:	e00f      	b.n	8005b84 <_malloc_r+0xa8>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	1b52      	subs	r2, r2, r5
 8005b68:	d420      	bmi.n	8005bac <_malloc_r+0xd0>
 8005b6a:	2a0b      	cmp	r2, #11
 8005b6c:	d917      	bls.n	8005b9e <_malloc_r+0xc2>
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	6059      	strne	r1, [r3, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	bf08      	it	eq
 8005b7c:	f8c8 1000 	streq.w	r1, [r8]
 8005b80:	5162      	str	r2, [r4, r5]
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 f82f 	bl	8005be8 <__malloc_unlock>
 8005b8a:	f104 000b 	add.w	r0, r4, #11
 8005b8e:	1d23      	adds	r3, r4, #4
 8005b90:	f020 0007 	bic.w	r0, r0, #7
 8005b94:	1ac2      	subs	r2, r0, r3
 8005b96:	bf1c      	itt	ne
 8005b98:	1a1b      	subne	r3, r3, r0
 8005b9a:	50a3      	strne	r3, [r4, r2]
 8005b9c:	e7af      	b.n	8005afe <_malloc_r+0x22>
 8005b9e:	6862      	ldr	r2, [r4, #4]
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	bf0c      	ite	eq
 8005ba4:	f8c8 2000 	streq.w	r2, [r8]
 8005ba8:	605a      	strne	r2, [r3, #4]
 8005baa:	e7eb      	b.n	8005b84 <_malloc_r+0xa8>
 8005bac:	4623      	mov	r3, r4
 8005bae:	6864      	ldr	r4, [r4, #4]
 8005bb0:	e7ae      	b.n	8005b10 <_malloc_r+0x34>
 8005bb2:	463c      	mov	r4, r7
 8005bb4:	687f      	ldr	r7, [r7, #4]
 8005bb6:	e7b6      	b.n	8005b26 <_malloc_r+0x4a>
 8005bb8:	461a      	mov	r2, r3
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d1fb      	bne.n	8005bb8 <_malloc_r+0xdc>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6053      	str	r3, [r2, #4]
 8005bc4:	e7de      	b.n	8005b84 <_malloc_r+0xa8>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	4630      	mov	r0, r6
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	f000 f80c 	bl	8005be8 <__malloc_unlock>
 8005bd0:	e794      	b.n	8005afc <_malloc_r+0x20>
 8005bd2:	6005      	str	r5, [r0, #0]
 8005bd4:	e7d6      	b.n	8005b84 <_malloc_r+0xa8>
 8005bd6:	bf00      	nop
 8005bd8:	20000358 	.word	0x20000358

08005bdc <__malloc_lock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	@ (8005be4 <__malloc_lock+0x8>)
 8005bde:	f001 bd12 	b.w	8007606 <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	2000049c 	.word	0x2000049c

08005be8 <__malloc_unlock>:
 8005be8:	4801      	ldr	r0, [pc, #4]	@ (8005bf0 <__malloc_unlock+0x8>)
 8005bea:	f001 bd0d 	b.w	8007608 <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	2000049c 	.word	0x2000049c

08005bf4 <sulp>:
 8005bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bf8:	460f      	mov	r7, r1
 8005bfa:	4690      	mov	r8, r2
 8005bfc:	f003 fa84 	bl	8009108 <__ulp>
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	f1b8 0f00 	cmp.w	r8, #0
 8005c08:	d011      	beq.n	8005c2e <sulp+0x3a>
 8005c0a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005c0e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dd0b      	ble.n	8005c2e <sulp+0x3a>
 8005c16:	2400      	movs	r4, #0
 8005c18:	051b      	lsls	r3, r3, #20
 8005c1a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005c1e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005c22:	4622      	mov	r2, r4
 8005c24:	462b      	mov	r3, r5
 8005c26:	f7fa fd15 	bl	8000654 <__aeabi_dmul>
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	4620      	mov	r0, r4
 8005c30:	4629      	mov	r1, r5
 8005c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005c38 <_strtod_l>:
 8005c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	b09f      	sub	sp, #124	@ 0x7c
 8005c3e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005c40:	2200      	movs	r2, #0
 8005c42:	460c      	mov	r4, r1
 8005c44:	921a      	str	r2, [sp, #104]	@ 0x68
 8005c46:	f04f 0a00 	mov.w	sl, #0
 8005c4a:	f04f 0b00 	mov.w	fp, #0
 8005c4e:	460a      	mov	r2, r1
 8005c50:	9005      	str	r0, [sp, #20]
 8005c52:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c54:	7811      	ldrb	r1, [r2, #0]
 8005c56:	292b      	cmp	r1, #43	@ 0x2b
 8005c58:	d048      	beq.n	8005cec <_strtod_l+0xb4>
 8005c5a:	d836      	bhi.n	8005cca <_strtod_l+0x92>
 8005c5c:	290d      	cmp	r1, #13
 8005c5e:	d830      	bhi.n	8005cc2 <_strtod_l+0x8a>
 8005c60:	2908      	cmp	r1, #8
 8005c62:	d830      	bhi.n	8005cc6 <_strtod_l+0x8e>
 8005c64:	2900      	cmp	r1, #0
 8005c66:	d039      	beq.n	8005cdc <_strtod_l+0xa4>
 8005c68:	2200      	movs	r2, #0
 8005c6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005c6e:	782a      	ldrb	r2, [r5, #0]
 8005c70:	2a30      	cmp	r2, #48	@ 0x30
 8005c72:	f040 80b0 	bne.w	8005dd6 <_strtod_l+0x19e>
 8005c76:	786a      	ldrb	r2, [r5, #1]
 8005c78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c7c:	2a58      	cmp	r2, #88	@ 0x58
 8005c7e:	d16c      	bne.n	8005d5a <_strtod_l+0x122>
 8005c80:	9302      	str	r3, [sp, #8]
 8005c82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c84:	4a8f      	ldr	r2, [pc, #572]	@ (8005ec4 <_strtod_l+0x28c>)
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	ab1a      	add	r3, sp, #104	@ 0x68
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	9805      	ldr	r0, [sp, #20]
 8005c8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005c90:	a919      	add	r1, sp, #100	@ 0x64
 8005c92:	f002 fbe9 	bl	8008468 <__gethex>
 8005c96:	f010 060f 	ands.w	r6, r0, #15
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	d005      	beq.n	8005caa <_strtod_l+0x72>
 8005c9e:	2e06      	cmp	r6, #6
 8005ca0:	d126      	bne.n	8005cf0 <_strtod_l+0xb8>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	3501      	adds	r5, #1
 8005ca6:	9519      	str	r5, [sp, #100]	@ 0x64
 8005ca8:	930e      	str	r3, [sp, #56]	@ 0x38
 8005caa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f040 8582 	bne.w	80067b6 <_strtod_l+0xb7e>
 8005cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cb4:	b1bb      	cbz	r3, 8005ce6 <_strtod_l+0xae>
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005cbc:	b01f      	add	sp, #124	@ 0x7c
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	2920      	cmp	r1, #32
 8005cc4:	d1d0      	bne.n	8005c68 <_strtod_l+0x30>
 8005cc6:	3201      	adds	r2, #1
 8005cc8:	e7c3      	b.n	8005c52 <_strtod_l+0x1a>
 8005cca:	292d      	cmp	r1, #45	@ 0x2d
 8005ccc:	d1cc      	bne.n	8005c68 <_strtod_l+0x30>
 8005cce:	2101      	movs	r1, #1
 8005cd0:	910e      	str	r1, [sp, #56]	@ 0x38
 8005cd2:	1c51      	adds	r1, r2, #1
 8005cd4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005cd6:	7852      	ldrb	r2, [r2, #1]
 8005cd8:	2a00      	cmp	r2, #0
 8005cda:	d1c7      	bne.n	8005c6c <_strtod_l+0x34>
 8005cdc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005cde:	9419      	str	r4, [sp, #100]	@ 0x64
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f040 8566 	bne.w	80067b2 <_strtod_l+0xb7a>
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	4659      	mov	r1, fp
 8005cea:	e7e7      	b.n	8005cbc <_strtod_l+0x84>
 8005cec:	2100      	movs	r1, #0
 8005cee:	e7ef      	b.n	8005cd0 <_strtod_l+0x98>
 8005cf0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005cf2:	b13a      	cbz	r2, 8005d04 <_strtod_l+0xcc>
 8005cf4:	2135      	movs	r1, #53	@ 0x35
 8005cf6:	a81c      	add	r0, sp, #112	@ 0x70
 8005cf8:	f003 faf6 	bl	80092e8 <__copybits>
 8005cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005cfe:	9805      	ldr	r0, [sp, #20]
 8005d00:	f002 fed6 	bl	8008ab0 <_Bfree>
 8005d04:	3e01      	subs	r6, #1
 8005d06:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005d08:	2e04      	cmp	r6, #4
 8005d0a:	d806      	bhi.n	8005d1a <_strtod_l+0xe2>
 8005d0c:	e8df f006 	tbb	[pc, r6]
 8005d10:	201d0314 	.word	0x201d0314
 8005d14:	14          	.byte	0x14
 8005d15:	00          	.byte	0x00
 8005d16:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005d1a:	05e1      	lsls	r1, r4, #23
 8005d1c:	bf48      	it	mi
 8005d1e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005d22:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005d26:	0d1b      	lsrs	r3, r3, #20
 8005d28:	051b      	lsls	r3, r3, #20
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1bd      	bne.n	8005caa <_strtod_l+0x72>
 8005d2e:	f001 fc3f 	bl	80075b0 <__errno>
 8005d32:	2322      	movs	r3, #34	@ 0x22
 8005d34:	6003      	str	r3, [r0, #0]
 8005d36:	e7b8      	b.n	8005caa <_strtod_l+0x72>
 8005d38:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005d3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005d40:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d44:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005d48:	e7e7      	b.n	8005d1a <_strtod_l+0xe2>
 8005d4a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005ec8 <_strtod_l+0x290>
 8005d4e:	e7e4      	b.n	8005d1a <_strtod_l+0xe2>
 8005d50:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005d54:	f04f 3aff 	mov.w	sl, #4294967295
 8005d58:	e7df      	b.n	8005d1a <_strtod_l+0xe2>
 8005d5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	2b30      	cmp	r3, #48	@ 0x30
 8005d64:	d0f9      	beq.n	8005d5a <_strtod_l+0x122>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d09f      	beq.n	8005caa <_strtod_l+0x72>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	2700      	movs	r7, #0
 8005d6e:	220a      	movs	r2, #10
 8005d70:	46b9      	mov	r9, r7
 8005d72:	9308      	str	r3, [sp, #32]
 8005d74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d76:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005d78:	930c      	str	r3, [sp, #48]	@ 0x30
 8005d7a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005d7c:	7805      	ldrb	r5, [r0, #0]
 8005d7e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005d82:	b2d9      	uxtb	r1, r3
 8005d84:	2909      	cmp	r1, #9
 8005d86:	d928      	bls.n	8005dda <_strtod_l+0x1a2>
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4950      	ldr	r1, [pc, #320]	@ (8005ecc <_strtod_l+0x294>)
 8005d8c:	f001 fba4 	bl	80074d8 <strncmp>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d032      	beq.n	8005dfa <_strtod_l+0x1c2>
 8005d94:	2000      	movs	r0, #0
 8005d96:	462a      	mov	r2, r5
 8005d98:	4603      	mov	r3, r0
 8005d9a:	464d      	mov	r5, r9
 8005d9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d9e:	2a65      	cmp	r2, #101	@ 0x65
 8005da0:	d001      	beq.n	8005da6 <_strtod_l+0x16e>
 8005da2:	2a45      	cmp	r2, #69	@ 0x45
 8005da4:	d114      	bne.n	8005dd0 <_strtod_l+0x198>
 8005da6:	b91d      	cbnz	r5, 8005db0 <_strtod_l+0x178>
 8005da8:	9a08      	ldr	r2, [sp, #32]
 8005daa:	4302      	orrs	r2, r0
 8005dac:	d096      	beq.n	8005cdc <_strtod_l+0xa4>
 8005dae:	2500      	movs	r5, #0
 8005db0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005db2:	1c62      	adds	r2, r4, #1
 8005db4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005db6:	7862      	ldrb	r2, [r4, #1]
 8005db8:	2a2b      	cmp	r2, #43	@ 0x2b
 8005dba:	d07a      	beq.n	8005eb2 <_strtod_l+0x27a>
 8005dbc:	2a2d      	cmp	r2, #45	@ 0x2d
 8005dbe:	d07e      	beq.n	8005ebe <_strtod_l+0x286>
 8005dc0:	f04f 0c00 	mov.w	ip, #0
 8005dc4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005dc8:	2909      	cmp	r1, #9
 8005dca:	f240 8085 	bls.w	8005ed8 <_strtod_l+0x2a0>
 8005dce:	9419      	str	r4, [sp, #100]	@ 0x64
 8005dd0:	f04f 0800 	mov.w	r8, #0
 8005dd4:	e0a5      	b.n	8005f22 <_strtod_l+0x2ea>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e7c8      	b.n	8005d6c <_strtod_l+0x134>
 8005dda:	f1b9 0f08 	cmp.w	r9, #8
 8005dde:	bfd8      	it	le
 8005de0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005de2:	f100 0001 	add.w	r0, r0, #1
 8005de6:	bfd6      	itet	le
 8005de8:	fb02 3301 	mlale	r3, r2, r1, r3
 8005dec:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005df0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005df2:	f109 0901 	add.w	r9, r9, #1
 8005df6:	9019      	str	r0, [sp, #100]	@ 0x64
 8005df8:	e7bf      	b.n	8005d7a <_strtod_l+0x142>
 8005dfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e00:	785a      	ldrb	r2, [r3, #1]
 8005e02:	f1b9 0f00 	cmp.w	r9, #0
 8005e06:	d03b      	beq.n	8005e80 <_strtod_l+0x248>
 8005e08:	464d      	mov	r5, r9
 8005e0a:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e0c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005e10:	2b09      	cmp	r3, #9
 8005e12:	d912      	bls.n	8005e3a <_strtod_l+0x202>
 8005e14:	2301      	movs	r3, #1
 8005e16:	e7c2      	b.n	8005d9e <_strtod_l+0x166>
 8005e18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e20:	785a      	ldrb	r2, [r3, #1]
 8005e22:	2a30      	cmp	r2, #48	@ 0x30
 8005e24:	d0f8      	beq.n	8005e18 <_strtod_l+0x1e0>
 8005e26:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	f200 84c8 	bhi.w	80067c0 <_strtod_l+0xb88>
 8005e30:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e32:	2000      	movs	r0, #0
 8005e34:	4605      	mov	r5, r0
 8005e36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e38:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e3a:	3a30      	subs	r2, #48	@ 0x30
 8005e3c:	f100 0301 	add.w	r3, r0, #1
 8005e40:	d018      	beq.n	8005e74 <_strtod_l+0x23c>
 8005e42:	462e      	mov	r6, r5
 8005e44:	f04f 0e0a 	mov.w	lr, #10
 8005e48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e4a:	4419      	add	r1, r3
 8005e4c:	910a      	str	r1, [sp, #40]	@ 0x28
 8005e4e:	1c71      	adds	r1, r6, #1
 8005e50:	eba1 0c05 	sub.w	ip, r1, r5
 8005e54:	4563      	cmp	r3, ip
 8005e56:	dc15      	bgt.n	8005e84 <_strtod_l+0x24c>
 8005e58:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005e5c:	182b      	adds	r3, r5, r0
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	f105 0501 	add.w	r5, r5, #1
 8005e64:	4405      	add	r5, r0
 8005e66:	dc1a      	bgt.n	8005e9e <_strtod_l+0x266>
 8005e68:	230a      	movs	r3, #10
 8005e6a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e6c:	fb03 2301 	mla	r3, r3, r1, r2
 8005e70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e72:	2300      	movs	r3, #0
 8005e74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005e76:	4618      	mov	r0, r3
 8005e78:	1c51      	adds	r1, r2, #1
 8005e7a:	9119      	str	r1, [sp, #100]	@ 0x64
 8005e7c:	7852      	ldrb	r2, [r2, #1]
 8005e7e:	e7c5      	b.n	8005e0c <_strtod_l+0x1d4>
 8005e80:	4648      	mov	r0, r9
 8005e82:	e7ce      	b.n	8005e22 <_strtod_l+0x1ea>
 8005e84:	2e08      	cmp	r6, #8
 8005e86:	dc05      	bgt.n	8005e94 <_strtod_l+0x25c>
 8005e88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005e8a:	fb0e f606 	mul.w	r6, lr, r6
 8005e8e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005e90:	460e      	mov	r6, r1
 8005e92:	e7dc      	b.n	8005e4e <_strtod_l+0x216>
 8005e94:	2910      	cmp	r1, #16
 8005e96:	bfd8      	it	le
 8005e98:	fb0e f707 	mulle.w	r7, lr, r7
 8005e9c:	e7f8      	b.n	8005e90 <_strtod_l+0x258>
 8005e9e:	2b0f      	cmp	r3, #15
 8005ea0:	bfdc      	itt	le
 8005ea2:	230a      	movle	r3, #10
 8005ea4:	fb03 2707 	mlale	r7, r3, r7, r2
 8005ea8:	e7e3      	b.n	8005e72 <_strtod_l+0x23a>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e77a      	b.n	8005da8 <_strtod_l+0x170>
 8005eb2:	f04f 0c00 	mov.w	ip, #0
 8005eb6:	1ca2      	adds	r2, r4, #2
 8005eb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005eba:	78a2      	ldrb	r2, [r4, #2]
 8005ebc:	e782      	b.n	8005dc4 <_strtod_l+0x18c>
 8005ebe:	f04f 0c01 	mov.w	ip, #1
 8005ec2:	e7f8      	b.n	8005eb6 <_strtod_l+0x27e>
 8005ec4:	08009c28 	.word	0x08009c28
 8005ec8:	7ff00000 	.word	0x7ff00000
 8005ecc:	08009a40 	.word	0x08009a40
 8005ed0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ed2:	1c51      	adds	r1, r2, #1
 8005ed4:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ed6:	7852      	ldrb	r2, [r2, #1]
 8005ed8:	2a30      	cmp	r2, #48	@ 0x30
 8005eda:	d0f9      	beq.n	8005ed0 <_strtod_l+0x298>
 8005edc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005ee0:	2908      	cmp	r1, #8
 8005ee2:	f63f af75 	bhi.w	8005dd0 <_strtod_l+0x198>
 8005ee6:	f04f 080a 	mov.w	r8, #10
 8005eea:	3a30      	subs	r2, #48	@ 0x30
 8005eec:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ef0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005ef2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005ef4:	1c56      	adds	r6, r2, #1
 8005ef6:	9619      	str	r6, [sp, #100]	@ 0x64
 8005ef8:	7852      	ldrb	r2, [r2, #1]
 8005efa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005efe:	f1be 0f09 	cmp.w	lr, #9
 8005f02:	d939      	bls.n	8005f78 <_strtod_l+0x340>
 8005f04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005f06:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005f0a:	1a76      	subs	r6, r6, r1
 8005f0c:	2e08      	cmp	r6, #8
 8005f0e:	dc03      	bgt.n	8005f18 <_strtod_l+0x2e0>
 8005f10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f12:	4588      	cmp	r8, r1
 8005f14:	bfa8      	it	ge
 8005f16:	4688      	movge	r8, r1
 8005f18:	f1bc 0f00 	cmp.w	ip, #0
 8005f1c:	d001      	beq.n	8005f22 <_strtod_l+0x2ea>
 8005f1e:	f1c8 0800 	rsb	r8, r8, #0
 8005f22:	2d00      	cmp	r5, #0
 8005f24:	d14e      	bne.n	8005fc4 <_strtod_l+0x38c>
 8005f26:	9908      	ldr	r1, [sp, #32]
 8005f28:	4308      	orrs	r0, r1
 8005f2a:	f47f aebe 	bne.w	8005caa <_strtod_l+0x72>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f47f aed4 	bne.w	8005cdc <_strtod_l+0xa4>
 8005f34:	2a69      	cmp	r2, #105	@ 0x69
 8005f36:	d028      	beq.n	8005f8a <_strtod_l+0x352>
 8005f38:	dc25      	bgt.n	8005f86 <_strtod_l+0x34e>
 8005f3a:	2a49      	cmp	r2, #73	@ 0x49
 8005f3c:	d025      	beq.n	8005f8a <_strtod_l+0x352>
 8005f3e:	2a4e      	cmp	r2, #78	@ 0x4e
 8005f40:	f47f aecc 	bne.w	8005cdc <_strtod_l+0xa4>
 8005f44:	4999      	ldr	r1, [pc, #612]	@ (80061ac <_strtod_l+0x574>)
 8005f46:	a819      	add	r0, sp, #100	@ 0x64
 8005f48:	f002 fcb0 	bl	80088ac <__match>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	f43f aec5 	beq.w	8005cdc <_strtod_l+0xa4>
 8005f52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b28      	cmp	r3, #40	@ 0x28
 8005f58:	d12e      	bne.n	8005fb8 <_strtod_l+0x380>
 8005f5a:	4995      	ldr	r1, [pc, #596]	@ (80061b0 <_strtod_l+0x578>)
 8005f5c:	aa1c      	add	r2, sp, #112	@ 0x70
 8005f5e:	a819      	add	r0, sp, #100	@ 0x64
 8005f60:	f002 fcb8 	bl	80088d4 <__hexnan>
 8005f64:	2805      	cmp	r0, #5
 8005f66:	d127      	bne.n	8005fb8 <_strtod_l+0x380>
 8005f68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005f6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005f6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005f72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005f76:	e698      	b.n	8005caa <_strtod_l+0x72>
 8005f78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f7a:	fb08 2101 	mla	r1, r8, r1, r2
 8005f7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005f82:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f84:	e7b5      	b.n	8005ef2 <_strtod_l+0x2ba>
 8005f86:	2a6e      	cmp	r2, #110	@ 0x6e
 8005f88:	e7da      	b.n	8005f40 <_strtod_l+0x308>
 8005f8a:	498a      	ldr	r1, [pc, #552]	@ (80061b4 <_strtod_l+0x57c>)
 8005f8c:	a819      	add	r0, sp, #100	@ 0x64
 8005f8e:	f002 fc8d 	bl	80088ac <__match>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f43f aea2 	beq.w	8005cdc <_strtod_l+0xa4>
 8005f98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f9a:	4987      	ldr	r1, [pc, #540]	@ (80061b8 <_strtod_l+0x580>)
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	a819      	add	r0, sp, #100	@ 0x64
 8005fa0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005fa2:	f002 fc83 	bl	80088ac <__match>
 8005fa6:	b910      	cbnz	r0, 8005fae <_strtod_l+0x376>
 8005fa8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005faa:	3301      	adds	r3, #1
 8005fac:	9319      	str	r3, [sp, #100]	@ 0x64
 8005fae:	f04f 0a00 	mov.w	sl, #0
 8005fb2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80061bc <_strtod_l+0x584>
 8005fb6:	e678      	b.n	8005caa <_strtod_l+0x72>
 8005fb8:	4881      	ldr	r0, [pc, #516]	@ (80061c0 <_strtod_l+0x588>)
 8005fba:	f001 fb43 	bl	8007644 <nan>
 8005fbe:	4682      	mov	sl, r0
 8005fc0:	468b      	mov	fp, r1
 8005fc2:	e672      	b.n	8005caa <_strtod_l+0x72>
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fc6:	f1b9 0f00 	cmp.w	r9, #0
 8005fca:	bf08      	it	eq
 8005fcc:	46a9      	moveq	r9, r5
 8005fce:	eba8 0303 	sub.w	r3, r8, r3
 8005fd2:	2d10      	cmp	r5, #16
 8005fd4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005fd6:	462c      	mov	r4, r5
 8005fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fda:	bfa8      	it	ge
 8005fdc:	2410      	movge	r4, #16
 8005fde:	f7fa fabf 	bl	8000560 <__aeabi_ui2d>
 8005fe2:	2d09      	cmp	r5, #9
 8005fe4:	4682      	mov	sl, r0
 8005fe6:	468b      	mov	fp, r1
 8005fe8:	dc11      	bgt.n	800600e <_strtod_l+0x3d6>
 8005fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f43f ae5c 	beq.w	8005caa <_strtod_l+0x72>
 8005ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff4:	dd76      	ble.n	80060e4 <_strtod_l+0x4ac>
 8005ff6:	2b16      	cmp	r3, #22
 8005ff8:	dc5d      	bgt.n	80060b6 <_strtod_l+0x47e>
 8005ffa:	4972      	ldr	r1, [pc, #456]	@ (80061c4 <_strtod_l+0x58c>)
 8005ffc:	4652      	mov	r2, sl
 8005ffe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006002:	465b      	mov	r3, fp
 8006004:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006008:	f7fa fb24 	bl	8000654 <__aeabi_dmul>
 800600c:	e7d7      	b.n	8005fbe <_strtod_l+0x386>
 800600e:	4b6d      	ldr	r3, [pc, #436]	@ (80061c4 <_strtod_l+0x58c>)
 8006010:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006014:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006018:	f7fa fb1c 	bl	8000654 <__aeabi_dmul>
 800601c:	4682      	mov	sl, r0
 800601e:	4638      	mov	r0, r7
 8006020:	468b      	mov	fp, r1
 8006022:	f7fa fa9d 	bl	8000560 <__aeabi_ui2d>
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	4650      	mov	r0, sl
 800602c:	4659      	mov	r1, fp
 800602e:	f7fa f95b 	bl	80002e8 <__adddf3>
 8006032:	2d0f      	cmp	r5, #15
 8006034:	4682      	mov	sl, r0
 8006036:	468b      	mov	fp, r1
 8006038:	ddd7      	ble.n	8005fea <_strtod_l+0x3b2>
 800603a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603c:	1b2c      	subs	r4, r5, r4
 800603e:	441c      	add	r4, r3
 8006040:	2c00      	cmp	r4, #0
 8006042:	f340 8093 	ble.w	800616c <_strtod_l+0x534>
 8006046:	f014 030f 	ands.w	r3, r4, #15
 800604a:	d00a      	beq.n	8006062 <_strtod_l+0x42a>
 800604c:	495d      	ldr	r1, [pc, #372]	@ (80061c4 <_strtod_l+0x58c>)
 800604e:	4652      	mov	r2, sl
 8006050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006058:	465b      	mov	r3, fp
 800605a:	f7fa fafb 	bl	8000654 <__aeabi_dmul>
 800605e:	4682      	mov	sl, r0
 8006060:	468b      	mov	fp, r1
 8006062:	f034 040f 	bics.w	r4, r4, #15
 8006066:	d073      	beq.n	8006150 <_strtod_l+0x518>
 8006068:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800606c:	dd49      	ble.n	8006102 <_strtod_l+0x4ca>
 800606e:	2400      	movs	r4, #0
 8006070:	46a0      	mov	r8, r4
 8006072:	46a1      	mov	r9, r4
 8006074:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006076:	2322      	movs	r3, #34	@ 0x22
 8006078:	f04f 0a00 	mov.w	sl, #0
 800607c:	9a05      	ldr	r2, [sp, #20]
 800607e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80061bc <_strtod_l+0x584>
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006086:	2b00      	cmp	r3, #0
 8006088:	f43f ae0f 	beq.w	8005caa <_strtod_l+0x72>
 800608c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800608e:	9805      	ldr	r0, [sp, #20]
 8006090:	f002 fd0e 	bl	8008ab0 <_Bfree>
 8006094:	4649      	mov	r1, r9
 8006096:	9805      	ldr	r0, [sp, #20]
 8006098:	f002 fd0a 	bl	8008ab0 <_Bfree>
 800609c:	4641      	mov	r1, r8
 800609e:	9805      	ldr	r0, [sp, #20]
 80060a0:	f002 fd06 	bl	8008ab0 <_Bfree>
 80060a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060a6:	9805      	ldr	r0, [sp, #20]
 80060a8:	f002 fd02 	bl	8008ab0 <_Bfree>
 80060ac:	4621      	mov	r1, r4
 80060ae:	9805      	ldr	r0, [sp, #20]
 80060b0:	f002 fcfe 	bl	8008ab0 <_Bfree>
 80060b4:	e5f9      	b.n	8005caa <_strtod_l+0x72>
 80060b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80060bc:	4293      	cmp	r3, r2
 80060be:	dbbc      	blt.n	800603a <_strtod_l+0x402>
 80060c0:	4c40      	ldr	r4, [pc, #256]	@ (80061c4 <_strtod_l+0x58c>)
 80060c2:	f1c5 050f 	rsb	r5, r5, #15
 80060c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80060ca:	4652      	mov	r2, sl
 80060cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060d0:	465b      	mov	r3, fp
 80060d2:	f7fa fabf 	bl	8000654 <__aeabi_dmul>
 80060d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d8:	1b5d      	subs	r5, r3, r5
 80060da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80060de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80060e2:	e791      	b.n	8006008 <_strtod_l+0x3d0>
 80060e4:	3316      	adds	r3, #22
 80060e6:	dba8      	blt.n	800603a <_strtod_l+0x402>
 80060e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ea:	4650      	mov	r0, sl
 80060ec:	eba3 0808 	sub.w	r8, r3, r8
 80060f0:	4b34      	ldr	r3, [pc, #208]	@ (80061c4 <_strtod_l+0x58c>)
 80060f2:	4659      	mov	r1, fp
 80060f4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80060f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80060fc:	f7fa fbd4 	bl	80008a8 <__aeabi_ddiv>
 8006100:	e75d      	b.n	8005fbe <_strtod_l+0x386>
 8006102:	2300      	movs	r3, #0
 8006104:	4650      	mov	r0, sl
 8006106:	4659      	mov	r1, fp
 8006108:	461e      	mov	r6, r3
 800610a:	4f2f      	ldr	r7, [pc, #188]	@ (80061c8 <_strtod_l+0x590>)
 800610c:	1124      	asrs	r4, r4, #4
 800610e:	2c01      	cmp	r4, #1
 8006110:	dc21      	bgt.n	8006156 <_strtod_l+0x51e>
 8006112:	b10b      	cbz	r3, 8006118 <_strtod_l+0x4e0>
 8006114:	4682      	mov	sl, r0
 8006116:	468b      	mov	fp, r1
 8006118:	492b      	ldr	r1, [pc, #172]	@ (80061c8 <_strtod_l+0x590>)
 800611a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800611e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006122:	4652      	mov	r2, sl
 8006124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006128:	465b      	mov	r3, fp
 800612a:	f7fa fa93 	bl	8000654 <__aeabi_dmul>
 800612e:	4b23      	ldr	r3, [pc, #140]	@ (80061bc <_strtod_l+0x584>)
 8006130:	460a      	mov	r2, r1
 8006132:	400b      	ands	r3, r1
 8006134:	4925      	ldr	r1, [pc, #148]	@ (80061cc <_strtod_l+0x594>)
 8006136:	4682      	mov	sl, r0
 8006138:	428b      	cmp	r3, r1
 800613a:	d898      	bhi.n	800606e <_strtod_l+0x436>
 800613c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006140:	428b      	cmp	r3, r1
 8006142:	bf86      	itte	hi
 8006144:	f04f 3aff 	movhi.w	sl, #4294967295
 8006148:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80061d0 <_strtod_l+0x598>
 800614c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006150:	2300      	movs	r3, #0
 8006152:	9308      	str	r3, [sp, #32]
 8006154:	e076      	b.n	8006244 <_strtod_l+0x60c>
 8006156:	07e2      	lsls	r2, r4, #31
 8006158:	d504      	bpl.n	8006164 <_strtod_l+0x52c>
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	f7fa fa79 	bl	8000654 <__aeabi_dmul>
 8006162:	2301      	movs	r3, #1
 8006164:	3601      	adds	r6, #1
 8006166:	1064      	asrs	r4, r4, #1
 8006168:	3708      	adds	r7, #8
 800616a:	e7d0      	b.n	800610e <_strtod_l+0x4d6>
 800616c:	d0f0      	beq.n	8006150 <_strtod_l+0x518>
 800616e:	4264      	negs	r4, r4
 8006170:	f014 020f 	ands.w	r2, r4, #15
 8006174:	d00a      	beq.n	800618c <_strtod_l+0x554>
 8006176:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <_strtod_l+0x58c>)
 8006178:	4650      	mov	r0, sl
 800617a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800617e:	4659      	mov	r1, fp
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f7fa fb90 	bl	80008a8 <__aeabi_ddiv>
 8006188:	4682      	mov	sl, r0
 800618a:	468b      	mov	fp, r1
 800618c:	1124      	asrs	r4, r4, #4
 800618e:	d0df      	beq.n	8006150 <_strtod_l+0x518>
 8006190:	2c1f      	cmp	r4, #31
 8006192:	dd1f      	ble.n	80061d4 <_strtod_l+0x59c>
 8006194:	2400      	movs	r4, #0
 8006196:	46a0      	mov	r8, r4
 8006198:	46a1      	mov	r9, r4
 800619a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800619c:	2322      	movs	r3, #34	@ 0x22
 800619e:	9a05      	ldr	r2, [sp, #20]
 80061a0:	f04f 0a00 	mov.w	sl, #0
 80061a4:	f04f 0b00 	mov.w	fp, #0
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e76b      	b.n	8006084 <_strtod_l+0x44c>
 80061ac:	08009a4f 	.word	0x08009a4f
 80061b0:	08009c14 	.word	0x08009c14
 80061b4:	08009a47 	.word	0x08009a47
 80061b8:	08009a81 	.word	0x08009a81
 80061bc:	7ff00000 	.word	0x7ff00000
 80061c0:	08009c10 	.word	0x08009c10
 80061c4:	08009ca0 	.word	0x08009ca0
 80061c8:	08009c78 	.word	0x08009c78
 80061cc:	7ca00000 	.word	0x7ca00000
 80061d0:	7fefffff 	.word	0x7fefffff
 80061d4:	f014 0310 	ands.w	r3, r4, #16
 80061d8:	bf18      	it	ne
 80061da:	236a      	movne	r3, #106	@ 0x6a
 80061dc:	4650      	mov	r0, sl
 80061de:	9308      	str	r3, [sp, #32]
 80061e0:	4659      	mov	r1, fp
 80061e2:	2300      	movs	r3, #0
 80061e4:	4e77      	ldr	r6, [pc, #476]	@ (80063c4 <_strtod_l+0x78c>)
 80061e6:	07e7      	lsls	r7, r4, #31
 80061e8:	d504      	bpl.n	80061f4 <_strtod_l+0x5bc>
 80061ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061ee:	f7fa fa31 	bl	8000654 <__aeabi_dmul>
 80061f2:	2301      	movs	r3, #1
 80061f4:	1064      	asrs	r4, r4, #1
 80061f6:	f106 0608 	add.w	r6, r6, #8
 80061fa:	d1f4      	bne.n	80061e6 <_strtod_l+0x5ae>
 80061fc:	b10b      	cbz	r3, 8006202 <_strtod_l+0x5ca>
 80061fe:	4682      	mov	sl, r0
 8006200:	468b      	mov	fp, r1
 8006202:	9b08      	ldr	r3, [sp, #32]
 8006204:	b1b3      	cbz	r3, 8006234 <_strtod_l+0x5fc>
 8006206:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800620a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800620e:	2b00      	cmp	r3, #0
 8006210:	4659      	mov	r1, fp
 8006212:	dd0f      	ble.n	8006234 <_strtod_l+0x5fc>
 8006214:	2b1f      	cmp	r3, #31
 8006216:	dd58      	ble.n	80062ca <_strtod_l+0x692>
 8006218:	2b34      	cmp	r3, #52	@ 0x34
 800621a:	bfd8      	it	le
 800621c:	f04f 33ff 	movle.w	r3, #4294967295
 8006220:	f04f 0a00 	mov.w	sl, #0
 8006224:	bfcf      	iteee	gt
 8006226:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800622a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800622e:	4093      	lslle	r3, r2
 8006230:	ea03 0b01 	andle.w	fp, r3, r1
 8006234:	2200      	movs	r2, #0
 8006236:	2300      	movs	r3, #0
 8006238:	4650      	mov	r0, sl
 800623a:	4659      	mov	r1, fp
 800623c:	f7fa fc72 	bl	8000b24 <__aeabi_dcmpeq>
 8006240:	2800      	cmp	r0, #0
 8006242:	d1a7      	bne.n	8006194 <_strtod_l+0x55c>
 8006244:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006246:	464a      	mov	r2, r9
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800624c:	462b      	mov	r3, r5
 800624e:	9805      	ldr	r0, [sp, #20]
 8006250:	f002 fc96 	bl	8008b80 <__s2b>
 8006254:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006256:	2800      	cmp	r0, #0
 8006258:	f43f af09 	beq.w	800606e <_strtod_l+0x436>
 800625c:	2400      	movs	r4, #0
 800625e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006262:	2a00      	cmp	r2, #0
 8006264:	eba3 0308 	sub.w	r3, r3, r8
 8006268:	bfa8      	it	ge
 800626a:	2300      	movge	r3, #0
 800626c:	46a0      	mov	r8, r4
 800626e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006270:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006274:	9316      	str	r3, [sp, #88]	@ 0x58
 8006276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006278:	9805      	ldr	r0, [sp, #20]
 800627a:	6859      	ldr	r1, [r3, #4]
 800627c:	f002 fbd8 	bl	8008a30 <_Balloc>
 8006280:	4681      	mov	r9, r0
 8006282:	2800      	cmp	r0, #0
 8006284:	f43f aef7 	beq.w	8006076 <_strtod_l+0x43e>
 8006288:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800628a:	300c      	adds	r0, #12
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	f103 010c 	add.w	r1, r3, #12
 8006292:	3202      	adds	r2, #2
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	f001 f9c6 	bl	8007626 <memcpy>
 800629a:	ab1c      	add	r3, sp, #112	@ 0x70
 800629c:	9301      	str	r3, [sp, #4]
 800629e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	4652      	mov	r2, sl
 80062a4:	465b      	mov	r3, fp
 80062a6:	9805      	ldr	r0, [sp, #20]
 80062a8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80062ac:	f002 ff94 	bl	80091d8 <__d2b>
 80062b0:	901a      	str	r0, [sp, #104]	@ 0x68
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f aedf 	beq.w	8006076 <_strtod_l+0x43e>
 80062b8:	2101      	movs	r1, #1
 80062ba:	9805      	ldr	r0, [sp, #20]
 80062bc:	f002 fcf6 	bl	8008cac <__i2b>
 80062c0:	4680      	mov	r8, r0
 80062c2:	b948      	cbnz	r0, 80062d8 <_strtod_l+0x6a0>
 80062c4:	f04f 0800 	mov.w	r8, #0
 80062c8:	e6d5      	b.n	8006076 <_strtod_l+0x43e>
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	ea03 0a0a 	and.w	sl, r3, sl
 80062d6:	e7ad      	b.n	8006234 <_strtod_l+0x5fc>
 80062d8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80062da:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80062dc:	2d00      	cmp	r5, #0
 80062de:	bfab      	itete	ge
 80062e0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80062e2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80062e4:	18ef      	addge	r7, r5, r3
 80062e6:	1b5e      	sublt	r6, r3, r5
 80062e8:	9b08      	ldr	r3, [sp, #32]
 80062ea:	bfa8      	it	ge
 80062ec:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80062ee:	eba5 0503 	sub.w	r5, r5, r3
 80062f2:	4415      	add	r5, r2
 80062f4:	4b34      	ldr	r3, [pc, #208]	@ (80063c8 <_strtod_l+0x790>)
 80062f6:	f105 35ff 	add.w	r5, r5, #4294967295
 80062fa:	bfb8      	it	lt
 80062fc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80062fe:	429d      	cmp	r5, r3
 8006300:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006304:	da50      	bge.n	80063a8 <_strtod_l+0x770>
 8006306:	1b5b      	subs	r3, r3, r5
 8006308:	2b1f      	cmp	r3, #31
 800630a:	f04f 0101 	mov.w	r1, #1
 800630e:	eba2 0203 	sub.w	r2, r2, r3
 8006312:	dc3d      	bgt.n	8006390 <_strtod_l+0x758>
 8006314:	fa01 f303 	lsl.w	r3, r1, r3
 8006318:	9313      	str	r3, [sp, #76]	@ 0x4c
 800631a:	2300      	movs	r3, #0
 800631c:	9310      	str	r3, [sp, #64]	@ 0x40
 800631e:	18bd      	adds	r5, r7, r2
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	42af      	cmp	r7, r5
 8006324:	4416      	add	r6, r2
 8006326:	441e      	add	r6, r3
 8006328:	463b      	mov	r3, r7
 800632a:	bfa8      	it	ge
 800632c:	462b      	movge	r3, r5
 800632e:	42b3      	cmp	r3, r6
 8006330:	bfa8      	it	ge
 8006332:	4633      	movge	r3, r6
 8006334:	2b00      	cmp	r3, #0
 8006336:	bfc2      	ittt	gt
 8006338:	1aed      	subgt	r5, r5, r3
 800633a:	1af6      	subgt	r6, r6, r3
 800633c:	1aff      	subgt	r7, r7, r3
 800633e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006340:	2b00      	cmp	r3, #0
 8006342:	dd16      	ble.n	8006372 <_strtod_l+0x73a>
 8006344:	4641      	mov	r1, r8
 8006346:	461a      	mov	r2, r3
 8006348:	9805      	ldr	r0, [sp, #20]
 800634a:	f002 fd67 	bl	8008e1c <__pow5mult>
 800634e:	4680      	mov	r8, r0
 8006350:	2800      	cmp	r0, #0
 8006352:	d0b7      	beq.n	80062c4 <_strtod_l+0x68c>
 8006354:	4601      	mov	r1, r0
 8006356:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006358:	9805      	ldr	r0, [sp, #20]
 800635a:	f002 fcbd 	bl	8008cd8 <__multiply>
 800635e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006360:	2800      	cmp	r0, #0
 8006362:	f43f ae88 	beq.w	8006076 <_strtod_l+0x43e>
 8006366:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006368:	9805      	ldr	r0, [sp, #20]
 800636a:	f002 fba1 	bl	8008ab0 <_Bfree>
 800636e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006370:	931a      	str	r3, [sp, #104]	@ 0x68
 8006372:	2d00      	cmp	r5, #0
 8006374:	dc1d      	bgt.n	80063b2 <_strtod_l+0x77a>
 8006376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006378:	2b00      	cmp	r3, #0
 800637a:	dd27      	ble.n	80063cc <_strtod_l+0x794>
 800637c:	4649      	mov	r1, r9
 800637e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006380:	9805      	ldr	r0, [sp, #20]
 8006382:	f002 fd4b 	bl	8008e1c <__pow5mult>
 8006386:	4681      	mov	r9, r0
 8006388:	bb00      	cbnz	r0, 80063cc <_strtod_l+0x794>
 800638a:	f04f 0900 	mov.w	r9, #0
 800638e:	e672      	b.n	8006076 <_strtod_l+0x43e>
 8006390:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006394:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006398:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800639c:	35e2      	adds	r5, #226	@ 0xe2
 800639e:	fa01 f305 	lsl.w	r3, r1, r5
 80063a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80063a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80063a6:	e7ba      	b.n	800631e <_strtod_l+0x6e6>
 80063a8:	2300      	movs	r3, #0
 80063aa:	9310      	str	r3, [sp, #64]	@ 0x40
 80063ac:	2301      	movs	r3, #1
 80063ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063b0:	e7b5      	b.n	800631e <_strtod_l+0x6e6>
 80063b2:	462a      	mov	r2, r5
 80063b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063b6:	9805      	ldr	r0, [sp, #20]
 80063b8:	f002 fd8a 	bl	8008ed0 <__lshift>
 80063bc:	901a      	str	r0, [sp, #104]	@ 0x68
 80063be:	2800      	cmp	r0, #0
 80063c0:	d1d9      	bne.n	8006376 <_strtod_l+0x73e>
 80063c2:	e658      	b.n	8006076 <_strtod_l+0x43e>
 80063c4:	08009c40 	.word	0x08009c40
 80063c8:	fffffc02 	.word	0xfffffc02
 80063cc:	2e00      	cmp	r6, #0
 80063ce:	dd07      	ble.n	80063e0 <_strtod_l+0x7a8>
 80063d0:	4649      	mov	r1, r9
 80063d2:	4632      	mov	r2, r6
 80063d4:	9805      	ldr	r0, [sp, #20]
 80063d6:	f002 fd7b 	bl	8008ed0 <__lshift>
 80063da:	4681      	mov	r9, r0
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0d4      	beq.n	800638a <_strtod_l+0x752>
 80063e0:	2f00      	cmp	r7, #0
 80063e2:	dd08      	ble.n	80063f6 <_strtod_l+0x7be>
 80063e4:	4641      	mov	r1, r8
 80063e6:	463a      	mov	r2, r7
 80063e8:	9805      	ldr	r0, [sp, #20]
 80063ea:	f002 fd71 	bl	8008ed0 <__lshift>
 80063ee:	4680      	mov	r8, r0
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f43f ae40 	beq.w	8006076 <_strtod_l+0x43e>
 80063f6:	464a      	mov	r2, r9
 80063f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80063fa:	9805      	ldr	r0, [sp, #20]
 80063fc:	f002 fdf0 	bl	8008fe0 <__mdiff>
 8006400:	4604      	mov	r4, r0
 8006402:	2800      	cmp	r0, #0
 8006404:	f43f ae37 	beq.w	8006076 <_strtod_l+0x43e>
 8006408:	68c3      	ldr	r3, [r0, #12]
 800640a:	4641      	mov	r1, r8
 800640c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800640e:	2300      	movs	r3, #0
 8006410:	60c3      	str	r3, [r0, #12]
 8006412:	f002 fdc9 	bl	8008fa8 <__mcmp>
 8006416:	2800      	cmp	r0, #0
 8006418:	da3d      	bge.n	8006496 <_strtod_l+0x85e>
 800641a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800641c:	ea53 030a 	orrs.w	r3, r3, sl
 8006420:	d163      	bne.n	80064ea <_strtod_l+0x8b2>
 8006422:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006426:	2b00      	cmp	r3, #0
 8006428:	d15f      	bne.n	80064ea <_strtod_l+0x8b2>
 800642a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800642e:	0d1b      	lsrs	r3, r3, #20
 8006430:	051b      	lsls	r3, r3, #20
 8006432:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006436:	d958      	bls.n	80064ea <_strtod_l+0x8b2>
 8006438:	6963      	ldr	r3, [r4, #20]
 800643a:	b913      	cbnz	r3, 8006442 <_strtod_l+0x80a>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	2b01      	cmp	r3, #1
 8006440:	dd53      	ble.n	80064ea <_strtod_l+0x8b2>
 8006442:	4621      	mov	r1, r4
 8006444:	2201      	movs	r2, #1
 8006446:	9805      	ldr	r0, [sp, #20]
 8006448:	f002 fd42 	bl	8008ed0 <__lshift>
 800644c:	4641      	mov	r1, r8
 800644e:	4604      	mov	r4, r0
 8006450:	f002 fdaa 	bl	8008fa8 <__mcmp>
 8006454:	2800      	cmp	r0, #0
 8006456:	dd48      	ble.n	80064ea <_strtod_l+0x8b2>
 8006458:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800645c:	9a08      	ldr	r2, [sp, #32]
 800645e:	0d1b      	lsrs	r3, r3, #20
 8006460:	051b      	lsls	r3, r3, #20
 8006462:	2a00      	cmp	r2, #0
 8006464:	d062      	beq.n	800652c <_strtod_l+0x8f4>
 8006466:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800646a:	d85f      	bhi.n	800652c <_strtod_l+0x8f4>
 800646c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006470:	f67f ae94 	bls.w	800619c <_strtod_l+0x564>
 8006474:	4650      	mov	r0, sl
 8006476:	4659      	mov	r1, fp
 8006478:	4ba3      	ldr	r3, [pc, #652]	@ (8006708 <_strtod_l+0xad0>)
 800647a:	2200      	movs	r2, #0
 800647c:	f7fa f8ea 	bl	8000654 <__aeabi_dmul>
 8006480:	4ba2      	ldr	r3, [pc, #648]	@ (800670c <_strtod_l+0xad4>)
 8006482:	4682      	mov	sl, r0
 8006484:	400b      	ands	r3, r1
 8006486:	468b      	mov	fp, r1
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f adff 	bne.w	800608c <_strtod_l+0x454>
 800648e:	2322      	movs	r3, #34	@ 0x22
 8006490:	9a05      	ldr	r2, [sp, #20]
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e5fa      	b.n	800608c <_strtod_l+0x454>
 8006496:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800649a:	d165      	bne.n	8006568 <_strtod_l+0x930>
 800649c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800649e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064a2:	b35a      	cbz	r2, 80064fc <_strtod_l+0x8c4>
 80064a4:	4a9a      	ldr	r2, [pc, #616]	@ (8006710 <_strtod_l+0xad8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d12b      	bne.n	8006502 <_strtod_l+0x8ca>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	4651      	mov	r1, sl
 80064ae:	b303      	cbz	r3, 80064f2 <_strtod_l+0x8ba>
 80064b0:	465a      	mov	r2, fp
 80064b2:	4b96      	ldr	r3, [pc, #600]	@ (800670c <_strtod_l+0xad4>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80064ba:	f04f 32ff 	mov.w	r2, #4294967295
 80064be:	d81b      	bhi.n	80064f8 <_strtod_l+0x8c0>
 80064c0:	0d1b      	lsrs	r3, r3, #20
 80064c2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	4299      	cmp	r1, r3
 80064cc:	d119      	bne.n	8006502 <_strtod_l+0x8ca>
 80064ce:	4b91      	ldr	r3, [pc, #580]	@ (8006714 <_strtod_l+0xadc>)
 80064d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d102      	bne.n	80064dc <_strtod_l+0x8a4>
 80064d6:	3101      	adds	r1, #1
 80064d8:	f43f adcd 	beq.w	8006076 <_strtod_l+0x43e>
 80064dc:	f04f 0a00 	mov.w	sl, #0
 80064e0:	4b8a      	ldr	r3, [pc, #552]	@ (800670c <_strtod_l+0xad4>)
 80064e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064e4:	401a      	ands	r2, r3
 80064e6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1c1      	bne.n	8006474 <_strtod_l+0x83c>
 80064f0:	e5cc      	b.n	800608c <_strtod_l+0x454>
 80064f2:	f04f 33ff 	mov.w	r3, #4294967295
 80064f6:	e7e8      	b.n	80064ca <_strtod_l+0x892>
 80064f8:	4613      	mov	r3, r2
 80064fa:	e7e6      	b.n	80064ca <_strtod_l+0x892>
 80064fc:	ea53 030a 	orrs.w	r3, r3, sl
 8006500:	d0aa      	beq.n	8006458 <_strtod_l+0x820>
 8006502:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006504:	b1db      	cbz	r3, 800653e <_strtod_l+0x906>
 8006506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006508:	4213      	tst	r3, r2
 800650a:	d0ee      	beq.n	80064ea <_strtod_l+0x8b2>
 800650c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800650e:	4650      	mov	r0, sl
 8006510:	4659      	mov	r1, fp
 8006512:	9a08      	ldr	r2, [sp, #32]
 8006514:	b1bb      	cbz	r3, 8006546 <_strtod_l+0x90e>
 8006516:	f7ff fb6d 	bl	8005bf4 <sulp>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006522:	f7f9 fee1 	bl	80002e8 <__adddf3>
 8006526:	4682      	mov	sl, r0
 8006528:	468b      	mov	fp, r1
 800652a:	e7de      	b.n	80064ea <_strtod_l+0x8b2>
 800652c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006530:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006534:	f04f 3aff 	mov.w	sl, #4294967295
 8006538:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800653c:	e7d5      	b.n	80064ea <_strtod_l+0x8b2>
 800653e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006540:	ea13 0f0a 	tst.w	r3, sl
 8006544:	e7e1      	b.n	800650a <_strtod_l+0x8d2>
 8006546:	f7ff fb55 	bl	8005bf4 <sulp>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006552:	f7f9 fec7 	bl	80002e4 <__aeabi_dsub>
 8006556:	2200      	movs	r2, #0
 8006558:	2300      	movs	r3, #0
 800655a:	4682      	mov	sl, r0
 800655c:	468b      	mov	fp, r1
 800655e:	f7fa fae1 	bl	8000b24 <__aeabi_dcmpeq>
 8006562:	2800      	cmp	r0, #0
 8006564:	d0c1      	beq.n	80064ea <_strtod_l+0x8b2>
 8006566:	e619      	b.n	800619c <_strtod_l+0x564>
 8006568:	4641      	mov	r1, r8
 800656a:	4620      	mov	r0, r4
 800656c:	f002 fe8c 	bl	8009288 <__ratio>
 8006570:	2200      	movs	r2, #0
 8006572:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006576:	4606      	mov	r6, r0
 8006578:	460f      	mov	r7, r1
 800657a:	f7fa fae7 	bl	8000b4c <__aeabi_dcmple>
 800657e:	2800      	cmp	r0, #0
 8006580:	d06d      	beq.n	800665e <_strtod_l+0xa26>
 8006582:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d178      	bne.n	800667a <_strtod_l+0xa42>
 8006588:	f1ba 0f00 	cmp.w	sl, #0
 800658c:	d156      	bne.n	800663c <_strtod_l+0xa04>
 800658e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006594:	2b00      	cmp	r3, #0
 8006596:	d158      	bne.n	800664a <_strtod_l+0xa12>
 8006598:	2200      	movs	r2, #0
 800659a:	4630      	mov	r0, r6
 800659c:	4639      	mov	r1, r7
 800659e:	4b5e      	ldr	r3, [pc, #376]	@ (8006718 <_strtod_l+0xae0>)
 80065a0:	f7fa faca 	bl	8000b38 <__aeabi_dcmplt>
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d157      	bne.n	8006658 <_strtod_l+0xa20>
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	2200      	movs	r2, #0
 80065ae:	4b5b      	ldr	r3, [pc, #364]	@ (800671c <_strtod_l+0xae4>)
 80065b0:	f7fa f850 	bl	8000654 <__aeabi_dmul>
 80065b4:	4606      	mov	r6, r0
 80065b6:	460f      	mov	r7, r1
 80065b8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80065bc:	9606      	str	r6, [sp, #24]
 80065be:	9307      	str	r3, [sp, #28]
 80065c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c4:	4d51      	ldr	r5, [pc, #324]	@ (800670c <_strtod_l+0xad4>)
 80065c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80065ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065cc:	401d      	ands	r5, r3
 80065ce:	4b54      	ldr	r3, [pc, #336]	@ (8006720 <_strtod_l+0xae8>)
 80065d0:	429d      	cmp	r5, r3
 80065d2:	f040 80ab 	bne.w	800672c <_strtod_l+0xaf4>
 80065d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d8:	4650      	mov	r0, sl
 80065da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80065de:	4659      	mov	r1, fp
 80065e0:	f002 fd92 	bl	8009108 <__ulp>
 80065e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065e8:	f7fa f834 	bl	8000654 <__aeabi_dmul>
 80065ec:	4652      	mov	r2, sl
 80065ee:	465b      	mov	r3, fp
 80065f0:	f7f9 fe7a 	bl	80002e8 <__adddf3>
 80065f4:	460b      	mov	r3, r1
 80065f6:	4945      	ldr	r1, [pc, #276]	@ (800670c <_strtod_l+0xad4>)
 80065f8:	4a4a      	ldr	r2, [pc, #296]	@ (8006724 <_strtod_l+0xaec>)
 80065fa:	4019      	ands	r1, r3
 80065fc:	4291      	cmp	r1, r2
 80065fe:	4682      	mov	sl, r0
 8006600:	d942      	bls.n	8006688 <_strtod_l+0xa50>
 8006602:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006604:	4b43      	ldr	r3, [pc, #268]	@ (8006714 <_strtod_l+0xadc>)
 8006606:	429a      	cmp	r2, r3
 8006608:	d103      	bne.n	8006612 <_strtod_l+0x9da>
 800660a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800660c:	3301      	adds	r3, #1
 800660e:	f43f ad32 	beq.w	8006076 <_strtod_l+0x43e>
 8006612:	f04f 3aff 	mov.w	sl, #4294967295
 8006616:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8006714 <_strtod_l+0xadc>
 800661a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800661c:	9805      	ldr	r0, [sp, #20]
 800661e:	f002 fa47 	bl	8008ab0 <_Bfree>
 8006622:	4649      	mov	r1, r9
 8006624:	9805      	ldr	r0, [sp, #20]
 8006626:	f002 fa43 	bl	8008ab0 <_Bfree>
 800662a:	4641      	mov	r1, r8
 800662c:	9805      	ldr	r0, [sp, #20]
 800662e:	f002 fa3f 	bl	8008ab0 <_Bfree>
 8006632:	4621      	mov	r1, r4
 8006634:	9805      	ldr	r0, [sp, #20]
 8006636:	f002 fa3b 	bl	8008ab0 <_Bfree>
 800663a:	e61c      	b.n	8006276 <_strtod_l+0x63e>
 800663c:	f1ba 0f01 	cmp.w	sl, #1
 8006640:	d103      	bne.n	800664a <_strtod_l+0xa12>
 8006642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006644:	2b00      	cmp	r3, #0
 8006646:	f43f ada9 	beq.w	800619c <_strtod_l+0x564>
 800664a:	2200      	movs	r2, #0
 800664c:	4b36      	ldr	r3, [pc, #216]	@ (8006728 <_strtod_l+0xaf0>)
 800664e:	2600      	movs	r6, #0
 8006650:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006654:	4f30      	ldr	r7, [pc, #192]	@ (8006718 <_strtod_l+0xae0>)
 8006656:	e7b3      	b.n	80065c0 <_strtod_l+0x988>
 8006658:	2600      	movs	r6, #0
 800665a:	4f30      	ldr	r7, [pc, #192]	@ (800671c <_strtod_l+0xae4>)
 800665c:	e7ac      	b.n	80065b8 <_strtod_l+0x980>
 800665e:	4630      	mov	r0, r6
 8006660:	4639      	mov	r1, r7
 8006662:	4b2e      	ldr	r3, [pc, #184]	@ (800671c <_strtod_l+0xae4>)
 8006664:	2200      	movs	r2, #0
 8006666:	f7f9 fff5 	bl	8000654 <__aeabi_dmul>
 800666a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800666c:	4606      	mov	r6, r0
 800666e:	460f      	mov	r7, r1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d0a1      	beq.n	80065b8 <_strtod_l+0x980>
 8006674:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006678:	e7a2      	b.n	80065c0 <_strtod_l+0x988>
 800667a:	2200      	movs	r2, #0
 800667c:	4b26      	ldr	r3, [pc, #152]	@ (8006718 <_strtod_l+0xae0>)
 800667e:	4616      	mov	r6, r2
 8006680:	461f      	mov	r7, r3
 8006682:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006686:	e79b      	b.n	80065c0 <_strtod_l+0x988>
 8006688:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800668c:	9b08      	ldr	r3, [sp, #32]
 800668e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1c1      	bne.n	800661a <_strtod_l+0x9e2>
 8006696:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800669a:	0d1b      	lsrs	r3, r3, #20
 800669c:	051b      	lsls	r3, r3, #20
 800669e:	429d      	cmp	r5, r3
 80066a0:	d1bb      	bne.n	800661a <_strtod_l+0x9e2>
 80066a2:	4630      	mov	r0, r6
 80066a4:	4639      	mov	r1, r7
 80066a6:	f7fa fcc7 	bl	8001038 <__aeabi_d2lz>
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_l2d>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4630      	mov	r0, r6
 80066b4:	4639      	mov	r1, r7
 80066b6:	f7f9 fe15 	bl	80002e4 <__aeabi_dsub>
 80066ba:	460b      	mov	r3, r1
 80066bc:	4602      	mov	r2, r0
 80066be:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80066c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80066c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066c8:	ea46 060a 	orr.w	r6, r6, sl
 80066cc:	431e      	orrs	r6, r3
 80066ce:	d06a      	beq.n	80067a6 <_strtod_l+0xb6e>
 80066d0:	a309      	add	r3, pc, #36	@ (adr r3, 80066f8 <_strtod_l+0xac0>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7fa fa2f 	bl	8000b38 <__aeabi_dcmplt>
 80066da:	2800      	cmp	r0, #0
 80066dc:	f47f acd6 	bne.w	800608c <_strtod_l+0x454>
 80066e0:	a307      	add	r3, pc, #28	@ (adr r3, 8006700 <_strtod_l+0xac8>)
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066ea:	f7fa fa43 	bl	8000b74 <__aeabi_dcmpgt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d093      	beq.n	800661a <_strtod_l+0x9e2>
 80066f2:	e4cb      	b.n	800608c <_strtod_l+0x454>
 80066f4:	f3af 8000 	nop.w
 80066f8:	94a03595 	.word	0x94a03595
 80066fc:	3fdfffff 	.word	0x3fdfffff
 8006700:	35afe535 	.word	0x35afe535
 8006704:	3fe00000 	.word	0x3fe00000
 8006708:	39500000 	.word	0x39500000
 800670c:	7ff00000 	.word	0x7ff00000
 8006710:	000fffff 	.word	0x000fffff
 8006714:	7fefffff 	.word	0x7fefffff
 8006718:	3ff00000 	.word	0x3ff00000
 800671c:	3fe00000 	.word	0x3fe00000
 8006720:	7fe00000 	.word	0x7fe00000
 8006724:	7c9fffff 	.word	0x7c9fffff
 8006728:	bff00000 	.word	0xbff00000
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	b323      	cbz	r3, 800677a <_strtod_l+0xb42>
 8006730:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006734:	d821      	bhi.n	800677a <_strtod_l+0xb42>
 8006736:	a328      	add	r3, pc, #160	@ (adr r3, 80067d8 <_strtod_l+0xba0>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	4630      	mov	r0, r6
 800673e:	4639      	mov	r1, r7
 8006740:	f7fa fa04 	bl	8000b4c <__aeabi_dcmple>
 8006744:	b1a0      	cbz	r0, 8006770 <_strtod_l+0xb38>
 8006746:	4639      	mov	r1, r7
 8006748:	4630      	mov	r0, r6
 800674a:	f7fa fa5b 	bl	8000c04 <__aeabi_d2uiz>
 800674e:	2801      	cmp	r0, #1
 8006750:	bf38      	it	cc
 8006752:	2001      	movcc	r0, #1
 8006754:	f7f9 ff04 	bl	8000560 <__aeabi_ui2d>
 8006758:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800675a:	4606      	mov	r6, r0
 800675c:	460f      	mov	r7, r1
 800675e:	b9fb      	cbnz	r3, 80067a0 <_strtod_l+0xb68>
 8006760:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006764:	9014      	str	r0, [sp, #80]	@ 0x50
 8006766:	9315      	str	r3, [sp, #84]	@ 0x54
 8006768:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800676c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006770:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006772:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006776:	1b5b      	subs	r3, r3, r5
 8006778:	9311      	str	r3, [sp, #68]	@ 0x44
 800677a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800677e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006782:	f002 fcc1 	bl	8009108 <__ulp>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4650      	mov	r0, sl
 800678c:	4659      	mov	r1, fp
 800678e:	f7f9 ff61 	bl	8000654 <__aeabi_dmul>
 8006792:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006796:	f7f9 fda7 	bl	80002e8 <__adddf3>
 800679a:	4682      	mov	sl, r0
 800679c:	468b      	mov	fp, r1
 800679e:	e775      	b.n	800668c <_strtod_l+0xa54>
 80067a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80067a4:	e7e0      	b.n	8006768 <_strtod_l+0xb30>
 80067a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80067e0 <_strtod_l+0xba8>)
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f7fa f9c4 	bl	8000b38 <__aeabi_dcmplt>
 80067b0:	e79d      	b.n	80066ee <_strtod_l+0xab6>
 80067b2:	2300      	movs	r3, #0
 80067b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80067b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	f7ff ba79 	b.w	8005cb2 <_strtod_l+0x7a>
 80067c0:	2a65      	cmp	r2, #101	@ 0x65
 80067c2:	f43f ab72 	beq.w	8005eaa <_strtod_l+0x272>
 80067c6:	2a45      	cmp	r2, #69	@ 0x45
 80067c8:	f43f ab6f 	beq.w	8005eaa <_strtod_l+0x272>
 80067cc:	2301      	movs	r3, #1
 80067ce:	f7ff bbaa 	b.w	8005f26 <_strtod_l+0x2ee>
 80067d2:	bf00      	nop
 80067d4:	f3af 8000 	nop.w
 80067d8:	ffc00000 	.word	0xffc00000
 80067dc:	41dfffff 	.word	0x41dfffff
 80067e0:	94a03595 	.word	0x94a03595
 80067e4:	3fcfffff 	.word	0x3fcfffff

080067e8 <strtod>:
 80067e8:	460a      	mov	r2, r1
 80067ea:	4601      	mov	r1, r0
 80067ec:	4802      	ldr	r0, [pc, #8]	@ (80067f8 <strtod+0x10>)
 80067ee:	4b03      	ldr	r3, [pc, #12]	@ (80067fc <strtod+0x14>)
 80067f0:	6800      	ldr	r0, [r0, #0]
 80067f2:	f7ff ba21 	b.w	8005c38 <_strtod_l>
 80067f6:	bf00      	nop
 80067f8:	20000188 	.word	0x20000188
 80067fc:	2000001c 	.word	0x2000001c

08006800 <__cvt>:
 8006800:	2b00      	cmp	r3, #0
 8006802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006806:	461d      	mov	r5, r3
 8006808:	bfbb      	ittet	lt
 800680a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800680e:	461d      	movlt	r5, r3
 8006810:	2300      	movge	r3, #0
 8006812:	232d      	movlt	r3, #45	@ 0x2d
 8006814:	b088      	sub	sp, #32
 8006816:	4614      	mov	r4, r2
 8006818:	bfb8      	it	lt
 800681a:	4614      	movlt	r4, r2
 800681c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800681e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006820:	7013      	strb	r3, [r2, #0]
 8006822:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006824:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006828:	f023 0820 	bic.w	r8, r3, #32
 800682c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006830:	d005      	beq.n	800683e <__cvt+0x3e>
 8006832:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006836:	d100      	bne.n	800683a <__cvt+0x3a>
 8006838:	3601      	adds	r6, #1
 800683a:	2302      	movs	r3, #2
 800683c:	e000      	b.n	8006840 <__cvt+0x40>
 800683e:	2303      	movs	r3, #3
 8006840:	aa07      	add	r2, sp, #28
 8006842:	9204      	str	r2, [sp, #16]
 8006844:	aa06      	add	r2, sp, #24
 8006846:	e9cd a202 	strd	sl, r2, [sp, #8]
 800684a:	e9cd 3600 	strd	r3, r6, [sp]
 800684e:	4622      	mov	r2, r4
 8006850:	462b      	mov	r3, r5
 8006852:	f000 ff85 	bl	8007760 <_dtoa_r>
 8006856:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800685a:	4607      	mov	r7, r0
 800685c:	d119      	bne.n	8006892 <__cvt+0x92>
 800685e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006860:	07db      	lsls	r3, r3, #31
 8006862:	d50e      	bpl.n	8006882 <__cvt+0x82>
 8006864:	eb00 0906 	add.w	r9, r0, r6
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	f7fa f958 	bl	8000b24 <__aeabi_dcmpeq>
 8006874:	b108      	cbz	r0, 800687a <__cvt+0x7a>
 8006876:	f8cd 901c 	str.w	r9, [sp, #28]
 800687a:	2230      	movs	r2, #48	@ 0x30
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	454b      	cmp	r3, r9
 8006880:	d31e      	bcc.n	80068c0 <__cvt+0xc0>
 8006882:	4638      	mov	r0, r7
 8006884:	9b07      	ldr	r3, [sp, #28]
 8006886:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006888:	1bdb      	subs	r3, r3, r7
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	b008      	add	sp, #32
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006896:	eb00 0906 	add.w	r9, r0, r6
 800689a:	d1e5      	bne.n	8006868 <__cvt+0x68>
 800689c:	7803      	ldrb	r3, [r0, #0]
 800689e:	2b30      	cmp	r3, #48	@ 0x30
 80068a0:	d10a      	bne.n	80068b8 <__cvt+0xb8>
 80068a2:	2200      	movs	r2, #0
 80068a4:	2300      	movs	r3, #0
 80068a6:	4620      	mov	r0, r4
 80068a8:	4629      	mov	r1, r5
 80068aa:	f7fa f93b 	bl	8000b24 <__aeabi_dcmpeq>
 80068ae:	b918      	cbnz	r0, 80068b8 <__cvt+0xb8>
 80068b0:	f1c6 0601 	rsb	r6, r6, #1
 80068b4:	f8ca 6000 	str.w	r6, [sl]
 80068b8:	f8da 3000 	ldr.w	r3, [sl]
 80068bc:	4499      	add	r9, r3
 80068be:	e7d3      	b.n	8006868 <__cvt+0x68>
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	9107      	str	r1, [sp, #28]
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e7d9      	b.n	800687c <__cvt+0x7c>

080068c8 <__exponent>:
 80068c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ca:	2900      	cmp	r1, #0
 80068cc:	bfb6      	itet	lt
 80068ce:	232d      	movlt	r3, #45	@ 0x2d
 80068d0:	232b      	movge	r3, #43	@ 0x2b
 80068d2:	4249      	neglt	r1, r1
 80068d4:	2909      	cmp	r1, #9
 80068d6:	7002      	strb	r2, [r0, #0]
 80068d8:	7043      	strb	r3, [r0, #1]
 80068da:	dd29      	ble.n	8006930 <__exponent+0x68>
 80068dc:	f10d 0307 	add.w	r3, sp, #7
 80068e0:	461d      	mov	r5, r3
 80068e2:	270a      	movs	r7, #10
 80068e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80068e8:	461a      	mov	r2, r3
 80068ea:	fb07 1416 	mls	r4, r7, r6, r1
 80068ee:	3430      	adds	r4, #48	@ 0x30
 80068f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80068f4:	460c      	mov	r4, r1
 80068f6:	2c63      	cmp	r4, #99	@ 0x63
 80068f8:	4631      	mov	r1, r6
 80068fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80068fe:	dcf1      	bgt.n	80068e4 <__exponent+0x1c>
 8006900:	3130      	adds	r1, #48	@ 0x30
 8006902:	1e94      	subs	r4, r2, #2
 8006904:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006908:	4623      	mov	r3, r4
 800690a:	1c41      	adds	r1, r0, #1
 800690c:	42ab      	cmp	r3, r5
 800690e:	d30a      	bcc.n	8006926 <__exponent+0x5e>
 8006910:	f10d 0309 	add.w	r3, sp, #9
 8006914:	1a9b      	subs	r3, r3, r2
 8006916:	42ac      	cmp	r4, r5
 8006918:	bf88      	it	hi
 800691a:	2300      	movhi	r3, #0
 800691c:	3302      	adds	r3, #2
 800691e:	4403      	add	r3, r0
 8006920:	1a18      	subs	r0, r3, r0
 8006922:	b003      	add	sp, #12
 8006924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006926:	f813 6b01 	ldrb.w	r6, [r3], #1
 800692a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800692e:	e7ed      	b.n	800690c <__exponent+0x44>
 8006930:	2330      	movs	r3, #48	@ 0x30
 8006932:	3130      	adds	r1, #48	@ 0x30
 8006934:	7083      	strb	r3, [r0, #2]
 8006936:	70c1      	strb	r1, [r0, #3]
 8006938:	1d03      	adds	r3, r0, #4
 800693a:	e7f1      	b.n	8006920 <__exponent+0x58>

0800693c <_printf_float>:
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	b091      	sub	sp, #68	@ 0x44
 8006942:	460c      	mov	r4, r1
 8006944:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006948:	4616      	mov	r6, r2
 800694a:	461f      	mov	r7, r3
 800694c:	4605      	mov	r5, r0
 800694e:	f000 fdd5 	bl	80074fc <_localeconv_r>
 8006952:	6803      	ldr	r3, [r0, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	9308      	str	r3, [sp, #32]
 8006958:	f7f9 fc04 	bl	8000164 <strlen>
 800695c:	2300      	movs	r3, #0
 800695e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006960:	f8d8 3000 	ldr.w	r3, [r8]
 8006964:	9009      	str	r0, [sp, #36]	@ 0x24
 8006966:	3307      	adds	r3, #7
 8006968:	f023 0307 	bic.w	r3, r3, #7
 800696c:	f103 0208 	add.w	r2, r3, #8
 8006970:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006974:	f8d4 b000 	ldr.w	fp, [r4]
 8006978:	f8c8 2000 	str.w	r2, [r8]
 800697c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006980:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006984:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006986:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006992:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006996:	4b9c      	ldr	r3, [pc, #624]	@ (8006c08 <_printf_float+0x2cc>)
 8006998:	f7fa f8f6 	bl	8000b88 <__aeabi_dcmpun>
 800699c:	bb70      	cbnz	r0, 80069fc <_printf_float+0xc0>
 800699e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295
 80069a6:	4b98      	ldr	r3, [pc, #608]	@ (8006c08 <_printf_float+0x2cc>)
 80069a8:	f7fa f8d0 	bl	8000b4c <__aeabi_dcmple>
 80069ac:	bb30      	cbnz	r0, 80069fc <_printf_float+0xc0>
 80069ae:	2200      	movs	r2, #0
 80069b0:	2300      	movs	r3, #0
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7fa f8bf 	bl	8000b38 <__aeabi_dcmplt>
 80069ba:	b110      	cbz	r0, 80069c2 <_printf_float+0x86>
 80069bc:	232d      	movs	r3, #45	@ 0x2d
 80069be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c2:	4a92      	ldr	r2, [pc, #584]	@ (8006c0c <_printf_float+0x2d0>)
 80069c4:	4b92      	ldr	r3, [pc, #584]	@ (8006c10 <_printf_float+0x2d4>)
 80069c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069ca:	bf8c      	ite	hi
 80069cc:	4690      	movhi	r8, r2
 80069ce:	4698      	movls	r8, r3
 80069d0:	2303      	movs	r3, #3
 80069d2:	f04f 0900 	mov.w	r9, #0
 80069d6:	6123      	str	r3, [r4, #16]
 80069d8:	f02b 0304 	bic.w	r3, fp, #4
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	4633      	mov	r3, r6
 80069e0:	4621      	mov	r1, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	9700      	str	r7, [sp, #0]
 80069e6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80069e8:	f000 f9d4 	bl	8006d94 <_printf_common>
 80069ec:	3001      	adds	r0, #1
 80069ee:	f040 8090 	bne.w	8006b12 <_printf_float+0x1d6>
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	b011      	add	sp, #68	@ 0x44
 80069f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	4649      	mov	r1, r9
 8006a04:	f7fa f8c0 	bl	8000b88 <__aeabi_dcmpun>
 8006a08:	b148      	cbz	r0, 8006a1e <_printf_float+0xe2>
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	bfb8      	it	lt
 8006a10:	232d      	movlt	r3, #45	@ 0x2d
 8006a12:	4a80      	ldr	r2, [pc, #512]	@ (8006c14 <_printf_float+0x2d8>)
 8006a14:	bfb8      	it	lt
 8006a16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c18 <_printf_float+0x2dc>)
 8006a1c:	e7d3      	b.n	80069c6 <_printf_float+0x8a>
 8006a1e:	6863      	ldr	r3, [r4, #4]
 8006a20:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	d13f      	bne.n	8006aa8 <_printf_float+0x16c>
 8006a28:	2306      	movs	r3, #6
 8006a2a:	6063      	str	r3, [r4, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	9206      	str	r2, [sp, #24]
 8006a36:	aa0e      	add	r2, sp, #56	@ 0x38
 8006a38:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006a3c:	aa0d      	add	r2, sp, #52	@ 0x34
 8006a3e:	9203      	str	r2, [sp, #12]
 8006a40:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006a44:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a48:	6863      	ldr	r3, [r4, #4]
 8006a4a:	4642      	mov	r2, r8
 8006a4c:	9300      	str	r3, [sp, #0]
 8006a4e:	4628      	mov	r0, r5
 8006a50:	464b      	mov	r3, r9
 8006a52:	910a      	str	r1, [sp, #40]	@ 0x28
 8006a54:	f7ff fed4 	bl	8006800 <__cvt>
 8006a58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a5a:	4680      	mov	r8, r0
 8006a5c:	2947      	cmp	r1, #71	@ 0x47
 8006a5e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006a60:	d128      	bne.n	8006ab4 <_printf_float+0x178>
 8006a62:	1cc8      	adds	r0, r1, #3
 8006a64:	db02      	blt.n	8006a6c <_printf_float+0x130>
 8006a66:	6863      	ldr	r3, [r4, #4]
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	dd40      	ble.n	8006aee <_printf_float+0x1b2>
 8006a6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a70:	fa5f fa8a 	uxtb.w	sl, sl
 8006a74:	4652      	mov	r2, sl
 8006a76:	3901      	subs	r1, #1
 8006a78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006a7c:	910d      	str	r1, [sp, #52]	@ 0x34
 8006a7e:	f7ff ff23 	bl	80068c8 <__exponent>
 8006a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a84:	4681      	mov	r9, r0
 8006a86:	1813      	adds	r3, r2, r0
 8006a88:	2a01      	cmp	r2, #1
 8006a8a:	6123      	str	r3, [r4, #16]
 8006a8c:	dc02      	bgt.n	8006a94 <_printf_float+0x158>
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	07d2      	lsls	r2, r2, #31
 8006a92:	d501      	bpl.n	8006a98 <_printf_float+0x15c>
 8006a94:	3301      	adds	r3, #1
 8006a96:	6123      	str	r3, [r4, #16]
 8006a98:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d09e      	beq.n	80069de <_printf_float+0xa2>
 8006aa0:	232d      	movs	r3, #45	@ 0x2d
 8006aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa6:	e79a      	b.n	80069de <_printf_float+0xa2>
 8006aa8:	2947      	cmp	r1, #71	@ 0x47
 8006aaa:	d1bf      	bne.n	8006a2c <_printf_float+0xf0>
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1bd      	bne.n	8006a2c <_printf_float+0xf0>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e7ba      	b.n	8006a2a <_printf_float+0xee>
 8006ab4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ab8:	d9dc      	bls.n	8006a74 <_printf_float+0x138>
 8006aba:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006abe:	d118      	bne.n	8006af2 <_printf_float+0x1b6>
 8006ac0:	2900      	cmp	r1, #0
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	dd0b      	ble.n	8006ade <_printf_float+0x1a2>
 8006ac6:	6121      	str	r1, [r4, #16]
 8006ac8:	b913      	cbnz	r3, 8006ad0 <_printf_float+0x194>
 8006aca:	6822      	ldr	r2, [r4, #0]
 8006acc:	07d0      	lsls	r0, r2, #31
 8006ace:	d502      	bpl.n	8006ad6 <_printf_float+0x19a>
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	440b      	add	r3, r1
 8006ad4:	6123      	str	r3, [r4, #16]
 8006ad6:	f04f 0900 	mov.w	r9, #0
 8006ada:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006adc:	e7dc      	b.n	8006a98 <_printf_float+0x15c>
 8006ade:	b913      	cbnz	r3, 8006ae6 <_printf_float+0x1aa>
 8006ae0:	6822      	ldr	r2, [r4, #0]
 8006ae2:	07d2      	lsls	r2, r2, #31
 8006ae4:	d501      	bpl.n	8006aea <_printf_float+0x1ae>
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	e7f4      	b.n	8006ad4 <_printf_float+0x198>
 8006aea:	2301      	movs	r3, #1
 8006aec:	e7f2      	b.n	8006ad4 <_printf_float+0x198>
 8006aee:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006af4:	4299      	cmp	r1, r3
 8006af6:	db05      	blt.n	8006b04 <_printf_float+0x1c8>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	6121      	str	r1, [r4, #16]
 8006afc:	07d8      	lsls	r0, r3, #31
 8006afe:	d5ea      	bpl.n	8006ad6 <_printf_float+0x19a>
 8006b00:	1c4b      	adds	r3, r1, #1
 8006b02:	e7e7      	b.n	8006ad4 <_printf_float+0x198>
 8006b04:	2900      	cmp	r1, #0
 8006b06:	bfcc      	ite	gt
 8006b08:	2201      	movgt	r2, #1
 8006b0a:	f1c1 0202 	rsble	r2, r1, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	e7e0      	b.n	8006ad4 <_printf_float+0x198>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	055a      	lsls	r2, r3, #21
 8006b16:	d407      	bmi.n	8006b28 <_printf_float+0x1ec>
 8006b18:	6923      	ldr	r3, [r4, #16]
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	4631      	mov	r1, r6
 8006b1e:	4628      	mov	r0, r5
 8006b20:	47b8      	blx	r7
 8006b22:	3001      	adds	r0, #1
 8006b24:	d12b      	bne.n	8006b7e <_printf_float+0x242>
 8006b26:	e764      	b.n	80069f2 <_printf_float+0xb6>
 8006b28:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b2c:	f240 80dc 	bls.w	8006ce8 <_printf_float+0x3ac>
 8006b30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b34:	2200      	movs	r2, #0
 8006b36:	2300      	movs	r3, #0
 8006b38:	f7f9 fff4 	bl	8000b24 <__aeabi_dcmpeq>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d033      	beq.n	8006ba8 <_printf_float+0x26c>
 8006b40:	2301      	movs	r3, #1
 8006b42:	4631      	mov	r1, r6
 8006b44:	4628      	mov	r0, r5
 8006b46:	4a35      	ldr	r2, [pc, #212]	@ (8006c1c <_printf_float+0x2e0>)
 8006b48:	47b8      	blx	r7
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	f43f af51 	beq.w	80069f2 <_printf_float+0xb6>
 8006b50:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006b54:	4543      	cmp	r3, r8
 8006b56:	db02      	blt.n	8006b5e <_printf_float+0x222>
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	07d8      	lsls	r0, r3, #31
 8006b5c:	d50f      	bpl.n	8006b7e <_printf_float+0x242>
 8006b5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f af42 	beq.w	80069f2 <_printf_float+0xb6>
 8006b6e:	f04f 0900 	mov.w	r9, #0
 8006b72:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b76:	f104 0a1a 	add.w	sl, r4, #26
 8006b7a:	45c8      	cmp	r8, r9
 8006b7c:	dc09      	bgt.n	8006b92 <_printf_float+0x256>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	079b      	lsls	r3, r3, #30
 8006b82:	f100 8102 	bmi.w	8006d8a <_printf_float+0x44e>
 8006b86:	68e0      	ldr	r0, [r4, #12]
 8006b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	bfb8      	it	lt
 8006b8e:	4618      	movlt	r0, r3
 8006b90:	e731      	b.n	80069f6 <_printf_float+0xba>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4652      	mov	r2, sl
 8006b96:	4631      	mov	r1, r6
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b8      	blx	r7
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	f43f af28 	beq.w	80069f2 <_printf_float+0xb6>
 8006ba2:	f109 0901 	add.w	r9, r9, #1
 8006ba6:	e7e8      	b.n	8006b7a <_printf_float+0x23e>
 8006ba8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	dc38      	bgt.n	8006c20 <_printf_float+0x2e4>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	4a19      	ldr	r2, [pc, #100]	@ (8006c1c <_printf_float+0x2e0>)
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f43f af1a 	beq.w	80069f2 <_printf_float+0xb6>
 8006bbe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006bc2:	ea59 0303 	orrs.w	r3, r9, r3
 8006bc6:	d102      	bne.n	8006bce <_printf_float+0x292>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	07d9      	lsls	r1, r3, #31
 8006bcc:	d5d7      	bpl.n	8006b7e <_printf_float+0x242>
 8006bce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bd2:	4631      	mov	r1, r6
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	47b8      	blx	r7
 8006bd8:	3001      	adds	r0, #1
 8006bda:	f43f af0a 	beq.w	80069f2 <_printf_float+0xb6>
 8006bde:	f04f 0a00 	mov.w	sl, #0
 8006be2:	f104 0b1a 	add.w	fp, r4, #26
 8006be6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006be8:	425b      	negs	r3, r3
 8006bea:	4553      	cmp	r3, sl
 8006bec:	dc01      	bgt.n	8006bf2 <_printf_float+0x2b6>
 8006bee:	464b      	mov	r3, r9
 8006bf0:	e793      	b.n	8006b1a <_printf_float+0x1de>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	465a      	mov	r2, fp
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f aef8 	beq.w	80069f2 <_printf_float+0xb6>
 8006c02:	f10a 0a01 	add.w	sl, sl, #1
 8006c06:	e7ee      	b.n	8006be6 <_printf_float+0x2aa>
 8006c08:	7fefffff 	.word	0x7fefffff
 8006c0c:	08009a46 	.word	0x08009a46
 8006c10:	08009a42 	.word	0x08009a42
 8006c14:	08009a4e 	.word	0x08009a4e
 8006c18:	08009a4a 	.word	0x08009a4a
 8006c1c:	08009a52 	.word	0x08009a52
 8006c20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c22:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c26:	4553      	cmp	r3, sl
 8006c28:	bfa8      	it	ge
 8006c2a:	4653      	movge	r3, sl
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	4699      	mov	r9, r3
 8006c30:	dc36      	bgt.n	8006ca0 <_printf_float+0x364>
 8006c32:	f04f 0b00 	mov.w	fp, #0
 8006c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c3a:	f104 021a 	add.w	r2, r4, #26
 8006c3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c42:	eba3 0309 	sub.w	r3, r3, r9
 8006c46:	455b      	cmp	r3, fp
 8006c48:	dc31      	bgt.n	8006cae <_printf_float+0x372>
 8006c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c4c:	459a      	cmp	sl, r3
 8006c4e:	dc3a      	bgt.n	8006cc6 <_printf_float+0x38a>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	07da      	lsls	r2, r3, #31
 8006c54:	d437      	bmi.n	8006cc6 <_printf_float+0x38a>
 8006c56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c58:	ebaa 0903 	sub.w	r9, sl, r3
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c5e:	ebaa 0303 	sub.w	r3, sl, r3
 8006c62:	4599      	cmp	r9, r3
 8006c64:	bfa8      	it	ge
 8006c66:	4699      	movge	r9, r3
 8006c68:	f1b9 0f00 	cmp.w	r9, #0
 8006c6c:	dc33      	bgt.n	8006cd6 <_printf_float+0x39a>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c76:	f104 0b1a 	add.w	fp, r4, #26
 8006c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c7c:	ebaa 0303 	sub.w	r3, sl, r3
 8006c80:	eba3 0309 	sub.w	r3, r3, r9
 8006c84:	4543      	cmp	r3, r8
 8006c86:	f77f af7a 	ble.w	8006b7e <_printf_float+0x242>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	465a      	mov	r2, fp
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	f43f aeac 	beq.w	80069f2 <_printf_float+0xb6>
 8006c9a:	f108 0801 	add.w	r8, r8, #1
 8006c9e:	e7ec      	b.n	8006c7a <_printf_float+0x33e>
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	d1c2      	bne.n	8006c32 <_printf_float+0x2f6>
 8006cac:	e6a1      	b.n	80069f2 <_printf_float+0xb6>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	920a      	str	r2, [sp, #40]	@ 0x28
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f43f ae9a 	beq.w	80069f2 <_printf_float+0xb6>
 8006cbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cc0:	f10b 0b01 	add.w	fp, fp, #1
 8006cc4:	e7bb      	b.n	8006c3e <_printf_float+0x302>
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d1c0      	bne.n	8006c56 <_printf_float+0x31a>
 8006cd4:	e68d      	b.n	80069f2 <_printf_float+0xb6>
 8006cd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cd8:	464b      	mov	r3, r9
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	4442      	add	r2, r8
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d1c3      	bne.n	8006c6e <_printf_float+0x332>
 8006ce6:	e684      	b.n	80069f2 <_printf_float+0xb6>
 8006ce8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006cec:	f1ba 0f01 	cmp.w	sl, #1
 8006cf0:	dc01      	bgt.n	8006cf6 <_printf_float+0x3ba>
 8006cf2:	07db      	lsls	r3, r3, #31
 8006cf4:	d536      	bpl.n	8006d64 <_printf_float+0x428>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	f43f ae76 	beq.w	80069f2 <_printf_float+0xb6>
 8006d06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f ae6e 	beq.w	80069f2 <_printf_float+0xb6>
 8006d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d22:	f7f9 feff 	bl	8000b24 <__aeabi_dcmpeq>
 8006d26:	b9c0      	cbnz	r0, 8006d5a <_printf_float+0x41e>
 8006d28:	4653      	mov	r3, sl
 8006d2a:	f108 0201 	add.w	r2, r8, #1
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	d10c      	bne.n	8006d52 <_printf_float+0x416>
 8006d38:	e65b      	b.n	80069f2 <_printf_float+0xb6>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	465a      	mov	r2, fp
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae54 	beq.w	80069f2 <_printf_float+0xb6>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	45d0      	cmp	r8, sl
 8006d50:	dbf3      	blt.n	8006d3a <_printf_float+0x3fe>
 8006d52:	464b      	mov	r3, r9
 8006d54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d58:	e6e0      	b.n	8006b1c <_printf_float+0x1e0>
 8006d5a:	f04f 0800 	mov.w	r8, #0
 8006d5e:	f104 0b1a 	add.w	fp, r4, #26
 8006d62:	e7f4      	b.n	8006d4e <_printf_float+0x412>
 8006d64:	2301      	movs	r3, #1
 8006d66:	4642      	mov	r2, r8
 8006d68:	e7e1      	b.n	8006d2e <_printf_float+0x3f2>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	464a      	mov	r2, r9
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	f43f ae3c 	beq.w	80069f2 <_printf_float+0xb6>
 8006d7a:	f108 0801 	add.w	r8, r8, #1
 8006d7e:	68e3      	ldr	r3, [r4, #12]
 8006d80:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006d82:	1a5b      	subs	r3, r3, r1
 8006d84:	4543      	cmp	r3, r8
 8006d86:	dcf0      	bgt.n	8006d6a <_printf_float+0x42e>
 8006d88:	e6fd      	b.n	8006b86 <_printf_float+0x24a>
 8006d8a:	f04f 0800 	mov.w	r8, #0
 8006d8e:	f104 0919 	add.w	r9, r4, #25
 8006d92:	e7f4      	b.n	8006d7e <_printf_float+0x442>

08006d94 <_printf_common>:
 8006d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d98:	4616      	mov	r6, r2
 8006d9a:	4698      	mov	r8, r3
 8006d9c:	688a      	ldr	r2, [r1, #8]
 8006d9e:	690b      	ldr	r3, [r1, #16]
 8006da0:	4607      	mov	r7, r0
 8006da2:	4293      	cmp	r3, r2
 8006da4:	bfb8      	it	lt
 8006da6:	4613      	movlt	r3, r2
 8006da8:	6033      	str	r3, [r6, #0]
 8006daa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dae:	460c      	mov	r4, r1
 8006db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006db4:	b10a      	cbz	r2, 8006dba <_printf_common+0x26>
 8006db6:	3301      	adds	r3, #1
 8006db8:	6033      	str	r3, [r6, #0]
 8006dba:	6823      	ldr	r3, [r4, #0]
 8006dbc:	0699      	lsls	r1, r3, #26
 8006dbe:	bf42      	ittt	mi
 8006dc0:	6833      	ldrmi	r3, [r6, #0]
 8006dc2:	3302      	addmi	r3, #2
 8006dc4:	6033      	strmi	r3, [r6, #0]
 8006dc6:	6825      	ldr	r5, [r4, #0]
 8006dc8:	f015 0506 	ands.w	r5, r5, #6
 8006dcc:	d106      	bne.n	8006ddc <_printf_common+0x48>
 8006dce:	f104 0a19 	add.w	sl, r4, #25
 8006dd2:	68e3      	ldr	r3, [r4, #12]
 8006dd4:	6832      	ldr	r2, [r6, #0]
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dc2b      	bgt.n	8006e34 <_printf_common+0xa0>
 8006ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	3b00      	subs	r3, #0
 8006de4:	bf18      	it	ne
 8006de6:	2301      	movne	r3, #1
 8006de8:	0692      	lsls	r2, r2, #26
 8006dea:	d430      	bmi.n	8006e4e <_printf_common+0xba>
 8006dec:	4641      	mov	r1, r8
 8006dee:	4638      	mov	r0, r7
 8006df0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006df4:	47c8      	blx	r9
 8006df6:	3001      	adds	r0, #1
 8006df8:	d023      	beq.n	8006e42 <_printf_common+0xae>
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	6922      	ldr	r2, [r4, #16]
 8006dfe:	f003 0306 	and.w	r3, r3, #6
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	bf14      	ite	ne
 8006e06:	2500      	movne	r5, #0
 8006e08:	6833      	ldreq	r3, [r6, #0]
 8006e0a:	f04f 0600 	mov.w	r6, #0
 8006e0e:	bf08      	it	eq
 8006e10:	68e5      	ldreq	r5, [r4, #12]
 8006e12:	f104 041a 	add.w	r4, r4, #26
 8006e16:	bf08      	it	eq
 8006e18:	1aed      	subeq	r5, r5, r3
 8006e1a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e1e:	bf08      	it	eq
 8006e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e24:	4293      	cmp	r3, r2
 8006e26:	bfc4      	itt	gt
 8006e28:	1a9b      	subgt	r3, r3, r2
 8006e2a:	18ed      	addgt	r5, r5, r3
 8006e2c:	42b5      	cmp	r5, r6
 8006e2e:	d11a      	bne.n	8006e66 <_printf_common+0xd2>
 8006e30:	2000      	movs	r0, #0
 8006e32:	e008      	b.n	8006e46 <_printf_common+0xb2>
 8006e34:	2301      	movs	r3, #1
 8006e36:	4652      	mov	r2, sl
 8006e38:	4641      	mov	r1, r8
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	47c8      	blx	r9
 8006e3e:	3001      	adds	r0, #1
 8006e40:	d103      	bne.n	8006e4a <_printf_common+0xb6>
 8006e42:	f04f 30ff 	mov.w	r0, #4294967295
 8006e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e4a:	3501      	adds	r5, #1
 8006e4c:	e7c1      	b.n	8006dd2 <_printf_common+0x3e>
 8006e4e:	2030      	movs	r0, #48	@ 0x30
 8006e50:	18e1      	adds	r1, r4, r3
 8006e52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e5c:	4422      	add	r2, r4
 8006e5e:	3302      	adds	r3, #2
 8006e60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e64:	e7c2      	b.n	8006dec <_printf_common+0x58>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4622      	mov	r2, r4
 8006e6a:	4641      	mov	r1, r8
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	47c8      	blx	r9
 8006e70:	3001      	adds	r0, #1
 8006e72:	d0e6      	beq.n	8006e42 <_printf_common+0xae>
 8006e74:	3601      	adds	r6, #1
 8006e76:	e7d9      	b.n	8006e2c <_printf_common+0x98>

08006e78 <_printf_i>:
 8006e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e7c:	7e0f      	ldrb	r7, [r1, #24]
 8006e7e:	4691      	mov	r9, r2
 8006e80:	2f78      	cmp	r7, #120	@ 0x78
 8006e82:	4680      	mov	r8, r0
 8006e84:	460c      	mov	r4, r1
 8006e86:	469a      	mov	sl, r3
 8006e88:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e8e:	d807      	bhi.n	8006ea0 <_printf_i+0x28>
 8006e90:	2f62      	cmp	r7, #98	@ 0x62
 8006e92:	d80a      	bhi.n	8006eaa <_printf_i+0x32>
 8006e94:	2f00      	cmp	r7, #0
 8006e96:	f000 80d1 	beq.w	800703c <_printf_i+0x1c4>
 8006e9a:	2f58      	cmp	r7, #88	@ 0x58
 8006e9c:	f000 80b8 	beq.w	8007010 <_printf_i+0x198>
 8006ea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ea8:	e03a      	b.n	8006f20 <_printf_i+0xa8>
 8006eaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eae:	2b15      	cmp	r3, #21
 8006eb0:	d8f6      	bhi.n	8006ea0 <_printf_i+0x28>
 8006eb2:	a101      	add	r1, pc, #4	@ (adr r1, 8006eb8 <_printf_i+0x40>)
 8006eb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eb8:	08006f11 	.word	0x08006f11
 8006ebc:	08006f25 	.word	0x08006f25
 8006ec0:	08006ea1 	.word	0x08006ea1
 8006ec4:	08006ea1 	.word	0x08006ea1
 8006ec8:	08006ea1 	.word	0x08006ea1
 8006ecc:	08006ea1 	.word	0x08006ea1
 8006ed0:	08006f25 	.word	0x08006f25
 8006ed4:	08006ea1 	.word	0x08006ea1
 8006ed8:	08006ea1 	.word	0x08006ea1
 8006edc:	08006ea1 	.word	0x08006ea1
 8006ee0:	08006ea1 	.word	0x08006ea1
 8006ee4:	08007023 	.word	0x08007023
 8006ee8:	08006f4f 	.word	0x08006f4f
 8006eec:	08006fdd 	.word	0x08006fdd
 8006ef0:	08006ea1 	.word	0x08006ea1
 8006ef4:	08006ea1 	.word	0x08006ea1
 8006ef8:	08007045 	.word	0x08007045
 8006efc:	08006ea1 	.word	0x08006ea1
 8006f00:	08006f4f 	.word	0x08006f4f
 8006f04:	08006ea1 	.word	0x08006ea1
 8006f08:	08006ea1 	.word	0x08006ea1
 8006f0c:	08006fe5 	.word	0x08006fe5
 8006f10:	6833      	ldr	r3, [r6, #0]
 8006f12:	1d1a      	adds	r2, r3, #4
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6032      	str	r2, [r6, #0]
 8006f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f20:	2301      	movs	r3, #1
 8006f22:	e09c      	b.n	800705e <_printf_i+0x1e6>
 8006f24:	6833      	ldr	r3, [r6, #0]
 8006f26:	6820      	ldr	r0, [r4, #0]
 8006f28:	1d19      	adds	r1, r3, #4
 8006f2a:	6031      	str	r1, [r6, #0]
 8006f2c:	0606      	lsls	r6, r0, #24
 8006f2e:	d501      	bpl.n	8006f34 <_printf_i+0xbc>
 8006f30:	681d      	ldr	r5, [r3, #0]
 8006f32:	e003      	b.n	8006f3c <_printf_i+0xc4>
 8006f34:	0645      	lsls	r5, r0, #25
 8006f36:	d5fb      	bpl.n	8006f30 <_printf_i+0xb8>
 8006f38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f3c:	2d00      	cmp	r5, #0
 8006f3e:	da03      	bge.n	8006f48 <_printf_i+0xd0>
 8006f40:	232d      	movs	r3, #45	@ 0x2d
 8006f42:	426d      	negs	r5, r5
 8006f44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f48:	230a      	movs	r3, #10
 8006f4a:	4858      	ldr	r0, [pc, #352]	@ (80070ac <_printf_i+0x234>)
 8006f4c:	e011      	b.n	8006f72 <_printf_i+0xfa>
 8006f4e:	6821      	ldr	r1, [r4, #0]
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	0608      	lsls	r0, r1, #24
 8006f54:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f58:	d402      	bmi.n	8006f60 <_printf_i+0xe8>
 8006f5a:	0649      	lsls	r1, r1, #25
 8006f5c:	bf48      	it	mi
 8006f5e:	b2ad      	uxthmi	r5, r5
 8006f60:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f62:	6033      	str	r3, [r6, #0]
 8006f64:	bf14      	ite	ne
 8006f66:	230a      	movne	r3, #10
 8006f68:	2308      	moveq	r3, #8
 8006f6a:	4850      	ldr	r0, [pc, #320]	@ (80070ac <_printf_i+0x234>)
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f72:	6866      	ldr	r6, [r4, #4]
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	60a6      	str	r6, [r4, #8]
 8006f78:	db05      	blt.n	8006f86 <_printf_i+0x10e>
 8006f7a:	6821      	ldr	r1, [r4, #0]
 8006f7c:	432e      	orrs	r6, r5
 8006f7e:	f021 0104 	bic.w	r1, r1, #4
 8006f82:	6021      	str	r1, [r4, #0]
 8006f84:	d04b      	beq.n	800701e <_printf_i+0x1a6>
 8006f86:	4616      	mov	r6, r2
 8006f88:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f8c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f90:	5dc7      	ldrb	r7, [r0, r7]
 8006f92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f96:	462f      	mov	r7, r5
 8006f98:	42bb      	cmp	r3, r7
 8006f9a:	460d      	mov	r5, r1
 8006f9c:	d9f4      	bls.n	8006f88 <_printf_i+0x110>
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d10b      	bne.n	8006fba <_printf_i+0x142>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	07df      	lsls	r7, r3, #31
 8006fa6:	d508      	bpl.n	8006fba <_printf_i+0x142>
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	6861      	ldr	r1, [r4, #4]
 8006fac:	4299      	cmp	r1, r3
 8006fae:	bfde      	ittt	le
 8006fb0:	2330      	movle	r3, #48	@ 0x30
 8006fb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fba:	1b92      	subs	r2, r2, r6
 8006fbc:	6122      	str	r2, [r4, #16]
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	4621      	mov	r1, r4
 8006fc2:	4640      	mov	r0, r8
 8006fc4:	f8cd a000 	str.w	sl, [sp]
 8006fc8:	aa03      	add	r2, sp, #12
 8006fca:	f7ff fee3 	bl	8006d94 <_printf_common>
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d14a      	bne.n	8007068 <_printf_i+0x1f0>
 8006fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd6:	b004      	add	sp, #16
 8006fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fdc:	6823      	ldr	r3, [r4, #0]
 8006fde:	f043 0320 	orr.w	r3, r3, #32
 8006fe2:	6023      	str	r3, [r4, #0]
 8006fe4:	2778      	movs	r7, #120	@ 0x78
 8006fe6:	4832      	ldr	r0, [pc, #200]	@ (80070b0 <_printf_i+0x238>)
 8006fe8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	6831      	ldr	r1, [r6, #0]
 8006ff0:	061f      	lsls	r7, r3, #24
 8006ff2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ff6:	d402      	bmi.n	8006ffe <_printf_i+0x186>
 8006ff8:	065f      	lsls	r7, r3, #25
 8006ffa:	bf48      	it	mi
 8006ffc:	b2ad      	uxthmi	r5, r5
 8006ffe:	6031      	str	r1, [r6, #0]
 8007000:	07d9      	lsls	r1, r3, #31
 8007002:	bf44      	itt	mi
 8007004:	f043 0320 	orrmi.w	r3, r3, #32
 8007008:	6023      	strmi	r3, [r4, #0]
 800700a:	b11d      	cbz	r5, 8007014 <_printf_i+0x19c>
 800700c:	2310      	movs	r3, #16
 800700e:	e7ad      	b.n	8006f6c <_printf_i+0xf4>
 8007010:	4826      	ldr	r0, [pc, #152]	@ (80070ac <_printf_i+0x234>)
 8007012:	e7e9      	b.n	8006fe8 <_printf_i+0x170>
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	f023 0320 	bic.w	r3, r3, #32
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	e7f6      	b.n	800700c <_printf_i+0x194>
 800701e:	4616      	mov	r6, r2
 8007020:	e7bd      	b.n	8006f9e <_printf_i+0x126>
 8007022:	6833      	ldr	r3, [r6, #0]
 8007024:	6825      	ldr	r5, [r4, #0]
 8007026:	1d18      	adds	r0, r3, #4
 8007028:	6961      	ldr	r1, [r4, #20]
 800702a:	6030      	str	r0, [r6, #0]
 800702c:	062e      	lsls	r6, r5, #24
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	d501      	bpl.n	8007036 <_printf_i+0x1be>
 8007032:	6019      	str	r1, [r3, #0]
 8007034:	e002      	b.n	800703c <_printf_i+0x1c4>
 8007036:	0668      	lsls	r0, r5, #25
 8007038:	d5fb      	bpl.n	8007032 <_printf_i+0x1ba>
 800703a:	8019      	strh	r1, [r3, #0]
 800703c:	2300      	movs	r3, #0
 800703e:	4616      	mov	r6, r2
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	e7bc      	b.n	8006fbe <_printf_i+0x146>
 8007044:	6833      	ldr	r3, [r6, #0]
 8007046:	2100      	movs	r1, #0
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	6032      	str	r2, [r6, #0]
 800704c:	681e      	ldr	r6, [r3, #0]
 800704e:	6862      	ldr	r2, [r4, #4]
 8007050:	4630      	mov	r0, r6
 8007052:	f000 fada 	bl	800760a <memchr>
 8007056:	b108      	cbz	r0, 800705c <_printf_i+0x1e4>
 8007058:	1b80      	subs	r0, r0, r6
 800705a:	6060      	str	r0, [r4, #4]
 800705c:	6863      	ldr	r3, [r4, #4]
 800705e:	6123      	str	r3, [r4, #16]
 8007060:	2300      	movs	r3, #0
 8007062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007066:	e7aa      	b.n	8006fbe <_printf_i+0x146>
 8007068:	4632      	mov	r2, r6
 800706a:	4649      	mov	r1, r9
 800706c:	4640      	mov	r0, r8
 800706e:	6923      	ldr	r3, [r4, #16]
 8007070:	47d0      	blx	sl
 8007072:	3001      	adds	r0, #1
 8007074:	d0ad      	beq.n	8006fd2 <_printf_i+0x15a>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	079b      	lsls	r3, r3, #30
 800707a:	d413      	bmi.n	80070a4 <_printf_i+0x22c>
 800707c:	68e0      	ldr	r0, [r4, #12]
 800707e:	9b03      	ldr	r3, [sp, #12]
 8007080:	4298      	cmp	r0, r3
 8007082:	bfb8      	it	lt
 8007084:	4618      	movlt	r0, r3
 8007086:	e7a6      	b.n	8006fd6 <_printf_i+0x15e>
 8007088:	2301      	movs	r3, #1
 800708a:	4632      	mov	r2, r6
 800708c:	4649      	mov	r1, r9
 800708e:	4640      	mov	r0, r8
 8007090:	47d0      	blx	sl
 8007092:	3001      	adds	r0, #1
 8007094:	d09d      	beq.n	8006fd2 <_printf_i+0x15a>
 8007096:	3501      	adds	r5, #1
 8007098:	68e3      	ldr	r3, [r4, #12]
 800709a:	9903      	ldr	r1, [sp, #12]
 800709c:	1a5b      	subs	r3, r3, r1
 800709e:	42ab      	cmp	r3, r5
 80070a0:	dcf2      	bgt.n	8007088 <_printf_i+0x210>
 80070a2:	e7eb      	b.n	800707c <_printf_i+0x204>
 80070a4:	2500      	movs	r5, #0
 80070a6:	f104 0619 	add.w	r6, r4, #25
 80070aa:	e7f5      	b.n	8007098 <_printf_i+0x220>
 80070ac:	08009a54 	.word	0x08009a54
 80070b0:	08009a65 	.word	0x08009a65

080070b4 <std>:
 80070b4:	2300      	movs	r3, #0
 80070b6:	b510      	push	{r4, lr}
 80070b8:	4604      	mov	r4, r0
 80070ba:	e9c0 3300 	strd	r3, r3, [r0]
 80070be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070c2:	6083      	str	r3, [r0, #8]
 80070c4:	8181      	strh	r1, [r0, #12]
 80070c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80070c8:	81c2      	strh	r2, [r0, #14]
 80070ca:	6183      	str	r3, [r0, #24]
 80070cc:	4619      	mov	r1, r3
 80070ce:	2208      	movs	r2, #8
 80070d0:	305c      	adds	r0, #92	@ 0x5c
 80070d2:	f000 f9f9 	bl	80074c8 <memset>
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <std+0x58>)
 80070d8:	6224      	str	r4, [r4, #32]
 80070da:	6263      	str	r3, [r4, #36]	@ 0x24
 80070dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007110 <std+0x5c>)
 80070de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007114 <std+0x60>)
 80070e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007118 <std+0x64>)
 80070e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80070e8:	4b0c      	ldr	r3, [pc, #48]	@ (800711c <std+0x68>)
 80070ea:	429c      	cmp	r4, r3
 80070ec:	d006      	beq.n	80070fc <std+0x48>
 80070ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070f2:	4294      	cmp	r4, r2
 80070f4:	d002      	beq.n	80070fc <std+0x48>
 80070f6:	33d0      	adds	r3, #208	@ 0xd0
 80070f8:	429c      	cmp	r4, r3
 80070fa:	d105      	bne.n	8007108 <std+0x54>
 80070fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007104:	f000 ba7e 	b.w	8007604 <__retarget_lock_init_recursive>
 8007108:	bd10      	pop	{r4, pc}
 800710a:	bf00      	nop
 800710c:	08007319 	.word	0x08007319
 8007110:	0800733b 	.word	0x0800733b
 8007114:	08007373 	.word	0x08007373
 8007118:	08007397 	.word	0x08007397
 800711c:	2000035c 	.word	0x2000035c

08007120 <stdio_exit_handler>:
 8007120:	4a02      	ldr	r2, [pc, #8]	@ (800712c <stdio_exit_handler+0xc>)
 8007122:	4903      	ldr	r1, [pc, #12]	@ (8007130 <stdio_exit_handler+0x10>)
 8007124:	4803      	ldr	r0, [pc, #12]	@ (8007134 <stdio_exit_handler+0x14>)
 8007126:	f000 b869 	b.w	80071fc <_fwalk_sglue>
 800712a:	bf00      	nop
 800712c:	20000010 	.word	0x20000010
 8007130:	08009709 	.word	0x08009709
 8007134:	2000018c 	.word	0x2000018c

08007138 <cleanup_stdio>:
 8007138:	6841      	ldr	r1, [r0, #4]
 800713a:	4b0c      	ldr	r3, [pc, #48]	@ (800716c <cleanup_stdio+0x34>)
 800713c:	b510      	push	{r4, lr}
 800713e:	4299      	cmp	r1, r3
 8007140:	4604      	mov	r4, r0
 8007142:	d001      	beq.n	8007148 <cleanup_stdio+0x10>
 8007144:	f002 fae0 	bl	8009708 <_fflush_r>
 8007148:	68a1      	ldr	r1, [r4, #8]
 800714a:	4b09      	ldr	r3, [pc, #36]	@ (8007170 <cleanup_stdio+0x38>)
 800714c:	4299      	cmp	r1, r3
 800714e:	d002      	beq.n	8007156 <cleanup_stdio+0x1e>
 8007150:	4620      	mov	r0, r4
 8007152:	f002 fad9 	bl	8009708 <_fflush_r>
 8007156:	68e1      	ldr	r1, [r4, #12]
 8007158:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <cleanup_stdio+0x3c>)
 800715a:	4299      	cmp	r1, r3
 800715c:	d004      	beq.n	8007168 <cleanup_stdio+0x30>
 800715e:	4620      	mov	r0, r4
 8007160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007164:	f002 bad0 	b.w	8009708 <_fflush_r>
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop
 800716c:	2000035c 	.word	0x2000035c
 8007170:	200003c4 	.word	0x200003c4
 8007174:	2000042c 	.word	0x2000042c

08007178 <global_stdio_init.part.0>:
 8007178:	b510      	push	{r4, lr}
 800717a:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <global_stdio_init.part.0+0x30>)
 800717c:	4c0b      	ldr	r4, [pc, #44]	@ (80071ac <global_stdio_init.part.0+0x34>)
 800717e:	4a0c      	ldr	r2, [pc, #48]	@ (80071b0 <global_stdio_init.part.0+0x38>)
 8007180:	4620      	mov	r0, r4
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	2104      	movs	r1, #4
 8007186:	2200      	movs	r2, #0
 8007188:	f7ff ff94 	bl	80070b4 <std>
 800718c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007190:	2201      	movs	r2, #1
 8007192:	2109      	movs	r1, #9
 8007194:	f7ff ff8e 	bl	80070b4 <std>
 8007198:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800719c:	2202      	movs	r2, #2
 800719e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a2:	2112      	movs	r1, #18
 80071a4:	f7ff bf86 	b.w	80070b4 <std>
 80071a8:	20000494 	.word	0x20000494
 80071ac:	2000035c 	.word	0x2000035c
 80071b0:	08007121 	.word	0x08007121

080071b4 <__sfp_lock_acquire>:
 80071b4:	4801      	ldr	r0, [pc, #4]	@ (80071bc <__sfp_lock_acquire+0x8>)
 80071b6:	f000 ba26 	b.w	8007606 <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	2000049d 	.word	0x2000049d

080071c0 <__sfp_lock_release>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__sfp_lock_release+0x8>)
 80071c2:	f000 ba21 	b.w	8007608 <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	2000049d 	.word	0x2000049d

080071cc <__sinit>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	4604      	mov	r4, r0
 80071d0:	f7ff fff0 	bl	80071b4 <__sfp_lock_acquire>
 80071d4:	6a23      	ldr	r3, [r4, #32]
 80071d6:	b11b      	cbz	r3, 80071e0 <__sinit+0x14>
 80071d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071dc:	f7ff bff0 	b.w	80071c0 <__sfp_lock_release>
 80071e0:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <__sinit+0x28>)
 80071e2:	6223      	str	r3, [r4, #32]
 80071e4:	4b04      	ldr	r3, [pc, #16]	@ (80071f8 <__sinit+0x2c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1f5      	bne.n	80071d8 <__sinit+0xc>
 80071ec:	f7ff ffc4 	bl	8007178 <global_stdio_init.part.0>
 80071f0:	e7f2      	b.n	80071d8 <__sinit+0xc>
 80071f2:	bf00      	nop
 80071f4:	08007139 	.word	0x08007139
 80071f8:	20000494 	.word	0x20000494

080071fc <_fwalk_sglue>:
 80071fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007200:	4607      	mov	r7, r0
 8007202:	4688      	mov	r8, r1
 8007204:	4614      	mov	r4, r2
 8007206:	2600      	movs	r6, #0
 8007208:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800720c:	f1b9 0901 	subs.w	r9, r9, #1
 8007210:	d505      	bpl.n	800721e <_fwalk_sglue+0x22>
 8007212:	6824      	ldr	r4, [r4, #0]
 8007214:	2c00      	cmp	r4, #0
 8007216:	d1f7      	bne.n	8007208 <_fwalk_sglue+0xc>
 8007218:	4630      	mov	r0, r6
 800721a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d907      	bls.n	8007234 <_fwalk_sglue+0x38>
 8007224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007228:	3301      	adds	r3, #1
 800722a:	d003      	beq.n	8007234 <_fwalk_sglue+0x38>
 800722c:	4629      	mov	r1, r5
 800722e:	4638      	mov	r0, r7
 8007230:	47c0      	blx	r8
 8007232:	4306      	orrs	r6, r0
 8007234:	3568      	adds	r5, #104	@ 0x68
 8007236:	e7e9      	b.n	800720c <_fwalk_sglue+0x10>

08007238 <iprintf>:
 8007238:	b40f      	push	{r0, r1, r2, r3}
 800723a:	b507      	push	{r0, r1, r2, lr}
 800723c:	4906      	ldr	r1, [pc, #24]	@ (8007258 <iprintf+0x20>)
 800723e:	ab04      	add	r3, sp, #16
 8007240:	6808      	ldr	r0, [r1, #0]
 8007242:	f853 2b04 	ldr.w	r2, [r3], #4
 8007246:	6881      	ldr	r1, [r0, #8]
 8007248:	9301      	str	r3, [sp, #4]
 800724a:	f002 f8c5 	bl	80093d8 <_vfiprintf_r>
 800724e:	b003      	add	sp, #12
 8007250:	f85d eb04 	ldr.w	lr, [sp], #4
 8007254:	b004      	add	sp, #16
 8007256:	4770      	bx	lr
 8007258:	20000188 	.word	0x20000188

0800725c <_puts_r>:
 800725c:	6a03      	ldr	r3, [r0, #32]
 800725e:	b570      	push	{r4, r5, r6, lr}
 8007260:	4605      	mov	r5, r0
 8007262:	460e      	mov	r6, r1
 8007264:	6884      	ldr	r4, [r0, #8]
 8007266:	b90b      	cbnz	r3, 800726c <_puts_r+0x10>
 8007268:	f7ff ffb0 	bl	80071cc <__sinit>
 800726c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800726e:	07db      	lsls	r3, r3, #31
 8007270:	d405      	bmi.n	800727e <_puts_r+0x22>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	0598      	lsls	r0, r3, #22
 8007276:	d402      	bmi.n	800727e <_puts_r+0x22>
 8007278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800727a:	f000 f9c4 	bl	8007606 <__retarget_lock_acquire_recursive>
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	0719      	lsls	r1, r3, #28
 8007282:	d502      	bpl.n	800728a <_puts_r+0x2e>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d135      	bne.n	80072f6 <_puts_r+0x9a>
 800728a:	4621      	mov	r1, r4
 800728c:	4628      	mov	r0, r5
 800728e:	f000 f8c5 	bl	800741c <__swsetup_r>
 8007292:	b380      	cbz	r0, 80072f6 <_puts_r+0x9a>
 8007294:	f04f 35ff 	mov.w	r5, #4294967295
 8007298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800729a:	07da      	lsls	r2, r3, #31
 800729c:	d405      	bmi.n	80072aa <_puts_r+0x4e>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	059b      	lsls	r3, r3, #22
 80072a2:	d402      	bmi.n	80072aa <_puts_r+0x4e>
 80072a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072a6:	f000 f9af 	bl	8007608 <__retarget_lock_release_recursive>
 80072aa:	4628      	mov	r0, r5
 80072ac:	bd70      	pop	{r4, r5, r6, pc}
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	da04      	bge.n	80072bc <_puts_r+0x60>
 80072b2:	69a2      	ldr	r2, [r4, #24]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	dc17      	bgt.n	80072e8 <_puts_r+0x8c>
 80072b8:	290a      	cmp	r1, #10
 80072ba:	d015      	beq.n	80072e8 <_puts_r+0x8c>
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	7019      	strb	r1, [r3, #0]
 80072c4:	68a3      	ldr	r3, [r4, #8]
 80072c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072ca:	3b01      	subs	r3, #1
 80072cc:	60a3      	str	r3, [r4, #8]
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d1ed      	bne.n	80072ae <_puts_r+0x52>
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	da11      	bge.n	80072fa <_puts_r+0x9e>
 80072d6:	4622      	mov	r2, r4
 80072d8:	210a      	movs	r1, #10
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 f85f 	bl	800739e <__swbuf_r>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d0d7      	beq.n	8007294 <_puts_r+0x38>
 80072e4:	250a      	movs	r5, #10
 80072e6:	e7d7      	b.n	8007298 <_puts_r+0x3c>
 80072e8:	4622      	mov	r2, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 f857 	bl	800739e <__swbuf_r>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d1e7      	bne.n	80072c4 <_puts_r+0x68>
 80072f4:	e7ce      	b.n	8007294 <_puts_r+0x38>
 80072f6:	3e01      	subs	r6, #1
 80072f8:	e7e4      	b.n	80072c4 <_puts_r+0x68>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	1c5a      	adds	r2, r3, #1
 80072fe:	6022      	str	r2, [r4, #0]
 8007300:	220a      	movs	r2, #10
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e7ee      	b.n	80072e4 <_puts_r+0x88>
	...

08007308 <puts>:
 8007308:	4b02      	ldr	r3, [pc, #8]	@ (8007314 <puts+0xc>)
 800730a:	4601      	mov	r1, r0
 800730c:	6818      	ldr	r0, [r3, #0]
 800730e:	f7ff bfa5 	b.w	800725c <_puts_r>
 8007312:	bf00      	nop
 8007314:	20000188 	.word	0x20000188

08007318 <__sread>:
 8007318:	b510      	push	{r4, lr}
 800731a:	460c      	mov	r4, r1
 800731c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007320:	f000 f912 	bl	8007548 <_read_r>
 8007324:	2800      	cmp	r0, #0
 8007326:	bfab      	itete	ge
 8007328:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800732a:	89a3      	ldrhlt	r3, [r4, #12]
 800732c:	181b      	addge	r3, r3, r0
 800732e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007332:	bfac      	ite	ge
 8007334:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007336:	81a3      	strhlt	r3, [r4, #12]
 8007338:	bd10      	pop	{r4, pc}

0800733a <__swrite>:
 800733a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800733e:	461f      	mov	r7, r3
 8007340:	898b      	ldrh	r3, [r1, #12]
 8007342:	4605      	mov	r5, r0
 8007344:	05db      	lsls	r3, r3, #23
 8007346:	460c      	mov	r4, r1
 8007348:	4616      	mov	r6, r2
 800734a:	d505      	bpl.n	8007358 <__swrite+0x1e>
 800734c:	2302      	movs	r3, #2
 800734e:	2200      	movs	r2, #0
 8007350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007354:	f000 f8e6 	bl	8007524 <_lseek_r>
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	4632      	mov	r2, r6
 800735c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	4628      	mov	r0, r5
 8007364:	463b      	mov	r3, r7
 8007366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800736a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800736e:	f000 b90d 	b.w	800758c <_write_r>

08007372 <__sseek>:
 8007372:	b510      	push	{r4, lr}
 8007374:	460c      	mov	r4, r1
 8007376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737a:	f000 f8d3 	bl	8007524 <_lseek_r>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	89a3      	ldrh	r3, [r4, #12]
 8007382:	bf15      	itete	ne
 8007384:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007386:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800738a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800738e:	81a3      	strheq	r3, [r4, #12]
 8007390:	bf18      	it	ne
 8007392:	81a3      	strhne	r3, [r4, #12]
 8007394:	bd10      	pop	{r4, pc}

08007396 <__sclose>:
 8007396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739a:	f000 b8b3 	b.w	8007504 <_close_r>

0800739e <__swbuf_r>:
 800739e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a0:	460e      	mov	r6, r1
 80073a2:	4614      	mov	r4, r2
 80073a4:	4605      	mov	r5, r0
 80073a6:	b118      	cbz	r0, 80073b0 <__swbuf_r+0x12>
 80073a8:	6a03      	ldr	r3, [r0, #32]
 80073aa:	b90b      	cbnz	r3, 80073b0 <__swbuf_r+0x12>
 80073ac:	f7ff ff0e 	bl	80071cc <__sinit>
 80073b0:	69a3      	ldr	r3, [r4, #24]
 80073b2:	60a3      	str	r3, [r4, #8]
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	071a      	lsls	r2, r3, #28
 80073b8:	d501      	bpl.n	80073be <__swbuf_r+0x20>
 80073ba:	6923      	ldr	r3, [r4, #16]
 80073bc:	b943      	cbnz	r3, 80073d0 <__swbuf_r+0x32>
 80073be:	4621      	mov	r1, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	f000 f82b 	bl	800741c <__swsetup_r>
 80073c6:	b118      	cbz	r0, 80073d0 <__swbuf_r+0x32>
 80073c8:	f04f 37ff 	mov.w	r7, #4294967295
 80073cc:	4638      	mov	r0, r7
 80073ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	6922      	ldr	r2, [r4, #16]
 80073d4:	b2f6      	uxtb	r6, r6
 80073d6:	1a98      	subs	r0, r3, r2
 80073d8:	6963      	ldr	r3, [r4, #20]
 80073da:	4637      	mov	r7, r6
 80073dc:	4283      	cmp	r3, r0
 80073de:	dc05      	bgt.n	80073ec <__swbuf_r+0x4e>
 80073e0:	4621      	mov	r1, r4
 80073e2:	4628      	mov	r0, r5
 80073e4:	f002 f990 	bl	8009708 <_fflush_r>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	d1ed      	bne.n	80073c8 <__swbuf_r+0x2a>
 80073ec:	68a3      	ldr	r3, [r4, #8]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	60a3      	str	r3, [r4, #8]
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	6022      	str	r2, [r4, #0]
 80073f8:	701e      	strb	r6, [r3, #0]
 80073fa:	6962      	ldr	r2, [r4, #20]
 80073fc:	1c43      	adds	r3, r0, #1
 80073fe:	429a      	cmp	r2, r3
 8007400:	d004      	beq.n	800740c <__swbuf_r+0x6e>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	07db      	lsls	r3, r3, #31
 8007406:	d5e1      	bpl.n	80073cc <__swbuf_r+0x2e>
 8007408:	2e0a      	cmp	r6, #10
 800740a:	d1df      	bne.n	80073cc <__swbuf_r+0x2e>
 800740c:	4621      	mov	r1, r4
 800740e:	4628      	mov	r0, r5
 8007410:	f002 f97a 	bl	8009708 <_fflush_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	d0d9      	beq.n	80073cc <__swbuf_r+0x2e>
 8007418:	e7d6      	b.n	80073c8 <__swbuf_r+0x2a>
	...

0800741c <__swsetup_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4b29      	ldr	r3, [pc, #164]	@ (80074c4 <__swsetup_r+0xa8>)
 8007420:	4605      	mov	r5, r0
 8007422:	6818      	ldr	r0, [r3, #0]
 8007424:	460c      	mov	r4, r1
 8007426:	b118      	cbz	r0, 8007430 <__swsetup_r+0x14>
 8007428:	6a03      	ldr	r3, [r0, #32]
 800742a:	b90b      	cbnz	r3, 8007430 <__swsetup_r+0x14>
 800742c:	f7ff fece 	bl	80071cc <__sinit>
 8007430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007434:	0719      	lsls	r1, r3, #28
 8007436:	d422      	bmi.n	800747e <__swsetup_r+0x62>
 8007438:	06da      	lsls	r2, r3, #27
 800743a:	d407      	bmi.n	800744c <__swsetup_r+0x30>
 800743c:	2209      	movs	r2, #9
 800743e:	602a      	str	r2, [r5, #0]
 8007440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	e033      	b.n	80074b4 <__swsetup_r+0x98>
 800744c:	0758      	lsls	r0, r3, #29
 800744e:	d512      	bpl.n	8007476 <__swsetup_r+0x5a>
 8007450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007452:	b141      	cbz	r1, 8007466 <__swsetup_r+0x4a>
 8007454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007458:	4299      	cmp	r1, r3
 800745a:	d002      	beq.n	8007462 <__swsetup_r+0x46>
 800745c:	4628      	mov	r0, r5
 800745e:	f000 ff53 	bl	8008308 <_free_r>
 8007462:	2300      	movs	r3, #0
 8007464:	6363      	str	r3, [r4, #52]	@ 0x34
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800746c:	81a3      	strh	r3, [r4, #12]
 800746e:	2300      	movs	r3, #0
 8007470:	6063      	str	r3, [r4, #4]
 8007472:	6923      	ldr	r3, [r4, #16]
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	89a3      	ldrh	r3, [r4, #12]
 8007478:	f043 0308 	orr.w	r3, r3, #8
 800747c:	81a3      	strh	r3, [r4, #12]
 800747e:	6923      	ldr	r3, [r4, #16]
 8007480:	b94b      	cbnz	r3, 8007496 <__swsetup_r+0x7a>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800748c:	d003      	beq.n	8007496 <__swsetup_r+0x7a>
 800748e:	4621      	mov	r1, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f002 f986 	bl	80097a2 <__smakebuf_r>
 8007496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749a:	f013 0201 	ands.w	r2, r3, #1
 800749e:	d00a      	beq.n	80074b6 <__swsetup_r+0x9a>
 80074a0:	2200      	movs	r2, #0
 80074a2:	60a2      	str	r2, [r4, #8]
 80074a4:	6962      	ldr	r2, [r4, #20]
 80074a6:	4252      	negs	r2, r2
 80074a8:	61a2      	str	r2, [r4, #24]
 80074aa:	6922      	ldr	r2, [r4, #16]
 80074ac:	b942      	cbnz	r2, 80074c0 <__swsetup_r+0xa4>
 80074ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074b2:	d1c5      	bne.n	8007440 <__swsetup_r+0x24>
 80074b4:	bd38      	pop	{r3, r4, r5, pc}
 80074b6:	0799      	lsls	r1, r3, #30
 80074b8:	bf58      	it	pl
 80074ba:	6962      	ldrpl	r2, [r4, #20]
 80074bc:	60a2      	str	r2, [r4, #8]
 80074be:	e7f4      	b.n	80074aa <__swsetup_r+0x8e>
 80074c0:	2000      	movs	r0, #0
 80074c2:	e7f7      	b.n	80074b4 <__swsetup_r+0x98>
 80074c4:	20000188 	.word	0x20000188

080074c8 <memset>:
 80074c8:	4603      	mov	r3, r0
 80074ca:	4402      	add	r2, r0
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d100      	bne.n	80074d2 <memset+0xa>
 80074d0:	4770      	bx	lr
 80074d2:	f803 1b01 	strb.w	r1, [r3], #1
 80074d6:	e7f9      	b.n	80074cc <memset+0x4>

080074d8 <strncmp>:
 80074d8:	b510      	push	{r4, lr}
 80074da:	b16a      	cbz	r2, 80074f8 <strncmp+0x20>
 80074dc:	3901      	subs	r1, #1
 80074de:	1884      	adds	r4, r0, r2
 80074e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074e4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d103      	bne.n	80074f4 <strncmp+0x1c>
 80074ec:	42a0      	cmp	r0, r4
 80074ee:	d001      	beq.n	80074f4 <strncmp+0x1c>
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d1f5      	bne.n	80074e0 <strncmp+0x8>
 80074f4:	1ad0      	subs	r0, r2, r3
 80074f6:	bd10      	pop	{r4, pc}
 80074f8:	4610      	mov	r0, r2
 80074fa:	e7fc      	b.n	80074f6 <strncmp+0x1e>

080074fc <_localeconv_r>:
 80074fc:	4800      	ldr	r0, [pc, #0]	@ (8007500 <_localeconv_r+0x4>)
 80074fe:	4770      	bx	lr
 8007500:	2000010c 	.word	0x2000010c

08007504 <_close_r>:
 8007504:	b538      	push	{r3, r4, r5, lr}
 8007506:	2300      	movs	r3, #0
 8007508:	4d05      	ldr	r5, [pc, #20]	@ (8007520 <_close_r+0x1c>)
 800750a:	4604      	mov	r4, r0
 800750c:	4608      	mov	r0, r1
 800750e:	602b      	str	r3, [r5, #0]
 8007510:	f7fa fd71 	bl	8001ff6 <_close>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_close_r+0x1a>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_close_r+0x1a>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	20000498 	.word	0x20000498

08007524 <_lseek_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4604      	mov	r4, r0
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	2200      	movs	r2, #0
 800752e:	4d05      	ldr	r5, [pc, #20]	@ (8007544 <_lseek_r+0x20>)
 8007530:	602a      	str	r2, [r5, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	f7fa fd83 	bl	800203e <_lseek>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_lseek_r+0x1e>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_lseek_r+0x1e>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20000498 	.word	0x20000498

08007548 <_read_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	4608      	mov	r0, r1
 800754e:	4611      	mov	r1, r2
 8007550:	2200      	movs	r2, #0
 8007552:	4d05      	ldr	r5, [pc, #20]	@ (8007568 <_read_r+0x20>)
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fa fd14 	bl	8001f84 <_read>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_read_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_read_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20000498 	.word	0x20000498

0800756c <_sbrk_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	2300      	movs	r3, #0
 8007570:	4d05      	ldr	r5, [pc, #20]	@ (8007588 <_sbrk_r+0x1c>)
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f7fa fd6e 	bl	8002058 <_sbrk>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_sbrk_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_sbrk_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000498 	.word	0x20000498

0800758c <_write_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4604      	mov	r4, r0
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	2200      	movs	r2, #0
 8007596:	4d05      	ldr	r5, [pc, #20]	@ (80075ac <_write_r+0x20>)
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fa fd0f 	bl	8001fbe <_write>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_write_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_write_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	20000498 	.word	0x20000498

080075b0 <__errno>:
 80075b0:	4b01      	ldr	r3, [pc, #4]	@ (80075b8 <__errno+0x8>)
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000188 	.word	0x20000188

080075bc <__libc_init_array>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	2600      	movs	r6, #0
 80075c0:	4d0c      	ldr	r5, [pc, #48]	@ (80075f4 <__libc_init_array+0x38>)
 80075c2:	4c0d      	ldr	r4, [pc, #52]	@ (80075f8 <__libc_init_array+0x3c>)
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	42a6      	cmp	r6, r4
 80075ca:	d109      	bne.n	80075e0 <__libc_init_array+0x24>
 80075cc:	f002 f9d8 	bl	8009980 <_init>
 80075d0:	2600      	movs	r6, #0
 80075d2:	4d0a      	ldr	r5, [pc, #40]	@ (80075fc <__libc_init_array+0x40>)
 80075d4:	4c0a      	ldr	r4, [pc, #40]	@ (8007600 <__libc_init_array+0x44>)
 80075d6:	1b64      	subs	r4, r4, r5
 80075d8:	10a4      	asrs	r4, r4, #2
 80075da:	42a6      	cmp	r6, r4
 80075dc:	d105      	bne.n	80075ea <__libc_init_array+0x2e>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075e4:	4798      	blx	r3
 80075e6:	3601      	adds	r6, #1
 80075e8:	e7ee      	b.n	80075c8 <__libc_init_array+0xc>
 80075ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80075ee:	4798      	blx	r3
 80075f0:	3601      	adds	r6, #1
 80075f2:	e7f2      	b.n	80075da <__libc_init_array+0x1e>
 80075f4:	08009e74 	.word	0x08009e74
 80075f8:	08009e74 	.word	0x08009e74
 80075fc:	08009e74 	.word	0x08009e74
 8007600:	08009e78 	.word	0x08009e78

08007604 <__retarget_lock_init_recursive>:
 8007604:	4770      	bx	lr

08007606 <__retarget_lock_acquire_recursive>:
 8007606:	4770      	bx	lr

08007608 <__retarget_lock_release_recursive>:
 8007608:	4770      	bx	lr

0800760a <memchr>:
 800760a:	4603      	mov	r3, r0
 800760c:	b510      	push	{r4, lr}
 800760e:	b2c9      	uxtb	r1, r1
 8007610:	4402      	add	r2, r0
 8007612:	4293      	cmp	r3, r2
 8007614:	4618      	mov	r0, r3
 8007616:	d101      	bne.n	800761c <memchr+0x12>
 8007618:	2000      	movs	r0, #0
 800761a:	e003      	b.n	8007624 <memchr+0x1a>
 800761c:	7804      	ldrb	r4, [r0, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	428c      	cmp	r4, r1
 8007622:	d1f6      	bne.n	8007612 <memchr+0x8>
 8007624:	bd10      	pop	{r4, pc}

08007626 <memcpy>:
 8007626:	440a      	add	r2, r1
 8007628:	4291      	cmp	r1, r2
 800762a:	f100 33ff 	add.w	r3, r0, #4294967295
 800762e:	d100      	bne.n	8007632 <memcpy+0xc>
 8007630:	4770      	bx	lr
 8007632:	b510      	push	{r4, lr}
 8007634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007638:	4291      	cmp	r1, r2
 800763a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800763e:	d1f9      	bne.n	8007634 <memcpy+0xe>
 8007640:	bd10      	pop	{r4, pc}
	...

08007644 <nan>:
 8007644:	2000      	movs	r0, #0
 8007646:	4901      	ldr	r1, [pc, #4]	@ (800764c <nan+0x8>)
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	7ff80000 	.word	0x7ff80000

08007650 <quorem>:
 8007650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007654:	6903      	ldr	r3, [r0, #16]
 8007656:	690c      	ldr	r4, [r1, #16]
 8007658:	4607      	mov	r7, r0
 800765a:	42a3      	cmp	r3, r4
 800765c:	db7e      	blt.n	800775c <quorem+0x10c>
 800765e:	3c01      	subs	r4, #1
 8007660:	00a3      	lsls	r3, r4, #2
 8007662:	f100 0514 	add.w	r5, r0, #20
 8007666:	f101 0814 	add.w	r8, r1, #20
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007676:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800767a:	3301      	adds	r3, #1
 800767c:	429a      	cmp	r2, r3
 800767e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007682:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007686:	d32e      	bcc.n	80076e6 <quorem+0x96>
 8007688:	f04f 0a00 	mov.w	sl, #0
 800768c:	46c4      	mov	ip, r8
 800768e:	46ae      	mov	lr, r5
 8007690:	46d3      	mov	fp, sl
 8007692:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007696:	b298      	uxth	r0, r3
 8007698:	fb06 a000 	mla	r0, r6, r0, sl
 800769c:	0c1b      	lsrs	r3, r3, #16
 800769e:	0c02      	lsrs	r2, r0, #16
 80076a0:	fb06 2303 	mla	r3, r6, r3, r2
 80076a4:	f8de 2000 	ldr.w	r2, [lr]
 80076a8:	b280      	uxth	r0, r0
 80076aa:	b292      	uxth	r2, r2
 80076ac:	1a12      	subs	r2, r2, r0
 80076ae:	445a      	add	r2, fp
 80076b0:	f8de 0000 	ldr.w	r0, [lr]
 80076b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076c2:	b292      	uxth	r2, r2
 80076c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076c8:	45e1      	cmp	r9, ip
 80076ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076ce:	f84e 2b04 	str.w	r2, [lr], #4
 80076d2:	d2de      	bcs.n	8007692 <quorem+0x42>
 80076d4:	9b00      	ldr	r3, [sp, #0]
 80076d6:	58eb      	ldr	r3, [r5, r3]
 80076d8:	b92b      	cbnz	r3, 80076e6 <quorem+0x96>
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	3b04      	subs	r3, #4
 80076de:	429d      	cmp	r5, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	d32f      	bcc.n	8007744 <quorem+0xf4>
 80076e4:	613c      	str	r4, [r7, #16]
 80076e6:	4638      	mov	r0, r7
 80076e8:	f001 fc5e 	bl	8008fa8 <__mcmp>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	db25      	blt.n	800773c <quorem+0xec>
 80076f0:	4629      	mov	r1, r5
 80076f2:	2000      	movs	r0, #0
 80076f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f8:	f8d1 c000 	ldr.w	ip, [r1]
 80076fc:	fa1f fe82 	uxth.w	lr, r2
 8007700:	fa1f f38c 	uxth.w	r3, ip
 8007704:	eba3 030e 	sub.w	r3, r3, lr
 8007708:	4403      	add	r3, r0
 800770a:	0c12      	lsrs	r2, r2, #16
 800770c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007710:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007714:	b29b      	uxth	r3, r3
 8007716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800771a:	45c1      	cmp	r9, r8
 800771c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007720:	f841 3b04 	str.w	r3, [r1], #4
 8007724:	d2e6      	bcs.n	80076f4 <quorem+0xa4>
 8007726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800772a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772e:	b922      	cbnz	r2, 800773a <quorem+0xea>
 8007730:	3b04      	subs	r3, #4
 8007732:	429d      	cmp	r5, r3
 8007734:	461a      	mov	r2, r3
 8007736:	d30b      	bcc.n	8007750 <quorem+0x100>
 8007738:	613c      	str	r4, [r7, #16]
 800773a:	3601      	adds	r6, #1
 800773c:	4630      	mov	r0, r6
 800773e:	b003      	add	sp, #12
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	6812      	ldr	r2, [r2, #0]
 8007746:	3b04      	subs	r3, #4
 8007748:	2a00      	cmp	r2, #0
 800774a:	d1cb      	bne.n	80076e4 <quorem+0x94>
 800774c:	3c01      	subs	r4, #1
 800774e:	e7c6      	b.n	80076de <quorem+0x8e>
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	3b04      	subs	r3, #4
 8007754:	2a00      	cmp	r2, #0
 8007756:	d1ef      	bne.n	8007738 <quorem+0xe8>
 8007758:	3c01      	subs	r4, #1
 800775a:	e7ea      	b.n	8007732 <quorem+0xe2>
 800775c:	2000      	movs	r0, #0
 800775e:	e7ee      	b.n	800773e <quorem+0xee>

08007760 <_dtoa_r>:
 8007760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007764:	4614      	mov	r4, r2
 8007766:	461d      	mov	r5, r3
 8007768:	69c7      	ldr	r7, [r0, #28]
 800776a:	b097      	sub	sp, #92	@ 0x5c
 800776c:	4681      	mov	r9, r0
 800776e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007772:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007774:	b97f      	cbnz	r7, 8007796 <_dtoa_r+0x36>
 8007776:	2010      	movs	r0, #16
 8007778:	f7fe f986 	bl	8005a88 <malloc>
 800777c:	4602      	mov	r2, r0
 800777e:	f8c9 001c 	str.w	r0, [r9, #28]
 8007782:	b920      	cbnz	r0, 800778e <_dtoa_r+0x2e>
 8007784:	21ef      	movs	r1, #239	@ 0xef
 8007786:	4bac      	ldr	r3, [pc, #688]	@ (8007a38 <_dtoa_r+0x2d8>)
 8007788:	48ac      	ldr	r0, [pc, #688]	@ (8007a3c <_dtoa_r+0x2dc>)
 800778a:	f002 f869 	bl	8009860 <__assert_func>
 800778e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007792:	6007      	str	r7, [r0, #0]
 8007794:	60c7      	str	r7, [r0, #12]
 8007796:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800779a:	6819      	ldr	r1, [r3, #0]
 800779c:	b159      	cbz	r1, 80077b6 <_dtoa_r+0x56>
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	2301      	movs	r3, #1
 80077a2:	4093      	lsls	r3, r2
 80077a4:	604a      	str	r2, [r1, #4]
 80077a6:	608b      	str	r3, [r1, #8]
 80077a8:	4648      	mov	r0, r9
 80077aa:	f001 f981 	bl	8008ab0 <_Bfree>
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80077b4:	601a      	str	r2, [r3, #0]
 80077b6:	1e2b      	subs	r3, r5, #0
 80077b8:	bfaf      	iteee	ge
 80077ba:	2300      	movge	r3, #0
 80077bc:	2201      	movlt	r2, #1
 80077be:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077c2:	9307      	strlt	r3, [sp, #28]
 80077c4:	bfa8      	it	ge
 80077c6:	6033      	strge	r3, [r6, #0]
 80077c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80077cc:	4b9c      	ldr	r3, [pc, #624]	@ (8007a40 <_dtoa_r+0x2e0>)
 80077ce:	bfb8      	it	lt
 80077d0:	6032      	strlt	r2, [r6, #0]
 80077d2:	ea33 0308 	bics.w	r3, r3, r8
 80077d6:	d112      	bne.n	80077fe <_dtoa_r+0x9e>
 80077d8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077e4:	4323      	orrs	r3, r4
 80077e6:	f000 855e 	beq.w	80082a6 <_dtoa_r+0xb46>
 80077ea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007a44 <_dtoa_r+0x2e4>
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 8560 	beq.w	80082b6 <_dtoa_r+0xb56>
 80077f6:	f10a 0303 	add.w	r3, sl, #3
 80077fa:	f000 bd5a 	b.w	80082b2 <_dtoa_r+0xb52>
 80077fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007802:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800780a:	2200      	movs	r2, #0
 800780c:	2300      	movs	r3, #0
 800780e:	f7f9 f989 	bl	8000b24 <__aeabi_dcmpeq>
 8007812:	4607      	mov	r7, r0
 8007814:	b158      	cbz	r0, 800782e <_dtoa_r+0xce>
 8007816:	2301      	movs	r3, #1
 8007818:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800781e:	b113      	cbz	r3, 8007826 <_dtoa_r+0xc6>
 8007820:	4b89      	ldr	r3, [pc, #548]	@ (8007a48 <_dtoa_r+0x2e8>)
 8007822:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007a4c <_dtoa_r+0x2ec>
 800782a:	f000 bd44 	b.w	80082b6 <_dtoa_r+0xb56>
 800782e:	ab14      	add	r3, sp, #80	@ 0x50
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	ab15      	add	r3, sp, #84	@ 0x54
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	4648      	mov	r0, r9
 8007838:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800783c:	f001 fccc 	bl	80091d8 <__d2b>
 8007840:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007844:	9003      	str	r0, [sp, #12]
 8007846:	2e00      	cmp	r6, #0
 8007848:	d078      	beq.n	800793c <_dtoa_r+0x1dc>
 800784a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800784e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007850:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007858:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800785c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007860:	9712      	str	r7, [sp, #72]	@ 0x48
 8007862:	4619      	mov	r1, r3
 8007864:	2200      	movs	r2, #0
 8007866:	4b7a      	ldr	r3, [pc, #488]	@ (8007a50 <_dtoa_r+0x2f0>)
 8007868:	f7f8 fd3c 	bl	80002e4 <__aeabi_dsub>
 800786c:	a36c      	add	r3, pc, #432	@ (adr r3, 8007a20 <_dtoa_r+0x2c0>)
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f7f8 feef 	bl	8000654 <__aeabi_dmul>
 8007876:	a36c      	add	r3, pc, #432	@ (adr r3, 8007a28 <_dtoa_r+0x2c8>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 fd34 	bl	80002e8 <__adddf3>
 8007880:	4604      	mov	r4, r0
 8007882:	4630      	mov	r0, r6
 8007884:	460d      	mov	r5, r1
 8007886:	f7f8 fe7b 	bl	8000580 <__aeabi_i2d>
 800788a:	a369      	add	r3, pc, #420	@ (adr r3, 8007a30 <_dtoa_r+0x2d0>)
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 fee0 	bl	8000654 <__aeabi_dmul>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4620      	mov	r0, r4
 800789a:	4629      	mov	r1, r5
 800789c:	f7f8 fd24 	bl	80002e8 <__adddf3>
 80078a0:	4604      	mov	r4, r0
 80078a2:	460d      	mov	r5, r1
 80078a4:	f7f9 f986 	bl	8000bb4 <__aeabi_d2iz>
 80078a8:	2200      	movs	r2, #0
 80078aa:	4607      	mov	r7, r0
 80078ac:	2300      	movs	r3, #0
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 f941 	bl	8000b38 <__aeabi_dcmplt>
 80078b6:	b140      	cbz	r0, 80078ca <_dtoa_r+0x16a>
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7f8 fe61 	bl	8000580 <__aeabi_i2d>
 80078be:	4622      	mov	r2, r4
 80078c0:	462b      	mov	r3, r5
 80078c2:	f7f9 f92f 	bl	8000b24 <__aeabi_dcmpeq>
 80078c6:	b900      	cbnz	r0, 80078ca <_dtoa_r+0x16a>
 80078c8:	3f01      	subs	r7, #1
 80078ca:	2f16      	cmp	r7, #22
 80078cc:	d854      	bhi.n	8007978 <_dtoa_r+0x218>
 80078ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078d2:	4b60      	ldr	r3, [pc, #384]	@ (8007a54 <_dtoa_r+0x2f4>)
 80078d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078dc:	f7f9 f92c 	bl	8000b38 <__aeabi_dcmplt>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d04b      	beq.n	800797c <_dtoa_r+0x21c>
 80078e4:	2300      	movs	r3, #0
 80078e6:	3f01      	subs	r7, #1
 80078e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078ea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078ec:	1b9b      	subs	r3, r3, r6
 80078ee:	1e5a      	subs	r2, r3, #1
 80078f0:	bf49      	itett	mi
 80078f2:	f1c3 0301 	rsbmi	r3, r3, #1
 80078f6:	2300      	movpl	r3, #0
 80078f8:	9304      	strmi	r3, [sp, #16]
 80078fa:	2300      	movmi	r3, #0
 80078fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80078fe:	bf54      	ite	pl
 8007900:	9304      	strpl	r3, [sp, #16]
 8007902:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007904:	2f00      	cmp	r7, #0
 8007906:	db3b      	blt.n	8007980 <_dtoa_r+0x220>
 8007908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790a:	970e      	str	r7, [sp, #56]	@ 0x38
 800790c:	443b      	add	r3, r7
 800790e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007910:	2300      	movs	r3, #0
 8007912:	930a      	str	r3, [sp, #40]	@ 0x28
 8007914:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007916:	2b09      	cmp	r3, #9
 8007918:	d865      	bhi.n	80079e6 <_dtoa_r+0x286>
 800791a:	2b05      	cmp	r3, #5
 800791c:	bfc4      	itt	gt
 800791e:	3b04      	subgt	r3, #4
 8007920:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007922:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007924:	bfc8      	it	gt
 8007926:	2400      	movgt	r4, #0
 8007928:	f1a3 0302 	sub.w	r3, r3, #2
 800792c:	bfd8      	it	le
 800792e:	2401      	movle	r4, #1
 8007930:	2b03      	cmp	r3, #3
 8007932:	d864      	bhi.n	80079fe <_dtoa_r+0x29e>
 8007934:	e8df f003 	tbb	[pc, r3]
 8007938:	2c385553 	.word	0x2c385553
 800793c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007940:	441e      	add	r6, r3
 8007942:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007946:	2b20      	cmp	r3, #32
 8007948:	bfc1      	itttt	gt
 800794a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800794e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007952:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007956:	fa24 f303 	lsrgt.w	r3, r4, r3
 800795a:	bfd6      	itet	le
 800795c:	f1c3 0320 	rsble	r3, r3, #32
 8007960:	ea48 0003 	orrgt.w	r0, r8, r3
 8007964:	fa04 f003 	lslle.w	r0, r4, r3
 8007968:	f7f8 fdfa 	bl	8000560 <__aeabi_ui2d>
 800796c:	2201      	movs	r2, #1
 800796e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007972:	3e01      	subs	r6, #1
 8007974:	9212      	str	r2, [sp, #72]	@ 0x48
 8007976:	e774      	b.n	8007862 <_dtoa_r+0x102>
 8007978:	2301      	movs	r3, #1
 800797a:	e7b5      	b.n	80078e8 <_dtoa_r+0x188>
 800797c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800797e:	e7b4      	b.n	80078ea <_dtoa_r+0x18a>
 8007980:	9b04      	ldr	r3, [sp, #16]
 8007982:	1bdb      	subs	r3, r3, r7
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	427b      	negs	r3, r7
 8007988:	930a      	str	r3, [sp, #40]	@ 0x28
 800798a:	2300      	movs	r3, #0
 800798c:	930e      	str	r3, [sp, #56]	@ 0x38
 800798e:	e7c1      	b.n	8007914 <_dtoa_r+0x1b4>
 8007990:	2301      	movs	r3, #1
 8007992:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007994:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007996:	eb07 0b03 	add.w	fp, r7, r3
 800799a:	f10b 0301 	add.w	r3, fp, #1
 800799e:	2b01      	cmp	r3, #1
 80079a0:	9308      	str	r3, [sp, #32]
 80079a2:	bfb8      	it	lt
 80079a4:	2301      	movlt	r3, #1
 80079a6:	e006      	b.n	80079b6 <_dtoa_r+0x256>
 80079a8:	2301      	movs	r3, #1
 80079aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	dd28      	ble.n	8007a04 <_dtoa_r+0x2a4>
 80079b2:	469b      	mov	fp, r3
 80079b4:	9308      	str	r3, [sp, #32]
 80079b6:	2100      	movs	r1, #0
 80079b8:	2204      	movs	r2, #4
 80079ba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80079be:	f102 0514 	add.w	r5, r2, #20
 80079c2:	429d      	cmp	r5, r3
 80079c4:	d926      	bls.n	8007a14 <_dtoa_r+0x2b4>
 80079c6:	6041      	str	r1, [r0, #4]
 80079c8:	4648      	mov	r0, r9
 80079ca:	f001 f831 	bl	8008a30 <_Balloc>
 80079ce:	4682      	mov	sl, r0
 80079d0:	2800      	cmp	r0, #0
 80079d2:	d143      	bne.n	8007a5c <_dtoa_r+0x2fc>
 80079d4:	4602      	mov	r2, r0
 80079d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80079da:	4b1f      	ldr	r3, [pc, #124]	@ (8007a58 <_dtoa_r+0x2f8>)
 80079dc:	e6d4      	b.n	8007788 <_dtoa_r+0x28>
 80079de:	2300      	movs	r3, #0
 80079e0:	e7e3      	b.n	80079aa <_dtoa_r+0x24a>
 80079e2:	2300      	movs	r3, #0
 80079e4:	e7d5      	b.n	8007992 <_dtoa_r+0x232>
 80079e6:	2401      	movs	r4, #1
 80079e8:	2300      	movs	r3, #0
 80079ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079ec:	9320      	str	r3, [sp, #128]	@ 0x80
 80079ee:	f04f 3bff 	mov.w	fp, #4294967295
 80079f2:	2200      	movs	r2, #0
 80079f4:	2312      	movs	r3, #18
 80079f6:	f8cd b020 	str.w	fp, [sp, #32]
 80079fa:	9221      	str	r2, [sp, #132]	@ 0x84
 80079fc:	e7db      	b.n	80079b6 <_dtoa_r+0x256>
 80079fe:	2301      	movs	r3, #1
 8007a00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a02:	e7f4      	b.n	80079ee <_dtoa_r+0x28e>
 8007a04:	f04f 0b01 	mov.w	fp, #1
 8007a08:	465b      	mov	r3, fp
 8007a0a:	f8cd b020 	str.w	fp, [sp, #32]
 8007a0e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007a12:	e7d0      	b.n	80079b6 <_dtoa_r+0x256>
 8007a14:	3101      	adds	r1, #1
 8007a16:	0052      	lsls	r2, r2, #1
 8007a18:	e7d1      	b.n	80079be <_dtoa_r+0x25e>
 8007a1a:	bf00      	nop
 8007a1c:	f3af 8000 	nop.w
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	08009a8b 	.word	0x08009a8b
 8007a3c:	08009aa2 	.word	0x08009aa2
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	08009a87 	.word	0x08009a87
 8007a48:	08009a53 	.word	0x08009a53
 8007a4c:	08009a52 	.word	0x08009a52
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	08009ca0 	.word	0x08009ca0
 8007a58:	08009afa 	.word	0x08009afa
 8007a5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a60:	6018      	str	r0, [r3, #0]
 8007a62:	9b08      	ldr	r3, [sp, #32]
 8007a64:	2b0e      	cmp	r3, #14
 8007a66:	f200 80a1 	bhi.w	8007bac <_dtoa_r+0x44c>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	f000 809e 	beq.w	8007bac <_dtoa_r+0x44c>
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	dd33      	ble.n	8007adc <_dtoa_r+0x37c>
 8007a74:	4b9c      	ldr	r3, [pc, #624]	@ (8007ce8 <_dtoa_r+0x588>)
 8007a76:	f007 020f 	and.w	r2, r7, #15
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	05f8      	lsls	r0, r7, #23
 8007a80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a84:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007a88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a8c:	d516      	bpl.n	8007abc <_dtoa_r+0x35c>
 8007a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a92:	4b96      	ldr	r3, [pc, #600]	@ (8007cec <_dtoa_r+0x58c>)
 8007a94:	2603      	movs	r6, #3
 8007a96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a9a:	f7f8 ff05 	bl	80008a8 <__aeabi_ddiv>
 8007a9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aa2:	f004 040f 	and.w	r4, r4, #15
 8007aa6:	4d91      	ldr	r5, [pc, #580]	@ (8007cec <_dtoa_r+0x58c>)
 8007aa8:	b954      	cbnz	r4, 8007ac0 <_dtoa_r+0x360>
 8007aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ab2:	f7f8 fef9 	bl	80008a8 <__aeabi_ddiv>
 8007ab6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aba:	e028      	b.n	8007b0e <_dtoa_r+0x3ae>
 8007abc:	2602      	movs	r6, #2
 8007abe:	e7f2      	b.n	8007aa6 <_dtoa_r+0x346>
 8007ac0:	07e1      	lsls	r1, r4, #31
 8007ac2:	d508      	bpl.n	8007ad6 <_dtoa_r+0x376>
 8007ac4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007acc:	f7f8 fdc2 	bl	8000654 <__aeabi_dmul>
 8007ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	1064      	asrs	r4, r4, #1
 8007ad8:	3508      	adds	r5, #8
 8007ada:	e7e5      	b.n	8007aa8 <_dtoa_r+0x348>
 8007adc:	f000 80af 	beq.w	8007c3e <_dtoa_r+0x4de>
 8007ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ae4:	427c      	negs	r4, r7
 8007ae6:	4b80      	ldr	r3, [pc, #512]	@ (8007ce8 <_dtoa_r+0x588>)
 8007ae8:	f004 020f 	and.w	r2, r4, #15
 8007aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fdae 	bl	8000654 <__aeabi_dmul>
 8007af8:	2602      	movs	r6, #2
 8007afa:	2300      	movs	r3, #0
 8007afc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b00:	4d7a      	ldr	r5, [pc, #488]	@ (8007cec <_dtoa_r+0x58c>)
 8007b02:	1124      	asrs	r4, r4, #4
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	f040 808f 	bne.w	8007c28 <_dtoa_r+0x4c8>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1d3      	bne.n	8007ab6 <_dtoa_r+0x356>
 8007b0e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8094 	beq.w	8007c42 <_dtoa_r+0x4e2>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4b73      	ldr	r3, [pc, #460]	@ (8007cf0 <_dtoa_r+0x590>)
 8007b22:	f7f9 f809 	bl	8000b38 <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f000 808b 	beq.w	8007c42 <_dtoa_r+0x4e2>
 8007b2c:	9b08      	ldr	r3, [sp, #32]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8087 	beq.w	8007c42 <_dtoa_r+0x4e2>
 8007b34:	f1bb 0f00 	cmp.w	fp, #0
 8007b38:	dd34      	ble.n	8007ba4 <_dtoa_r+0x444>
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <_dtoa_r+0x594>)
 8007b42:	f7f8 fd87 	bl	8000654 <__aeabi_dmul>
 8007b46:	465c      	mov	r4, fp
 8007b48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007b4c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007b50:	3601      	adds	r6, #1
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7f8 fd14 	bl	8000580 <__aeabi_i2d>
 8007b58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b5c:	f7f8 fd7a 	bl	8000654 <__aeabi_dmul>
 8007b60:	2200      	movs	r2, #0
 8007b62:	4b65      	ldr	r3, [pc, #404]	@ (8007cf8 <_dtoa_r+0x598>)
 8007b64:	f7f8 fbc0 	bl	80002e8 <__adddf3>
 8007b68:	4605      	mov	r5, r0
 8007b6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	d16a      	bne.n	8007c48 <_dtoa_r+0x4e8>
 8007b72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b76:	2200      	movs	r2, #0
 8007b78:	4b60      	ldr	r3, [pc, #384]	@ (8007cfc <_dtoa_r+0x59c>)
 8007b7a:	f7f8 fbb3 	bl	80002e4 <__aeabi_dsub>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007b86:	462a      	mov	r2, r5
 8007b88:	4633      	mov	r3, r6
 8007b8a:	f7f8 fff3 	bl	8000b74 <__aeabi_dcmpgt>
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	f040 8298 	bne.w	80080c4 <_dtoa_r+0x964>
 8007b94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b9e:	f7f8 ffcb 	bl	8000b38 <__aeabi_dcmplt>
 8007ba2:	bb38      	cbnz	r0, 8007bf4 <_dtoa_r+0x494>
 8007ba4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ba8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007bac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f2c0 8157 	blt.w	8007e62 <_dtoa_r+0x702>
 8007bb4:	2f0e      	cmp	r7, #14
 8007bb6:	f300 8154 	bgt.w	8007e62 <_dtoa_r+0x702>
 8007bba:	4b4b      	ldr	r3, [pc, #300]	@ (8007ce8 <_dtoa_r+0x588>)
 8007bbc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bc4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f280 80e5 	bge.w	8007d9a <_dtoa_r+0x63a>
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f300 80e1 	bgt.w	8007d9a <_dtoa_r+0x63a>
 8007bd8:	d10c      	bne.n	8007bf4 <_dtoa_r+0x494>
 8007bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bde:	2200      	movs	r2, #0
 8007be0:	4b46      	ldr	r3, [pc, #280]	@ (8007cfc <_dtoa_r+0x59c>)
 8007be2:	f7f8 fd37 	bl	8000654 <__aeabi_dmul>
 8007be6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bea:	f7f8 ffb9 	bl	8000b60 <__aeabi_dcmpge>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	f000 8266 	beq.w	80080c0 <_dtoa_r+0x960>
 8007bf4:	2400      	movs	r4, #0
 8007bf6:	4625      	mov	r5, r4
 8007bf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bfa:	4656      	mov	r6, sl
 8007bfc:	ea6f 0803 	mvn.w	r8, r3
 8007c00:	2700      	movs	r7, #0
 8007c02:	4621      	mov	r1, r4
 8007c04:	4648      	mov	r0, r9
 8007c06:	f000 ff53 	bl	8008ab0 <_Bfree>
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	f000 80bd 	beq.w	8007d8a <_dtoa_r+0x62a>
 8007c10:	b12f      	cbz	r7, 8007c1e <_dtoa_r+0x4be>
 8007c12:	42af      	cmp	r7, r5
 8007c14:	d003      	beq.n	8007c1e <_dtoa_r+0x4be>
 8007c16:	4639      	mov	r1, r7
 8007c18:	4648      	mov	r0, r9
 8007c1a:	f000 ff49 	bl	8008ab0 <_Bfree>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4648      	mov	r0, r9
 8007c22:	f000 ff45 	bl	8008ab0 <_Bfree>
 8007c26:	e0b0      	b.n	8007d8a <_dtoa_r+0x62a>
 8007c28:	07e2      	lsls	r2, r4, #31
 8007c2a:	d505      	bpl.n	8007c38 <_dtoa_r+0x4d8>
 8007c2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c30:	f7f8 fd10 	bl	8000654 <__aeabi_dmul>
 8007c34:	2301      	movs	r3, #1
 8007c36:	3601      	adds	r6, #1
 8007c38:	1064      	asrs	r4, r4, #1
 8007c3a:	3508      	adds	r5, #8
 8007c3c:	e762      	b.n	8007b04 <_dtoa_r+0x3a4>
 8007c3e:	2602      	movs	r6, #2
 8007c40:	e765      	b.n	8007b0e <_dtoa_r+0x3ae>
 8007c42:	46b8      	mov	r8, r7
 8007c44:	9c08      	ldr	r4, [sp, #32]
 8007c46:	e784      	b.n	8007b52 <_dtoa_r+0x3f2>
 8007c48:	4b27      	ldr	r3, [pc, #156]	@ (8007ce8 <_dtoa_r+0x588>)
 8007c4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c54:	4454      	add	r4, sl
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d054      	beq.n	8007d04 <_dtoa_r+0x5a4>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	4928      	ldr	r1, [pc, #160]	@ (8007d00 <_dtoa_r+0x5a0>)
 8007c5e:	f7f8 fe23 	bl	80008a8 <__aeabi_ddiv>
 8007c62:	4633      	mov	r3, r6
 8007c64:	462a      	mov	r2, r5
 8007c66:	f7f8 fb3d 	bl	80002e4 <__aeabi_dsub>
 8007c6a:	4656      	mov	r6, sl
 8007c6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c74:	f7f8 ff9e 	bl	8000bb4 <__aeabi_d2iz>
 8007c78:	4605      	mov	r5, r0
 8007c7a:	f7f8 fc81 	bl	8000580 <__aeabi_i2d>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c86:	f7f8 fb2d 	bl	80002e4 <__aeabi_dsub>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	3530      	adds	r5, #48	@ 0x30
 8007c90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c98:	f806 5b01 	strb.w	r5, [r6], #1
 8007c9c:	f7f8 ff4c 	bl	8000b38 <__aeabi_dcmplt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d172      	bne.n	8007d8a <_dtoa_r+0x62a>
 8007ca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ca8:	2000      	movs	r0, #0
 8007caa:	4911      	ldr	r1, [pc, #68]	@ (8007cf0 <_dtoa_r+0x590>)
 8007cac:	f7f8 fb1a 	bl	80002e4 <__aeabi_dsub>
 8007cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cb4:	f7f8 ff40 	bl	8000b38 <__aeabi_dcmplt>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	f040 80b4 	bne.w	8007e26 <_dtoa_r+0x6c6>
 8007cbe:	42a6      	cmp	r6, r4
 8007cc0:	f43f af70 	beq.w	8007ba4 <_dtoa_r+0x444>
 8007cc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <_dtoa_r+0x594>)
 8007ccc:	f7f8 fcc2 	bl	8000654 <__aeabi_dmul>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <_dtoa_r+0x594>)
 8007cdc:	f7f8 fcba 	bl	8000654 <__aeabi_dmul>
 8007ce0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ce4:	e7c4      	b.n	8007c70 <_dtoa_r+0x510>
 8007ce6:	bf00      	nop
 8007ce8:	08009ca0 	.word	0x08009ca0
 8007cec:	08009c78 	.word	0x08009c78
 8007cf0:	3ff00000 	.word	0x3ff00000
 8007cf4:	40240000 	.word	0x40240000
 8007cf8:	401c0000 	.word	0x401c0000
 8007cfc:	40140000 	.word	0x40140000
 8007d00:	3fe00000 	.word	0x3fe00000
 8007d04:	4631      	mov	r1, r6
 8007d06:	4628      	mov	r0, r5
 8007d08:	f7f8 fca4 	bl	8000654 <__aeabi_dmul>
 8007d0c:	4656      	mov	r6, sl
 8007d0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d12:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d18:	f7f8 ff4c 	bl	8000bb4 <__aeabi_d2iz>
 8007d1c:	4605      	mov	r5, r0
 8007d1e:	f7f8 fc2f 	bl	8000580 <__aeabi_i2d>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d2a:	f7f8 fadb 	bl	80002e4 <__aeabi_dsub>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	460b      	mov	r3, r1
 8007d32:	3530      	adds	r5, #48	@ 0x30
 8007d34:	f806 5b01 	strb.w	r5, [r6], #1
 8007d38:	42a6      	cmp	r6, r4
 8007d3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d3e:	f04f 0200 	mov.w	r2, #0
 8007d42:	d124      	bne.n	8007d8e <_dtoa_r+0x62e>
 8007d44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d48:	4bae      	ldr	r3, [pc, #696]	@ (8008004 <_dtoa_r+0x8a4>)
 8007d4a:	f7f8 facd 	bl	80002e8 <__adddf3>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d56:	f7f8 ff0d 	bl	8000b74 <__aeabi_dcmpgt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d163      	bne.n	8007e26 <_dtoa_r+0x6c6>
 8007d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d62:	2000      	movs	r0, #0
 8007d64:	49a7      	ldr	r1, [pc, #668]	@ (8008004 <_dtoa_r+0x8a4>)
 8007d66:	f7f8 fabd 	bl	80002e4 <__aeabi_dsub>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d72:	f7f8 fee1 	bl	8000b38 <__aeabi_dcmplt>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f af14 	beq.w	8007ba4 <_dtoa_r+0x444>
 8007d7c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d7e:	1e73      	subs	r3, r6, #1
 8007d80:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d82:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d86:	2b30      	cmp	r3, #48	@ 0x30
 8007d88:	d0f8      	beq.n	8007d7c <_dtoa_r+0x61c>
 8007d8a:	4647      	mov	r7, r8
 8007d8c:	e03b      	b.n	8007e06 <_dtoa_r+0x6a6>
 8007d8e:	4b9e      	ldr	r3, [pc, #632]	@ (8008008 <_dtoa_r+0x8a8>)
 8007d90:	f7f8 fc60 	bl	8000654 <__aeabi_dmul>
 8007d94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d98:	e7bc      	b.n	8007d14 <_dtoa_r+0x5b4>
 8007d9a:	4656      	mov	r6, sl
 8007d9c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007da0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007da4:	4620      	mov	r0, r4
 8007da6:	4629      	mov	r1, r5
 8007da8:	f7f8 fd7e 	bl	80008a8 <__aeabi_ddiv>
 8007dac:	f7f8 ff02 	bl	8000bb4 <__aeabi_d2iz>
 8007db0:	4680      	mov	r8, r0
 8007db2:	f7f8 fbe5 	bl	8000580 <__aeabi_i2d>
 8007db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dba:	f7f8 fc4b 	bl	8000654 <__aeabi_dmul>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fa8d 	bl	80002e4 <__aeabi_dsub>
 8007dca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007dce:	9d08      	ldr	r5, [sp, #32]
 8007dd0:	f806 4b01 	strb.w	r4, [r6], #1
 8007dd4:	eba6 040a 	sub.w	r4, r6, sl
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	d133      	bne.n	8007e48 <_dtoa_r+0x6e8>
 8007de0:	f7f8 fa82 	bl	80002e8 <__adddf3>
 8007de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de8:	4604      	mov	r4, r0
 8007dea:	460d      	mov	r5, r1
 8007dec:	f7f8 fec2 	bl	8000b74 <__aeabi_dcmpgt>
 8007df0:	b9c0      	cbnz	r0, 8007e24 <_dtoa_r+0x6c4>
 8007df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007df6:	4620      	mov	r0, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	f7f8 fe93 	bl	8000b24 <__aeabi_dcmpeq>
 8007dfe:	b110      	cbz	r0, 8007e06 <_dtoa_r+0x6a6>
 8007e00:	f018 0f01 	tst.w	r8, #1
 8007e04:	d10e      	bne.n	8007e24 <_dtoa_r+0x6c4>
 8007e06:	4648      	mov	r0, r9
 8007e08:	9903      	ldr	r1, [sp, #12]
 8007e0a:	f000 fe51 	bl	8008ab0 <_Bfree>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	7033      	strb	r3, [r6, #0]
 8007e12:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e14:	3701      	adds	r7, #1
 8007e16:	601f      	str	r7, [r3, #0]
 8007e18:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 824b 	beq.w	80082b6 <_dtoa_r+0xb56>
 8007e20:	601e      	str	r6, [r3, #0]
 8007e22:	e248      	b.n	80082b6 <_dtoa_r+0xb56>
 8007e24:	46b8      	mov	r8, r7
 8007e26:	4633      	mov	r3, r6
 8007e28:	461e      	mov	r6, r3
 8007e2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e2e:	2a39      	cmp	r2, #57	@ 0x39
 8007e30:	d106      	bne.n	8007e40 <_dtoa_r+0x6e0>
 8007e32:	459a      	cmp	sl, r3
 8007e34:	d1f8      	bne.n	8007e28 <_dtoa_r+0x6c8>
 8007e36:	2230      	movs	r2, #48	@ 0x30
 8007e38:	f108 0801 	add.w	r8, r8, #1
 8007e3c:	f88a 2000 	strb.w	r2, [sl]
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	3201      	adds	r2, #1
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e7a0      	b.n	8007d8a <_dtoa_r+0x62a>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8008008 <_dtoa_r+0x8a8>)
 8007e4c:	f7f8 fc02 	bl	8000654 <__aeabi_dmul>
 8007e50:	2200      	movs	r2, #0
 8007e52:	2300      	movs	r3, #0
 8007e54:	4604      	mov	r4, r0
 8007e56:	460d      	mov	r5, r1
 8007e58:	f7f8 fe64 	bl	8000b24 <__aeabi_dcmpeq>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d09f      	beq.n	8007da0 <_dtoa_r+0x640>
 8007e60:	e7d1      	b.n	8007e06 <_dtoa_r+0x6a6>
 8007e62:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e64:	2a00      	cmp	r2, #0
 8007e66:	f000 80ea 	beq.w	800803e <_dtoa_r+0x8de>
 8007e6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e6c:	2a01      	cmp	r2, #1
 8007e6e:	f300 80cd 	bgt.w	800800c <_dtoa_r+0x8ac>
 8007e72:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	f000 80c1 	beq.w	8007ffc <_dtoa_r+0x89c>
 8007e7a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e80:	9e04      	ldr	r6, [sp, #16]
 8007e82:	9a04      	ldr	r2, [sp, #16]
 8007e84:	2101      	movs	r1, #1
 8007e86:	441a      	add	r2, r3
 8007e88:	9204      	str	r2, [sp, #16]
 8007e8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e8c:	4648      	mov	r0, r9
 8007e8e:	441a      	add	r2, r3
 8007e90:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e92:	f000 ff0b 	bl	8008cac <__i2b>
 8007e96:	4605      	mov	r5, r0
 8007e98:	b166      	cbz	r6, 8007eb4 <_dtoa_r+0x754>
 8007e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	dd09      	ble.n	8007eb4 <_dtoa_r+0x754>
 8007ea0:	42b3      	cmp	r3, r6
 8007ea2:	bfa8      	it	ge
 8007ea4:	4633      	movge	r3, r6
 8007ea6:	9a04      	ldr	r2, [sp, #16]
 8007ea8:	1af6      	subs	r6, r6, r3
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	9204      	str	r2, [sp, #16]
 8007eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb6:	b30b      	cbz	r3, 8007efc <_dtoa_r+0x79c>
 8007eb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80c6 	beq.w	800804c <_dtoa_r+0x8ec>
 8007ec0:	2c00      	cmp	r4, #0
 8007ec2:	f000 80c0 	beq.w	8008046 <_dtoa_r+0x8e6>
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4648      	mov	r0, r9
 8007ecc:	f000 ffa6 	bl	8008e1c <__pow5mult>
 8007ed0:	9a03      	ldr	r2, [sp, #12]
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	4648      	mov	r0, r9
 8007ed8:	f000 fefe 	bl	8008cd8 <__multiply>
 8007edc:	9903      	ldr	r1, [sp, #12]
 8007ede:	4680      	mov	r8, r0
 8007ee0:	4648      	mov	r0, r9
 8007ee2:	f000 fde5 	bl	8008ab0 <_Bfree>
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ee8:	1b1b      	subs	r3, r3, r4
 8007eea:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eec:	f000 80b1 	beq.w	8008052 <_dtoa_r+0x8f2>
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ef4:	4648      	mov	r0, r9
 8007ef6:	f000 ff91 	bl	8008e1c <__pow5mult>
 8007efa:	9003      	str	r0, [sp, #12]
 8007efc:	2101      	movs	r1, #1
 8007efe:	4648      	mov	r0, r9
 8007f00:	f000 fed4 	bl	8008cac <__i2b>
 8007f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f06:	4604      	mov	r4, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 81d8 	beq.w	80082be <_dtoa_r+0xb5e>
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4601      	mov	r1, r0
 8007f12:	4648      	mov	r0, r9
 8007f14:	f000 ff82 	bl	8008e1c <__pow5mult>
 8007f18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	f300 809f 	bgt.w	8008060 <_dtoa_r+0x900>
 8007f22:	9b06      	ldr	r3, [sp, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f040 8097 	bne.w	8008058 <_dtoa_r+0x8f8>
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f040 8093 	bne.w	800805c <_dtoa_r+0x8fc>
 8007f36:	9b07      	ldr	r3, [sp, #28]
 8007f38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f3c:	0d1b      	lsrs	r3, r3, #20
 8007f3e:	051b      	lsls	r3, r3, #20
 8007f40:	b133      	cbz	r3, 8007f50 <_dtoa_r+0x7f0>
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	3301      	adds	r3, #1
 8007f46:	9304      	str	r3, [sp, #16]
 8007f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4e:	2301      	movs	r3, #1
 8007f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 81b8 	beq.w	80082ca <_dtoa_r+0xb6a>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f60:	6918      	ldr	r0, [r3, #16]
 8007f62:	f000 fe57 	bl	8008c14 <__hi0bits>
 8007f66:	f1c0 0020 	rsb	r0, r0, #32
 8007f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f6c:	4418      	add	r0, r3
 8007f6e:	f010 001f 	ands.w	r0, r0, #31
 8007f72:	f000 8082 	beq.w	800807a <_dtoa_r+0x91a>
 8007f76:	f1c0 0320 	rsb	r3, r0, #32
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	dd73      	ble.n	8008066 <_dtoa_r+0x906>
 8007f7e:	9b04      	ldr	r3, [sp, #16]
 8007f80:	f1c0 001c 	rsb	r0, r0, #28
 8007f84:	4403      	add	r3, r0
 8007f86:	9304      	str	r3, [sp, #16]
 8007f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8a:	4406      	add	r6, r0
 8007f8c:	4403      	add	r3, r0
 8007f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd05      	ble.n	8007fa2 <_dtoa_r+0x842>
 8007f96:	461a      	mov	r2, r3
 8007f98:	4648      	mov	r0, r9
 8007f9a:	9903      	ldr	r1, [sp, #12]
 8007f9c:	f000 ff98 	bl	8008ed0 <__lshift>
 8007fa0:	9003      	str	r0, [sp, #12]
 8007fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	dd05      	ble.n	8007fb4 <_dtoa_r+0x854>
 8007fa8:	4621      	mov	r1, r4
 8007faa:	461a      	mov	r2, r3
 8007fac:	4648      	mov	r0, r9
 8007fae:	f000 ff8f 	bl	8008ed0 <__lshift>
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d061      	beq.n	800807e <_dtoa_r+0x91e>
 8007fba:	4621      	mov	r1, r4
 8007fbc:	9803      	ldr	r0, [sp, #12]
 8007fbe:	f000 fff3 	bl	8008fa8 <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	da5b      	bge.n	800807e <_dtoa_r+0x91e>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	220a      	movs	r2, #10
 8007fca:	4648      	mov	r0, r9
 8007fcc:	9903      	ldr	r1, [sp, #12]
 8007fce:	f000 fd91 	bl	8008af4 <__multadd>
 8007fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fd4:	f107 38ff 	add.w	r8, r7, #4294967295
 8007fd8:	9003      	str	r0, [sp, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 8177 	beq.w	80082ce <_dtoa_r+0xb6e>
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f000 fd84 	bl	8008af4 <__multadd>
 8007fec:	f1bb 0f00 	cmp.w	fp, #0
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	dc6f      	bgt.n	80080d4 <_dtoa_r+0x974>
 8007ff4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	dc49      	bgt.n	800808e <_dtoa_r+0x92e>
 8007ffa:	e06b      	b.n	80080d4 <_dtoa_r+0x974>
 8007ffc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ffe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008002:	e73c      	b.n	8007e7e <_dtoa_r+0x71e>
 8008004:	3fe00000 	.word	0x3fe00000
 8008008:	40240000 	.word	0x40240000
 800800c:	9b08      	ldr	r3, [sp, #32]
 800800e:	1e5c      	subs	r4, r3, #1
 8008010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008012:	42a3      	cmp	r3, r4
 8008014:	db09      	blt.n	800802a <_dtoa_r+0x8ca>
 8008016:	1b1c      	subs	r4, r3, r4
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f6bf af30 	bge.w	8007e80 <_dtoa_r+0x720>
 8008020:	9b04      	ldr	r3, [sp, #16]
 8008022:	9a08      	ldr	r2, [sp, #32]
 8008024:	1a9e      	subs	r6, r3, r2
 8008026:	2300      	movs	r3, #0
 8008028:	e72b      	b.n	8007e82 <_dtoa_r+0x722>
 800802a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800802c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800802e:	1ae3      	subs	r3, r4, r3
 8008030:	441a      	add	r2, r3
 8008032:	940a      	str	r4, [sp, #40]	@ 0x28
 8008034:	9e04      	ldr	r6, [sp, #16]
 8008036:	2400      	movs	r4, #0
 8008038:	9b08      	ldr	r3, [sp, #32]
 800803a:	920e      	str	r2, [sp, #56]	@ 0x38
 800803c:	e721      	b.n	8007e82 <_dtoa_r+0x722>
 800803e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008040:	9e04      	ldr	r6, [sp, #16]
 8008042:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008044:	e728      	b.n	8007e98 <_dtoa_r+0x738>
 8008046:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800804a:	e751      	b.n	8007ef0 <_dtoa_r+0x790>
 800804c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800804e:	9903      	ldr	r1, [sp, #12]
 8008050:	e750      	b.n	8007ef4 <_dtoa_r+0x794>
 8008052:	f8cd 800c 	str.w	r8, [sp, #12]
 8008056:	e751      	b.n	8007efc <_dtoa_r+0x79c>
 8008058:	2300      	movs	r3, #0
 800805a:	e779      	b.n	8007f50 <_dtoa_r+0x7f0>
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	e777      	b.n	8007f50 <_dtoa_r+0x7f0>
 8008060:	2300      	movs	r3, #0
 8008062:	930a      	str	r3, [sp, #40]	@ 0x28
 8008064:	e779      	b.n	8007f5a <_dtoa_r+0x7fa>
 8008066:	d093      	beq.n	8007f90 <_dtoa_r+0x830>
 8008068:	9a04      	ldr	r2, [sp, #16]
 800806a:	331c      	adds	r3, #28
 800806c:	441a      	add	r2, r3
 800806e:	9204      	str	r2, [sp, #16]
 8008070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008072:	441e      	add	r6, r3
 8008074:	441a      	add	r2, r3
 8008076:	9209      	str	r2, [sp, #36]	@ 0x24
 8008078:	e78a      	b.n	8007f90 <_dtoa_r+0x830>
 800807a:	4603      	mov	r3, r0
 800807c:	e7f4      	b.n	8008068 <_dtoa_r+0x908>
 800807e:	9b08      	ldr	r3, [sp, #32]
 8008080:	46b8      	mov	r8, r7
 8008082:	2b00      	cmp	r3, #0
 8008084:	dc20      	bgt.n	80080c8 <_dtoa_r+0x968>
 8008086:	469b      	mov	fp, r3
 8008088:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800808a:	2b02      	cmp	r3, #2
 800808c:	dd1e      	ble.n	80080cc <_dtoa_r+0x96c>
 800808e:	f1bb 0f00 	cmp.w	fp, #0
 8008092:	f47f adb1 	bne.w	8007bf8 <_dtoa_r+0x498>
 8008096:	4621      	mov	r1, r4
 8008098:	465b      	mov	r3, fp
 800809a:	2205      	movs	r2, #5
 800809c:	4648      	mov	r0, r9
 800809e:	f000 fd29 	bl	8008af4 <__multadd>
 80080a2:	4601      	mov	r1, r0
 80080a4:	4604      	mov	r4, r0
 80080a6:	9803      	ldr	r0, [sp, #12]
 80080a8:	f000 ff7e 	bl	8008fa8 <__mcmp>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f77f ada3 	ble.w	8007bf8 <_dtoa_r+0x498>
 80080b2:	4656      	mov	r6, sl
 80080b4:	2331      	movs	r3, #49	@ 0x31
 80080b6:	f108 0801 	add.w	r8, r8, #1
 80080ba:	f806 3b01 	strb.w	r3, [r6], #1
 80080be:	e59f      	b.n	8007c00 <_dtoa_r+0x4a0>
 80080c0:	46b8      	mov	r8, r7
 80080c2:	9c08      	ldr	r4, [sp, #32]
 80080c4:	4625      	mov	r5, r4
 80080c6:	e7f4      	b.n	80080b2 <_dtoa_r+0x952>
 80080c8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80080cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8101 	beq.w	80082d6 <_dtoa_r+0xb76>
 80080d4:	2e00      	cmp	r6, #0
 80080d6:	dd05      	ble.n	80080e4 <_dtoa_r+0x984>
 80080d8:	4629      	mov	r1, r5
 80080da:	4632      	mov	r2, r6
 80080dc:	4648      	mov	r0, r9
 80080de:	f000 fef7 	bl	8008ed0 <__lshift>
 80080e2:	4605      	mov	r5, r0
 80080e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d05c      	beq.n	80081a4 <_dtoa_r+0xa44>
 80080ea:	4648      	mov	r0, r9
 80080ec:	6869      	ldr	r1, [r5, #4]
 80080ee:	f000 fc9f 	bl	8008a30 <_Balloc>
 80080f2:	4606      	mov	r6, r0
 80080f4:	b928      	cbnz	r0, 8008102 <_dtoa_r+0x9a2>
 80080f6:	4602      	mov	r2, r0
 80080f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080fc:	4b80      	ldr	r3, [pc, #512]	@ (8008300 <_dtoa_r+0xba0>)
 80080fe:	f7ff bb43 	b.w	8007788 <_dtoa_r+0x28>
 8008102:	692a      	ldr	r2, [r5, #16]
 8008104:	f105 010c 	add.w	r1, r5, #12
 8008108:	3202      	adds	r2, #2
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	300c      	adds	r0, #12
 800810e:	f7ff fa8a 	bl	8007626 <memcpy>
 8008112:	2201      	movs	r2, #1
 8008114:	4631      	mov	r1, r6
 8008116:	4648      	mov	r0, r9
 8008118:	f000 feda 	bl	8008ed0 <__lshift>
 800811c:	462f      	mov	r7, r5
 800811e:	4605      	mov	r5, r0
 8008120:	f10a 0301 	add.w	r3, sl, #1
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	eb0a 030b 	add.w	r3, sl, fp
 800812a:	930a      	str	r3, [sp, #40]	@ 0x28
 800812c:	9b06      	ldr	r3, [sp, #24]
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	9309      	str	r3, [sp, #36]	@ 0x24
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	4621      	mov	r1, r4
 8008138:	9803      	ldr	r0, [sp, #12]
 800813a:	f103 3bff 	add.w	fp, r3, #4294967295
 800813e:	f7ff fa87 	bl	8007650 <quorem>
 8008142:	4603      	mov	r3, r0
 8008144:	4639      	mov	r1, r7
 8008146:	3330      	adds	r3, #48	@ 0x30
 8008148:	9006      	str	r0, [sp, #24]
 800814a:	9803      	ldr	r0, [sp, #12]
 800814c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800814e:	f000 ff2b 	bl	8008fa8 <__mcmp>
 8008152:	462a      	mov	r2, r5
 8008154:	9008      	str	r0, [sp, #32]
 8008156:	4621      	mov	r1, r4
 8008158:	4648      	mov	r0, r9
 800815a:	f000 ff41 	bl	8008fe0 <__mdiff>
 800815e:	68c2      	ldr	r2, [r0, #12]
 8008160:	4606      	mov	r6, r0
 8008162:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008164:	bb02      	cbnz	r2, 80081a8 <_dtoa_r+0xa48>
 8008166:	4601      	mov	r1, r0
 8008168:	9803      	ldr	r0, [sp, #12]
 800816a:	f000 ff1d 	bl	8008fa8 <__mcmp>
 800816e:	4602      	mov	r2, r0
 8008170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008172:	4631      	mov	r1, r6
 8008174:	4648      	mov	r0, r9
 8008176:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800817a:	f000 fc99 	bl	8008ab0 <_Bfree>
 800817e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008180:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008182:	9e04      	ldr	r6, [sp, #16]
 8008184:	ea42 0103 	orr.w	r1, r2, r3
 8008188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800818a:	4319      	orrs	r1, r3
 800818c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800818e:	d10d      	bne.n	80081ac <_dtoa_r+0xa4c>
 8008190:	2b39      	cmp	r3, #57	@ 0x39
 8008192:	d027      	beq.n	80081e4 <_dtoa_r+0xa84>
 8008194:	9a08      	ldr	r2, [sp, #32]
 8008196:	2a00      	cmp	r2, #0
 8008198:	dd01      	ble.n	800819e <_dtoa_r+0xa3e>
 800819a:	9b06      	ldr	r3, [sp, #24]
 800819c:	3331      	adds	r3, #49	@ 0x31
 800819e:	f88b 3000 	strb.w	r3, [fp]
 80081a2:	e52e      	b.n	8007c02 <_dtoa_r+0x4a2>
 80081a4:	4628      	mov	r0, r5
 80081a6:	e7b9      	b.n	800811c <_dtoa_r+0x9bc>
 80081a8:	2201      	movs	r2, #1
 80081aa:	e7e2      	b.n	8008172 <_dtoa_r+0xa12>
 80081ac:	9908      	ldr	r1, [sp, #32]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	db04      	blt.n	80081bc <_dtoa_r+0xa5c>
 80081b2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80081b4:	4301      	orrs	r1, r0
 80081b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081b8:	4301      	orrs	r1, r0
 80081ba:	d120      	bne.n	80081fe <_dtoa_r+0xa9e>
 80081bc:	2a00      	cmp	r2, #0
 80081be:	ddee      	ble.n	800819e <_dtoa_r+0xa3e>
 80081c0:	2201      	movs	r2, #1
 80081c2:	9903      	ldr	r1, [sp, #12]
 80081c4:	4648      	mov	r0, r9
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	f000 fe82 	bl	8008ed0 <__lshift>
 80081cc:	4621      	mov	r1, r4
 80081ce:	9003      	str	r0, [sp, #12]
 80081d0:	f000 feea 	bl	8008fa8 <__mcmp>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	dc02      	bgt.n	80081e0 <_dtoa_r+0xa80>
 80081da:	d1e0      	bne.n	800819e <_dtoa_r+0xa3e>
 80081dc:	07da      	lsls	r2, r3, #31
 80081de:	d5de      	bpl.n	800819e <_dtoa_r+0xa3e>
 80081e0:	2b39      	cmp	r3, #57	@ 0x39
 80081e2:	d1da      	bne.n	800819a <_dtoa_r+0xa3a>
 80081e4:	2339      	movs	r3, #57	@ 0x39
 80081e6:	f88b 3000 	strb.w	r3, [fp]
 80081ea:	4633      	mov	r3, r6
 80081ec:	461e      	mov	r6, r3
 80081ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	2a39      	cmp	r2, #57	@ 0x39
 80081f6:	d04e      	beq.n	8008296 <_dtoa_r+0xb36>
 80081f8:	3201      	adds	r2, #1
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	e501      	b.n	8007c02 <_dtoa_r+0x4a2>
 80081fe:	2a00      	cmp	r2, #0
 8008200:	dd03      	ble.n	800820a <_dtoa_r+0xaaa>
 8008202:	2b39      	cmp	r3, #57	@ 0x39
 8008204:	d0ee      	beq.n	80081e4 <_dtoa_r+0xa84>
 8008206:	3301      	adds	r3, #1
 8008208:	e7c9      	b.n	800819e <_dtoa_r+0xa3e>
 800820a:	9a04      	ldr	r2, [sp, #16]
 800820c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800820e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008212:	428a      	cmp	r2, r1
 8008214:	d028      	beq.n	8008268 <_dtoa_r+0xb08>
 8008216:	2300      	movs	r3, #0
 8008218:	220a      	movs	r2, #10
 800821a:	9903      	ldr	r1, [sp, #12]
 800821c:	4648      	mov	r0, r9
 800821e:	f000 fc69 	bl	8008af4 <__multadd>
 8008222:	42af      	cmp	r7, r5
 8008224:	9003      	str	r0, [sp, #12]
 8008226:	f04f 0300 	mov.w	r3, #0
 800822a:	f04f 020a 	mov.w	r2, #10
 800822e:	4639      	mov	r1, r7
 8008230:	4648      	mov	r0, r9
 8008232:	d107      	bne.n	8008244 <_dtoa_r+0xae4>
 8008234:	f000 fc5e 	bl	8008af4 <__multadd>
 8008238:	4607      	mov	r7, r0
 800823a:	4605      	mov	r5, r0
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	3301      	adds	r3, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	e777      	b.n	8008134 <_dtoa_r+0x9d4>
 8008244:	f000 fc56 	bl	8008af4 <__multadd>
 8008248:	4629      	mov	r1, r5
 800824a:	4607      	mov	r7, r0
 800824c:	2300      	movs	r3, #0
 800824e:	220a      	movs	r2, #10
 8008250:	4648      	mov	r0, r9
 8008252:	f000 fc4f 	bl	8008af4 <__multadd>
 8008256:	4605      	mov	r5, r0
 8008258:	e7f0      	b.n	800823c <_dtoa_r+0xadc>
 800825a:	f1bb 0f00 	cmp.w	fp, #0
 800825e:	bfcc      	ite	gt
 8008260:	465e      	movgt	r6, fp
 8008262:	2601      	movle	r6, #1
 8008264:	2700      	movs	r7, #0
 8008266:	4456      	add	r6, sl
 8008268:	2201      	movs	r2, #1
 800826a:	9903      	ldr	r1, [sp, #12]
 800826c:	4648      	mov	r0, r9
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	f000 fe2e 	bl	8008ed0 <__lshift>
 8008274:	4621      	mov	r1, r4
 8008276:	9003      	str	r0, [sp, #12]
 8008278:	f000 fe96 	bl	8008fa8 <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	dcb4      	bgt.n	80081ea <_dtoa_r+0xa8a>
 8008280:	d102      	bne.n	8008288 <_dtoa_r+0xb28>
 8008282:	9b04      	ldr	r3, [sp, #16]
 8008284:	07db      	lsls	r3, r3, #31
 8008286:	d4b0      	bmi.n	80081ea <_dtoa_r+0xa8a>
 8008288:	4633      	mov	r3, r6
 800828a:	461e      	mov	r6, r3
 800828c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008290:	2a30      	cmp	r2, #48	@ 0x30
 8008292:	d0fa      	beq.n	800828a <_dtoa_r+0xb2a>
 8008294:	e4b5      	b.n	8007c02 <_dtoa_r+0x4a2>
 8008296:	459a      	cmp	sl, r3
 8008298:	d1a8      	bne.n	80081ec <_dtoa_r+0xa8c>
 800829a:	2331      	movs	r3, #49	@ 0x31
 800829c:	f108 0801 	add.w	r8, r8, #1
 80082a0:	f88a 3000 	strb.w	r3, [sl]
 80082a4:	e4ad      	b.n	8007c02 <_dtoa_r+0x4a2>
 80082a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008304 <_dtoa_r+0xba4>
 80082ac:	b11b      	cbz	r3, 80082b6 <_dtoa_r+0xb56>
 80082ae:	f10a 0308 	add.w	r3, sl, #8
 80082b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082b4:	6013      	str	r3, [r2, #0]
 80082b6:	4650      	mov	r0, sl
 80082b8:	b017      	add	sp, #92	@ 0x5c
 80082ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	f77f ae2e 	ble.w	8007f22 <_dtoa_r+0x7c2>
 80082c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ca:	2001      	movs	r0, #1
 80082cc:	e64d      	b.n	8007f6a <_dtoa_r+0x80a>
 80082ce:	f1bb 0f00 	cmp.w	fp, #0
 80082d2:	f77f aed9 	ble.w	8008088 <_dtoa_r+0x928>
 80082d6:	4656      	mov	r6, sl
 80082d8:	4621      	mov	r1, r4
 80082da:	9803      	ldr	r0, [sp, #12]
 80082dc:	f7ff f9b8 	bl	8007650 <quorem>
 80082e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80082e4:	f806 3b01 	strb.w	r3, [r6], #1
 80082e8:	eba6 020a 	sub.w	r2, r6, sl
 80082ec:	4593      	cmp	fp, r2
 80082ee:	ddb4      	ble.n	800825a <_dtoa_r+0xafa>
 80082f0:	2300      	movs	r3, #0
 80082f2:	220a      	movs	r2, #10
 80082f4:	4648      	mov	r0, r9
 80082f6:	9903      	ldr	r1, [sp, #12]
 80082f8:	f000 fbfc 	bl	8008af4 <__multadd>
 80082fc:	9003      	str	r0, [sp, #12]
 80082fe:	e7eb      	b.n	80082d8 <_dtoa_r+0xb78>
 8008300:	08009afa 	.word	0x08009afa
 8008304:	08009a7e 	.word	0x08009a7e

08008308 <_free_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4605      	mov	r5, r0
 800830c:	2900      	cmp	r1, #0
 800830e:	d040      	beq.n	8008392 <_free_r+0x8a>
 8008310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008314:	1f0c      	subs	r4, r1, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfb8      	it	lt
 800831a:	18e4      	addlt	r4, r4, r3
 800831c:	f7fd fc5e 	bl	8005bdc <__malloc_lock>
 8008320:	4a1c      	ldr	r2, [pc, #112]	@ (8008394 <_free_r+0x8c>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	b933      	cbnz	r3, 8008334 <_free_r+0x2c>
 8008326:	6063      	str	r3, [r4, #4]
 8008328:	6014      	str	r4, [r2, #0]
 800832a:	4628      	mov	r0, r5
 800832c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008330:	f7fd bc5a 	b.w	8005be8 <__malloc_unlock>
 8008334:	42a3      	cmp	r3, r4
 8008336:	d908      	bls.n	800834a <_free_r+0x42>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	1821      	adds	r1, r4, r0
 800833c:	428b      	cmp	r3, r1
 800833e:	bf01      	itttt	eq
 8008340:	6819      	ldreq	r1, [r3, #0]
 8008342:	685b      	ldreq	r3, [r3, #4]
 8008344:	1809      	addeq	r1, r1, r0
 8008346:	6021      	streq	r1, [r4, #0]
 8008348:	e7ed      	b.n	8008326 <_free_r+0x1e>
 800834a:	461a      	mov	r2, r3
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	b10b      	cbz	r3, 8008354 <_free_r+0x4c>
 8008350:	42a3      	cmp	r3, r4
 8008352:	d9fa      	bls.n	800834a <_free_r+0x42>
 8008354:	6811      	ldr	r1, [r2, #0]
 8008356:	1850      	adds	r0, r2, r1
 8008358:	42a0      	cmp	r0, r4
 800835a:	d10b      	bne.n	8008374 <_free_r+0x6c>
 800835c:	6820      	ldr	r0, [r4, #0]
 800835e:	4401      	add	r1, r0
 8008360:	1850      	adds	r0, r2, r1
 8008362:	4283      	cmp	r3, r0
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	d1e0      	bne.n	800832a <_free_r+0x22>
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	4408      	add	r0, r1
 800836e:	6010      	str	r0, [r2, #0]
 8008370:	6053      	str	r3, [r2, #4]
 8008372:	e7da      	b.n	800832a <_free_r+0x22>
 8008374:	d902      	bls.n	800837c <_free_r+0x74>
 8008376:	230c      	movs	r3, #12
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	e7d6      	b.n	800832a <_free_r+0x22>
 800837c:	6820      	ldr	r0, [r4, #0]
 800837e:	1821      	adds	r1, r4, r0
 8008380:	428b      	cmp	r3, r1
 8008382:	bf01      	itttt	eq
 8008384:	6819      	ldreq	r1, [r3, #0]
 8008386:	685b      	ldreq	r3, [r3, #4]
 8008388:	1809      	addeq	r1, r1, r0
 800838a:	6021      	streq	r1, [r4, #0]
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	6054      	str	r4, [r2, #4]
 8008390:	e7cb      	b.n	800832a <_free_r+0x22>
 8008392:	bd38      	pop	{r3, r4, r5, pc}
 8008394:	20000358 	.word	0x20000358

08008398 <rshift>:
 8008398:	6903      	ldr	r3, [r0, #16]
 800839a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800839e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80083a2:	f100 0414 	add.w	r4, r0, #20
 80083a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80083aa:	dd46      	ble.n	800843a <rshift+0xa2>
 80083ac:	f011 011f 	ands.w	r1, r1, #31
 80083b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80083b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80083b8:	d10c      	bne.n	80083d4 <rshift+0x3c>
 80083ba:	4629      	mov	r1, r5
 80083bc:	f100 0710 	add.w	r7, r0, #16
 80083c0:	42b1      	cmp	r1, r6
 80083c2:	d335      	bcc.n	8008430 <rshift+0x98>
 80083c4:	1a9b      	subs	r3, r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	1eea      	subs	r2, r5, #3
 80083ca:	4296      	cmp	r6, r2
 80083cc:	bf38      	it	cc
 80083ce:	2300      	movcc	r3, #0
 80083d0:	4423      	add	r3, r4
 80083d2:	e015      	b.n	8008400 <rshift+0x68>
 80083d4:	46a1      	mov	r9, r4
 80083d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80083da:	f1c1 0820 	rsb	r8, r1, #32
 80083de:	40cf      	lsrs	r7, r1
 80083e0:	f105 0e04 	add.w	lr, r5, #4
 80083e4:	4576      	cmp	r6, lr
 80083e6:	46f4      	mov	ip, lr
 80083e8:	d816      	bhi.n	8008418 <rshift+0x80>
 80083ea:	1a9a      	subs	r2, r3, r2
 80083ec:	0092      	lsls	r2, r2, #2
 80083ee:	3a04      	subs	r2, #4
 80083f0:	3501      	adds	r5, #1
 80083f2:	42ae      	cmp	r6, r5
 80083f4:	bf38      	it	cc
 80083f6:	2200      	movcc	r2, #0
 80083f8:	18a3      	adds	r3, r4, r2
 80083fa:	50a7      	str	r7, [r4, r2]
 80083fc:	b107      	cbz	r7, 8008400 <rshift+0x68>
 80083fe:	3304      	adds	r3, #4
 8008400:	42a3      	cmp	r3, r4
 8008402:	eba3 0204 	sub.w	r2, r3, r4
 8008406:	bf08      	it	eq
 8008408:	2300      	moveq	r3, #0
 800840a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800840e:	6102      	str	r2, [r0, #16]
 8008410:	bf08      	it	eq
 8008412:	6143      	streq	r3, [r0, #20]
 8008414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008418:	f8dc c000 	ldr.w	ip, [ip]
 800841c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008420:	ea4c 0707 	orr.w	r7, ip, r7
 8008424:	f849 7b04 	str.w	r7, [r9], #4
 8008428:	f85e 7b04 	ldr.w	r7, [lr], #4
 800842c:	40cf      	lsrs	r7, r1
 800842e:	e7d9      	b.n	80083e4 <rshift+0x4c>
 8008430:	f851 cb04 	ldr.w	ip, [r1], #4
 8008434:	f847 cf04 	str.w	ip, [r7, #4]!
 8008438:	e7c2      	b.n	80083c0 <rshift+0x28>
 800843a:	4623      	mov	r3, r4
 800843c:	e7e0      	b.n	8008400 <rshift+0x68>

0800843e <__hexdig_fun>:
 800843e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008442:	2b09      	cmp	r3, #9
 8008444:	d802      	bhi.n	800844c <__hexdig_fun+0xe>
 8008446:	3820      	subs	r0, #32
 8008448:	b2c0      	uxtb	r0, r0
 800844a:	4770      	bx	lr
 800844c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008450:	2b05      	cmp	r3, #5
 8008452:	d801      	bhi.n	8008458 <__hexdig_fun+0x1a>
 8008454:	3847      	subs	r0, #71	@ 0x47
 8008456:	e7f7      	b.n	8008448 <__hexdig_fun+0xa>
 8008458:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800845c:	2b05      	cmp	r3, #5
 800845e:	d801      	bhi.n	8008464 <__hexdig_fun+0x26>
 8008460:	3827      	subs	r0, #39	@ 0x27
 8008462:	e7f1      	b.n	8008448 <__hexdig_fun+0xa>
 8008464:	2000      	movs	r0, #0
 8008466:	4770      	bx	lr

08008468 <__gethex>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	468a      	mov	sl, r1
 800846e:	4690      	mov	r8, r2
 8008470:	b085      	sub	sp, #20
 8008472:	9302      	str	r3, [sp, #8]
 8008474:	680b      	ldr	r3, [r1, #0]
 8008476:	9001      	str	r0, [sp, #4]
 8008478:	1c9c      	adds	r4, r3, #2
 800847a:	46a1      	mov	r9, r4
 800847c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008480:	2830      	cmp	r0, #48	@ 0x30
 8008482:	d0fa      	beq.n	800847a <__gethex+0x12>
 8008484:	eba9 0303 	sub.w	r3, r9, r3
 8008488:	f1a3 0b02 	sub.w	fp, r3, #2
 800848c:	f7ff ffd7 	bl	800843e <__hexdig_fun>
 8008490:	4605      	mov	r5, r0
 8008492:	2800      	cmp	r0, #0
 8008494:	d168      	bne.n	8008568 <__gethex+0x100>
 8008496:	2201      	movs	r2, #1
 8008498:	4648      	mov	r0, r9
 800849a:	499f      	ldr	r1, [pc, #636]	@ (8008718 <__gethex+0x2b0>)
 800849c:	f7ff f81c 	bl	80074d8 <strncmp>
 80084a0:	4607      	mov	r7, r0
 80084a2:	2800      	cmp	r0, #0
 80084a4:	d167      	bne.n	8008576 <__gethex+0x10e>
 80084a6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80084aa:	4626      	mov	r6, r4
 80084ac:	f7ff ffc7 	bl	800843e <__hexdig_fun>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	d062      	beq.n	800857a <__gethex+0x112>
 80084b4:	4623      	mov	r3, r4
 80084b6:	7818      	ldrb	r0, [r3, #0]
 80084b8:	4699      	mov	r9, r3
 80084ba:	2830      	cmp	r0, #48	@ 0x30
 80084bc:	f103 0301 	add.w	r3, r3, #1
 80084c0:	d0f9      	beq.n	80084b6 <__gethex+0x4e>
 80084c2:	f7ff ffbc 	bl	800843e <__hexdig_fun>
 80084c6:	fab0 f580 	clz	r5, r0
 80084ca:	f04f 0b01 	mov.w	fp, #1
 80084ce:	096d      	lsrs	r5, r5, #5
 80084d0:	464a      	mov	r2, r9
 80084d2:	4616      	mov	r6, r2
 80084d4:	7830      	ldrb	r0, [r6, #0]
 80084d6:	3201      	adds	r2, #1
 80084d8:	f7ff ffb1 	bl	800843e <__hexdig_fun>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d1f8      	bne.n	80084d2 <__gethex+0x6a>
 80084e0:	2201      	movs	r2, #1
 80084e2:	4630      	mov	r0, r6
 80084e4:	498c      	ldr	r1, [pc, #560]	@ (8008718 <__gethex+0x2b0>)
 80084e6:	f7fe fff7 	bl	80074d8 <strncmp>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d13f      	bne.n	800856e <__gethex+0x106>
 80084ee:	b944      	cbnz	r4, 8008502 <__gethex+0x9a>
 80084f0:	1c74      	adds	r4, r6, #1
 80084f2:	4622      	mov	r2, r4
 80084f4:	4616      	mov	r6, r2
 80084f6:	7830      	ldrb	r0, [r6, #0]
 80084f8:	3201      	adds	r2, #1
 80084fa:	f7ff ffa0 	bl	800843e <__hexdig_fun>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d1f8      	bne.n	80084f4 <__gethex+0x8c>
 8008502:	1ba4      	subs	r4, r4, r6
 8008504:	00a7      	lsls	r7, r4, #2
 8008506:	7833      	ldrb	r3, [r6, #0]
 8008508:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800850c:	2b50      	cmp	r3, #80	@ 0x50
 800850e:	d13e      	bne.n	800858e <__gethex+0x126>
 8008510:	7873      	ldrb	r3, [r6, #1]
 8008512:	2b2b      	cmp	r3, #43	@ 0x2b
 8008514:	d033      	beq.n	800857e <__gethex+0x116>
 8008516:	2b2d      	cmp	r3, #45	@ 0x2d
 8008518:	d034      	beq.n	8008584 <__gethex+0x11c>
 800851a:	2400      	movs	r4, #0
 800851c:	1c71      	adds	r1, r6, #1
 800851e:	7808      	ldrb	r0, [r1, #0]
 8008520:	f7ff ff8d 	bl	800843e <__hexdig_fun>
 8008524:	1e43      	subs	r3, r0, #1
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b18      	cmp	r3, #24
 800852a:	d830      	bhi.n	800858e <__gethex+0x126>
 800852c:	f1a0 0210 	sub.w	r2, r0, #16
 8008530:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008534:	f7ff ff83 	bl	800843e <__hexdig_fun>
 8008538:	f100 3cff 	add.w	ip, r0, #4294967295
 800853c:	fa5f fc8c 	uxtb.w	ip, ip
 8008540:	f1bc 0f18 	cmp.w	ip, #24
 8008544:	f04f 030a 	mov.w	r3, #10
 8008548:	d91e      	bls.n	8008588 <__gethex+0x120>
 800854a:	b104      	cbz	r4, 800854e <__gethex+0xe6>
 800854c:	4252      	negs	r2, r2
 800854e:	4417      	add	r7, r2
 8008550:	f8ca 1000 	str.w	r1, [sl]
 8008554:	b1ed      	cbz	r5, 8008592 <__gethex+0x12a>
 8008556:	f1bb 0f00 	cmp.w	fp, #0
 800855a:	bf0c      	ite	eq
 800855c:	2506      	moveq	r5, #6
 800855e:	2500      	movne	r5, #0
 8008560:	4628      	mov	r0, r5
 8008562:	b005      	add	sp, #20
 8008564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	2500      	movs	r5, #0
 800856a:	462c      	mov	r4, r5
 800856c:	e7b0      	b.n	80084d0 <__gethex+0x68>
 800856e:	2c00      	cmp	r4, #0
 8008570:	d1c7      	bne.n	8008502 <__gethex+0x9a>
 8008572:	4627      	mov	r7, r4
 8008574:	e7c7      	b.n	8008506 <__gethex+0x9e>
 8008576:	464e      	mov	r6, r9
 8008578:	462f      	mov	r7, r5
 800857a:	2501      	movs	r5, #1
 800857c:	e7c3      	b.n	8008506 <__gethex+0x9e>
 800857e:	2400      	movs	r4, #0
 8008580:	1cb1      	adds	r1, r6, #2
 8008582:	e7cc      	b.n	800851e <__gethex+0xb6>
 8008584:	2401      	movs	r4, #1
 8008586:	e7fb      	b.n	8008580 <__gethex+0x118>
 8008588:	fb03 0002 	mla	r0, r3, r2, r0
 800858c:	e7ce      	b.n	800852c <__gethex+0xc4>
 800858e:	4631      	mov	r1, r6
 8008590:	e7de      	b.n	8008550 <__gethex+0xe8>
 8008592:	4629      	mov	r1, r5
 8008594:	eba6 0309 	sub.w	r3, r6, r9
 8008598:	3b01      	subs	r3, #1
 800859a:	2b07      	cmp	r3, #7
 800859c:	dc0a      	bgt.n	80085b4 <__gethex+0x14c>
 800859e:	9801      	ldr	r0, [sp, #4]
 80085a0:	f000 fa46 	bl	8008a30 <_Balloc>
 80085a4:	4604      	mov	r4, r0
 80085a6:	b940      	cbnz	r0, 80085ba <__gethex+0x152>
 80085a8:	4602      	mov	r2, r0
 80085aa:	21e4      	movs	r1, #228	@ 0xe4
 80085ac:	4b5b      	ldr	r3, [pc, #364]	@ (800871c <__gethex+0x2b4>)
 80085ae:	485c      	ldr	r0, [pc, #368]	@ (8008720 <__gethex+0x2b8>)
 80085b0:	f001 f956 	bl	8009860 <__assert_func>
 80085b4:	3101      	adds	r1, #1
 80085b6:	105b      	asrs	r3, r3, #1
 80085b8:	e7ef      	b.n	800859a <__gethex+0x132>
 80085ba:	2300      	movs	r3, #0
 80085bc:	f100 0a14 	add.w	sl, r0, #20
 80085c0:	4655      	mov	r5, sl
 80085c2:	469b      	mov	fp, r3
 80085c4:	45b1      	cmp	r9, r6
 80085c6:	d337      	bcc.n	8008638 <__gethex+0x1d0>
 80085c8:	f845 bb04 	str.w	fp, [r5], #4
 80085cc:	eba5 050a 	sub.w	r5, r5, sl
 80085d0:	10ad      	asrs	r5, r5, #2
 80085d2:	6125      	str	r5, [r4, #16]
 80085d4:	4658      	mov	r0, fp
 80085d6:	f000 fb1d 	bl	8008c14 <__hi0bits>
 80085da:	016d      	lsls	r5, r5, #5
 80085dc:	f8d8 6000 	ldr.w	r6, [r8]
 80085e0:	1a2d      	subs	r5, r5, r0
 80085e2:	42b5      	cmp	r5, r6
 80085e4:	dd54      	ble.n	8008690 <__gethex+0x228>
 80085e6:	1bad      	subs	r5, r5, r6
 80085e8:	4629      	mov	r1, r5
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fe9f 	bl	800932e <__any_on>
 80085f0:	4681      	mov	r9, r0
 80085f2:	b178      	cbz	r0, 8008614 <__gethex+0x1ac>
 80085f4:	f04f 0901 	mov.w	r9, #1
 80085f8:	1e6b      	subs	r3, r5, #1
 80085fa:	1159      	asrs	r1, r3, #5
 80085fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008600:	f003 021f 	and.w	r2, r3, #31
 8008604:	fa09 f202 	lsl.w	r2, r9, r2
 8008608:	420a      	tst	r2, r1
 800860a:	d003      	beq.n	8008614 <__gethex+0x1ac>
 800860c:	454b      	cmp	r3, r9
 800860e:	dc36      	bgt.n	800867e <__gethex+0x216>
 8008610:	f04f 0902 	mov.w	r9, #2
 8008614:	4629      	mov	r1, r5
 8008616:	4620      	mov	r0, r4
 8008618:	f7ff febe 	bl	8008398 <rshift>
 800861c:	442f      	add	r7, r5
 800861e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008622:	42bb      	cmp	r3, r7
 8008624:	da42      	bge.n	80086ac <__gethex+0x244>
 8008626:	4621      	mov	r1, r4
 8008628:	9801      	ldr	r0, [sp, #4]
 800862a:	f000 fa41 	bl	8008ab0 <_Bfree>
 800862e:	2300      	movs	r3, #0
 8008630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008632:	25a3      	movs	r5, #163	@ 0xa3
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	e793      	b.n	8008560 <__gethex+0xf8>
 8008638:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800863c:	2a2e      	cmp	r2, #46	@ 0x2e
 800863e:	d012      	beq.n	8008666 <__gethex+0x1fe>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d104      	bne.n	800864e <__gethex+0x1e6>
 8008644:	f845 bb04 	str.w	fp, [r5], #4
 8008648:	f04f 0b00 	mov.w	fp, #0
 800864c:	465b      	mov	r3, fp
 800864e:	7830      	ldrb	r0, [r6, #0]
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	f7ff fef4 	bl	800843e <__hexdig_fun>
 8008656:	9b03      	ldr	r3, [sp, #12]
 8008658:	f000 000f 	and.w	r0, r0, #15
 800865c:	4098      	lsls	r0, r3
 800865e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008662:	3304      	adds	r3, #4
 8008664:	e7ae      	b.n	80085c4 <__gethex+0x15c>
 8008666:	45b1      	cmp	r9, r6
 8008668:	d8ea      	bhi.n	8008640 <__gethex+0x1d8>
 800866a:	2201      	movs	r2, #1
 800866c:	4630      	mov	r0, r6
 800866e:	492a      	ldr	r1, [pc, #168]	@ (8008718 <__gethex+0x2b0>)
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	f7fe ff31 	bl	80074d8 <strncmp>
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	2800      	cmp	r0, #0
 800867a:	d1e1      	bne.n	8008640 <__gethex+0x1d8>
 800867c:	e7a2      	b.n	80085c4 <__gethex+0x15c>
 800867e:	4620      	mov	r0, r4
 8008680:	1ea9      	subs	r1, r5, #2
 8008682:	f000 fe54 	bl	800932e <__any_on>
 8008686:	2800      	cmp	r0, #0
 8008688:	d0c2      	beq.n	8008610 <__gethex+0x1a8>
 800868a:	f04f 0903 	mov.w	r9, #3
 800868e:	e7c1      	b.n	8008614 <__gethex+0x1ac>
 8008690:	da09      	bge.n	80086a6 <__gethex+0x23e>
 8008692:	1b75      	subs	r5, r6, r5
 8008694:	4621      	mov	r1, r4
 8008696:	462a      	mov	r2, r5
 8008698:	9801      	ldr	r0, [sp, #4]
 800869a:	f000 fc19 	bl	8008ed0 <__lshift>
 800869e:	4604      	mov	r4, r0
 80086a0:	1b7f      	subs	r7, r7, r5
 80086a2:	f100 0a14 	add.w	sl, r0, #20
 80086a6:	f04f 0900 	mov.w	r9, #0
 80086aa:	e7b8      	b.n	800861e <__gethex+0x1b6>
 80086ac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80086b0:	42bd      	cmp	r5, r7
 80086b2:	dd6f      	ble.n	8008794 <__gethex+0x32c>
 80086b4:	1bed      	subs	r5, r5, r7
 80086b6:	42ae      	cmp	r6, r5
 80086b8:	dc34      	bgt.n	8008724 <__gethex+0x2bc>
 80086ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d022      	beq.n	8008708 <__gethex+0x2a0>
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d024      	beq.n	8008710 <__gethex+0x2a8>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d115      	bne.n	80086f6 <__gethex+0x28e>
 80086ca:	42ae      	cmp	r6, r5
 80086cc:	d113      	bne.n	80086f6 <__gethex+0x28e>
 80086ce:	2e01      	cmp	r6, #1
 80086d0:	d10b      	bne.n	80086ea <__gethex+0x282>
 80086d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80086d6:	9a02      	ldr	r2, [sp, #8]
 80086d8:	2562      	movs	r5, #98	@ 0x62
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	2301      	movs	r3, #1
 80086de:	6123      	str	r3, [r4, #16]
 80086e0:	f8ca 3000 	str.w	r3, [sl]
 80086e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e6:	601c      	str	r4, [r3, #0]
 80086e8:	e73a      	b.n	8008560 <__gethex+0xf8>
 80086ea:	4620      	mov	r0, r4
 80086ec:	1e71      	subs	r1, r6, #1
 80086ee:	f000 fe1e 	bl	800932e <__any_on>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d1ed      	bne.n	80086d2 <__gethex+0x26a>
 80086f6:	4621      	mov	r1, r4
 80086f8:	9801      	ldr	r0, [sp, #4]
 80086fa:	f000 f9d9 	bl	8008ab0 <_Bfree>
 80086fe:	2300      	movs	r3, #0
 8008700:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008702:	2550      	movs	r5, #80	@ 0x50
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	e72b      	b.n	8008560 <__gethex+0xf8>
 8008708:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1f3      	bne.n	80086f6 <__gethex+0x28e>
 800870e:	e7e0      	b.n	80086d2 <__gethex+0x26a>
 8008710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1dd      	bne.n	80086d2 <__gethex+0x26a>
 8008716:	e7ee      	b.n	80086f6 <__gethex+0x28e>
 8008718:	08009a40 	.word	0x08009a40
 800871c:	08009afa 	.word	0x08009afa
 8008720:	08009b0b 	.word	0x08009b0b
 8008724:	1e6f      	subs	r7, r5, #1
 8008726:	f1b9 0f00 	cmp.w	r9, #0
 800872a:	d130      	bne.n	800878e <__gethex+0x326>
 800872c:	b127      	cbz	r7, 8008738 <__gethex+0x2d0>
 800872e:	4639      	mov	r1, r7
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fdfc 	bl	800932e <__any_on>
 8008736:	4681      	mov	r9, r0
 8008738:	2301      	movs	r3, #1
 800873a:	4629      	mov	r1, r5
 800873c:	1b76      	subs	r6, r6, r5
 800873e:	2502      	movs	r5, #2
 8008740:	117a      	asrs	r2, r7, #5
 8008742:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008746:	f007 071f 	and.w	r7, r7, #31
 800874a:	40bb      	lsls	r3, r7
 800874c:	4213      	tst	r3, r2
 800874e:	4620      	mov	r0, r4
 8008750:	bf18      	it	ne
 8008752:	f049 0902 	orrne.w	r9, r9, #2
 8008756:	f7ff fe1f 	bl	8008398 <rshift>
 800875a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800875e:	f1b9 0f00 	cmp.w	r9, #0
 8008762:	d047      	beq.n	80087f4 <__gethex+0x38c>
 8008764:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d015      	beq.n	8008798 <__gethex+0x330>
 800876c:	2b03      	cmp	r3, #3
 800876e:	d017      	beq.n	80087a0 <__gethex+0x338>
 8008770:	2b01      	cmp	r3, #1
 8008772:	d109      	bne.n	8008788 <__gethex+0x320>
 8008774:	f019 0f02 	tst.w	r9, #2
 8008778:	d006      	beq.n	8008788 <__gethex+0x320>
 800877a:	f8da 3000 	ldr.w	r3, [sl]
 800877e:	ea49 0903 	orr.w	r9, r9, r3
 8008782:	f019 0f01 	tst.w	r9, #1
 8008786:	d10e      	bne.n	80087a6 <__gethex+0x33e>
 8008788:	f045 0510 	orr.w	r5, r5, #16
 800878c:	e032      	b.n	80087f4 <__gethex+0x38c>
 800878e:	f04f 0901 	mov.w	r9, #1
 8008792:	e7d1      	b.n	8008738 <__gethex+0x2d0>
 8008794:	2501      	movs	r5, #1
 8008796:	e7e2      	b.n	800875e <__gethex+0x2f6>
 8008798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800879a:	f1c3 0301 	rsb	r3, r3, #1
 800879e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0f0      	beq.n	8008788 <__gethex+0x320>
 80087a6:	f04f 0c00 	mov.w	ip, #0
 80087aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80087ae:	f104 0314 	add.w	r3, r4, #20
 80087b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80087b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80087c4:	d01b      	beq.n	80087fe <__gethex+0x396>
 80087c6:	3201      	adds	r2, #1
 80087c8:	6002      	str	r2, [r0, #0]
 80087ca:	2d02      	cmp	r5, #2
 80087cc:	f104 0314 	add.w	r3, r4, #20
 80087d0:	d13c      	bne.n	800884c <__gethex+0x3e4>
 80087d2:	f8d8 2000 	ldr.w	r2, [r8]
 80087d6:	3a01      	subs	r2, #1
 80087d8:	42b2      	cmp	r2, r6
 80087da:	d109      	bne.n	80087f0 <__gethex+0x388>
 80087dc:	2201      	movs	r2, #1
 80087de:	1171      	asrs	r1, r6, #5
 80087e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80087e4:	f006 061f 	and.w	r6, r6, #31
 80087e8:	fa02 f606 	lsl.w	r6, r2, r6
 80087ec:	421e      	tst	r6, r3
 80087ee:	d13a      	bne.n	8008866 <__gethex+0x3fe>
 80087f0:	f045 0520 	orr.w	r5, r5, #32
 80087f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087f6:	601c      	str	r4, [r3, #0]
 80087f8:	9b02      	ldr	r3, [sp, #8]
 80087fa:	601f      	str	r7, [r3, #0]
 80087fc:	e6b0      	b.n	8008560 <__gethex+0xf8>
 80087fe:	4299      	cmp	r1, r3
 8008800:	f843 cc04 	str.w	ip, [r3, #-4]
 8008804:	d8d9      	bhi.n	80087ba <__gethex+0x352>
 8008806:	68a3      	ldr	r3, [r4, #8]
 8008808:	459b      	cmp	fp, r3
 800880a:	db17      	blt.n	800883c <__gethex+0x3d4>
 800880c:	6861      	ldr	r1, [r4, #4]
 800880e:	9801      	ldr	r0, [sp, #4]
 8008810:	3101      	adds	r1, #1
 8008812:	f000 f90d 	bl	8008a30 <_Balloc>
 8008816:	4681      	mov	r9, r0
 8008818:	b918      	cbnz	r0, 8008822 <__gethex+0x3ba>
 800881a:	4602      	mov	r2, r0
 800881c:	2184      	movs	r1, #132	@ 0x84
 800881e:	4b19      	ldr	r3, [pc, #100]	@ (8008884 <__gethex+0x41c>)
 8008820:	e6c5      	b.n	80085ae <__gethex+0x146>
 8008822:	6922      	ldr	r2, [r4, #16]
 8008824:	f104 010c 	add.w	r1, r4, #12
 8008828:	3202      	adds	r2, #2
 800882a:	0092      	lsls	r2, r2, #2
 800882c:	300c      	adds	r0, #12
 800882e:	f7fe fefa 	bl	8007626 <memcpy>
 8008832:	4621      	mov	r1, r4
 8008834:	9801      	ldr	r0, [sp, #4]
 8008836:	f000 f93b 	bl	8008ab0 <_Bfree>
 800883a:	464c      	mov	r4, r9
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	6122      	str	r2, [r4, #16]
 8008842:	2201      	movs	r2, #1
 8008844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008848:	615a      	str	r2, [r3, #20]
 800884a:	e7be      	b.n	80087ca <__gethex+0x362>
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	455a      	cmp	r2, fp
 8008850:	dd0b      	ble.n	800886a <__gethex+0x402>
 8008852:	2101      	movs	r1, #1
 8008854:	4620      	mov	r0, r4
 8008856:	f7ff fd9f 	bl	8008398 <rshift>
 800885a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800885e:	3701      	adds	r7, #1
 8008860:	42bb      	cmp	r3, r7
 8008862:	f6ff aee0 	blt.w	8008626 <__gethex+0x1be>
 8008866:	2501      	movs	r5, #1
 8008868:	e7c2      	b.n	80087f0 <__gethex+0x388>
 800886a:	f016 061f 	ands.w	r6, r6, #31
 800886e:	d0fa      	beq.n	8008866 <__gethex+0x3fe>
 8008870:	4453      	add	r3, sl
 8008872:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008876:	f000 f9cd 	bl	8008c14 <__hi0bits>
 800887a:	f1c6 0620 	rsb	r6, r6, #32
 800887e:	42b0      	cmp	r0, r6
 8008880:	dbe7      	blt.n	8008852 <__gethex+0x3ea>
 8008882:	e7f0      	b.n	8008866 <__gethex+0x3fe>
 8008884:	08009afa 	.word	0x08009afa

08008888 <L_shift>:
 8008888:	f1c2 0208 	rsb	r2, r2, #8
 800888c:	0092      	lsls	r2, r2, #2
 800888e:	b570      	push	{r4, r5, r6, lr}
 8008890:	f1c2 0620 	rsb	r6, r2, #32
 8008894:	6843      	ldr	r3, [r0, #4]
 8008896:	6804      	ldr	r4, [r0, #0]
 8008898:	fa03 f506 	lsl.w	r5, r3, r6
 800889c:	432c      	orrs	r4, r5
 800889e:	40d3      	lsrs	r3, r2
 80088a0:	6004      	str	r4, [r0, #0]
 80088a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80088a6:	4288      	cmp	r0, r1
 80088a8:	d3f4      	bcc.n	8008894 <L_shift+0xc>
 80088aa:	bd70      	pop	{r4, r5, r6, pc}

080088ac <__match>:
 80088ac:	b530      	push	{r4, r5, lr}
 80088ae:	6803      	ldr	r3, [r0, #0]
 80088b0:	3301      	adds	r3, #1
 80088b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088b6:	b914      	cbnz	r4, 80088be <__match+0x12>
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	2001      	movs	r0, #1
 80088bc:	bd30      	pop	{r4, r5, pc}
 80088be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088c2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80088c6:	2d19      	cmp	r5, #25
 80088c8:	bf98      	it	ls
 80088ca:	3220      	addls	r2, #32
 80088cc:	42a2      	cmp	r2, r4
 80088ce:	d0f0      	beq.n	80088b2 <__match+0x6>
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7f3      	b.n	80088bc <__match+0x10>

080088d4 <__hexnan>:
 80088d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	2500      	movs	r5, #0
 80088da:	680b      	ldr	r3, [r1, #0]
 80088dc:	4682      	mov	sl, r0
 80088de:	115e      	asrs	r6, r3, #5
 80088e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80088e4:	f013 031f 	ands.w	r3, r3, #31
 80088e8:	bf18      	it	ne
 80088ea:	3604      	addne	r6, #4
 80088ec:	1f37      	subs	r7, r6, #4
 80088ee:	4690      	mov	r8, r2
 80088f0:	46b9      	mov	r9, r7
 80088f2:	463c      	mov	r4, r7
 80088f4:	46ab      	mov	fp, r5
 80088f6:	b087      	sub	sp, #28
 80088f8:	6801      	ldr	r1, [r0, #0]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	f846 5c04 	str.w	r5, [r6, #-4]
 8008900:	9502      	str	r5, [sp, #8]
 8008902:	784a      	ldrb	r2, [r1, #1]
 8008904:	1c4b      	adds	r3, r1, #1
 8008906:	9303      	str	r3, [sp, #12]
 8008908:	b342      	cbz	r2, 800895c <__hexnan+0x88>
 800890a:	4610      	mov	r0, r2
 800890c:	9105      	str	r1, [sp, #20]
 800890e:	9204      	str	r2, [sp, #16]
 8008910:	f7ff fd95 	bl	800843e <__hexdig_fun>
 8008914:	2800      	cmp	r0, #0
 8008916:	d151      	bne.n	80089bc <__hexnan+0xe8>
 8008918:	9a04      	ldr	r2, [sp, #16]
 800891a:	9905      	ldr	r1, [sp, #20]
 800891c:	2a20      	cmp	r2, #32
 800891e:	d818      	bhi.n	8008952 <__hexnan+0x7e>
 8008920:	9b02      	ldr	r3, [sp, #8]
 8008922:	459b      	cmp	fp, r3
 8008924:	dd13      	ble.n	800894e <__hexnan+0x7a>
 8008926:	454c      	cmp	r4, r9
 8008928:	d206      	bcs.n	8008938 <__hexnan+0x64>
 800892a:	2d07      	cmp	r5, #7
 800892c:	dc04      	bgt.n	8008938 <__hexnan+0x64>
 800892e:	462a      	mov	r2, r5
 8008930:	4649      	mov	r1, r9
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff ffa8 	bl	8008888 <L_shift>
 8008938:	4544      	cmp	r4, r8
 800893a:	d952      	bls.n	80089e2 <__hexnan+0x10e>
 800893c:	2300      	movs	r3, #0
 800893e:	f1a4 0904 	sub.w	r9, r4, #4
 8008942:	f844 3c04 	str.w	r3, [r4, #-4]
 8008946:	461d      	mov	r5, r3
 8008948:	464c      	mov	r4, r9
 800894a:	f8cd b008 	str.w	fp, [sp, #8]
 800894e:	9903      	ldr	r1, [sp, #12]
 8008950:	e7d7      	b.n	8008902 <__hexnan+0x2e>
 8008952:	2a29      	cmp	r2, #41	@ 0x29
 8008954:	d157      	bne.n	8008a06 <__hexnan+0x132>
 8008956:	3102      	adds	r1, #2
 8008958:	f8ca 1000 	str.w	r1, [sl]
 800895c:	f1bb 0f00 	cmp.w	fp, #0
 8008960:	d051      	beq.n	8008a06 <__hexnan+0x132>
 8008962:	454c      	cmp	r4, r9
 8008964:	d206      	bcs.n	8008974 <__hexnan+0xa0>
 8008966:	2d07      	cmp	r5, #7
 8008968:	dc04      	bgt.n	8008974 <__hexnan+0xa0>
 800896a:	462a      	mov	r2, r5
 800896c:	4649      	mov	r1, r9
 800896e:	4620      	mov	r0, r4
 8008970:	f7ff ff8a 	bl	8008888 <L_shift>
 8008974:	4544      	cmp	r4, r8
 8008976:	d936      	bls.n	80089e6 <__hexnan+0x112>
 8008978:	4623      	mov	r3, r4
 800897a:	f1a8 0204 	sub.w	r2, r8, #4
 800897e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008982:	429f      	cmp	r7, r3
 8008984:	f842 1f04 	str.w	r1, [r2, #4]!
 8008988:	d2f9      	bcs.n	800897e <__hexnan+0xaa>
 800898a:	1b3b      	subs	r3, r7, r4
 800898c:	f023 0303 	bic.w	r3, r3, #3
 8008990:	3304      	adds	r3, #4
 8008992:	3401      	adds	r4, #1
 8008994:	3e03      	subs	r6, #3
 8008996:	42b4      	cmp	r4, r6
 8008998:	bf88      	it	hi
 800899a:	2304      	movhi	r3, #4
 800899c:	2200      	movs	r2, #0
 800899e:	4443      	add	r3, r8
 80089a0:	f843 2b04 	str.w	r2, [r3], #4
 80089a4:	429f      	cmp	r7, r3
 80089a6:	d2fb      	bcs.n	80089a0 <__hexnan+0xcc>
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	b91b      	cbnz	r3, 80089b4 <__hexnan+0xe0>
 80089ac:	4547      	cmp	r7, r8
 80089ae:	d128      	bne.n	8008a02 <__hexnan+0x12e>
 80089b0:	2301      	movs	r3, #1
 80089b2:	603b      	str	r3, [r7, #0]
 80089b4:	2005      	movs	r0, #5
 80089b6:	b007      	add	sp, #28
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	3501      	adds	r5, #1
 80089be:	2d08      	cmp	r5, #8
 80089c0:	f10b 0b01 	add.w	fp, fp, #1
 80089c4:	dd06      	ble.n	80089d4 <__hexnan+0x100>
 80089c6:	4544      	cmp	r4, r8
 80089c8:	d9c1      	bls.n	800894e <__hexnan+0x7a>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2501      	movs	r5, #1
 80089ce:	f844 3c04 	str.w	r3, [r4, #-4]
 80089d2:	3c04      	subs	r4, #4
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	f000 000f 	and.w	r0, r0, #15
 80089da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80089de:	6020      	str	r0, [r4, #0]
 80089e0:	e7b5      	b.n	800894e <__hexnan+0x7a>
 80089e2:	2508      	movs	r5, #8
 80089e4:	e7b3      	b.n	800894e <__hexnan+0x7a>
 80089e6:	9b01      	ldr	r3, [sp, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0dd      	beq.n	80089a8 <__hexnan+0xd4>
 80089ec:	f04f 32ff 	mov.w	r2, #4294967295
 80089f0:	f1c3 0320 	rsb	r3, r3, #32
 80089f4:	40da      	lsrs	r2, r3
 80089f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089fa:	4013      	ands	r3, r2
 80089fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008a00:	e7d2      	b.n	80089a8 <__hexnan+0xd4>
 8008a02:	3f04      	subs	r7, #4
 8008a04:	e7d0      	b.n	80089a8 <__hexnan+0xd4>
 8008a06:	2004      	movs	r0, #4
 8008a08:	e7d5      	b.n	80089b6 <__hexnan+0xe2>

08008a0a <__ascii_mbtowc>:
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	b901      	cbnz	r1, 8008a10 <__ascii_mbtowc+0x6>
 8008a0e:	a901      	add	r1, sp, #4
 8008a10:	b142      	cbz	r2, 8008a24 <__ascii_mbtowc+0x1a>
 8008a12:	b14b      	cbz	r3, 8008a28 <__ascii_mbtowc+0x1e>
 8008a14:	7813      	ldrb	r3, [r2, #0]
 8008a16:	600b      	str	r3, [r1, #0]
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	1e10      	subs	r0, r2, #0
 8008a1c:	bf18      	it	ne
 8008a1e:	2001      	movne	r0, #1
 8008a20:	b002      	add	sp, #8
 8008a22:	4770      	bx	lr
 8008a24:	4610      	mov	r0, r2
 8008a26:	e7fb      	b.n	8008a20 <__ascii_mbtowc+0x16>
 8008a28:	f06f 0001 	mvn.w	r0, #1
 8008a2c:	e7f8      	b.n	8008a20 <__ascii_mbtowc+0x16>
	...

08008a30 <_Balloc>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	69c6      	ldr	r6, [r0, #28]
 8008a34:	4604      	mov	r4, r0
 8008a36:	460d      	mov	r5, r1
 8008a38:	b976      	cbnz	r6, 8008a58 <_Balloc+0x28>
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	f7fd f824 	bl	8005a88 <malloc>
 8008a40:	4602      	mov	r2, r0
 8008a42:	61e0      	str	r0, [r4, #28]
 8008a44:	b920      	cbnz	r0, 8008a50 <_Balloc+0x20>
 8008a46:	216b      	movs	r1, #107	@ 0x6b
 8008a48:	4b17      	ldr	r3, [pc, #92]	@ (8008aa8 <_Balloc+0x78>)
 8008a4a:	4818      	ldr	r0, [pc, #96]	@ (8008aac <_Balloc+0x7c>)
 8008a4c:	f000 ff08 	bl	8009860 <__assert_func>
 8008a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	69e6      	ldr	r6, [r4, #28]
 8008a5a:	68f3      	ldr	r3, [r6, #12]
 8008a5c:	b183      	cbz	r3, 8008a80 <_Balloc+0x50>
 8008a5e:	69e3      	ldr	r3, [r4, #28]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a66:	b9b8      	cbnz	r0, 8008a98 <_Balloc+0x68>
 8008a68:	2101      	movs	r1, #1
 8008a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6e:	1d72      	adds	r2, r6, #5
 8008a70:	4620      	mov	r0, r4
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	f000 ff12 	bl	800989c <_calloc_r>
 8008a78:	b160      	cbz	r0, 8008a94 <_Balloc+0x64>
 8008a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7e:	e00e      	b.n	8008a9e <_Balloc+0x6e>
 8008a80:	2221      	movs	r2, #33	@ 0x21
 8008a82:	2104      	movs	r1, #4
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 ff09 	bl	800989c <_calloc_r>
 8008a8a:	69e3      	ldr	r3, [r4, #28]
 8008a8c:	60f0      	str	r0, [r6, #12]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e4      	bne.n	8008a5e <_Balloc+0x2e>
 8008a94:	2000      	movs	r0, #0
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	6802      	ldr	r2, [r0, #0]
 8008a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa4:	e7f7      	b.n	8008a96 <_Balloc+0x66>
 8008aa6:	bf00      	nop
 8008aa8:	08009a8b 	.word	0x08009a8b
 8008aac:	08009b6b 	.word	0x08009b6b

08008ab0 <_Bfree>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	69c6      	ldr	r6, [r0, #28]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b976      	cbnz	r6, 8008ad8 <_Bfree+0x28>
 8008aba:	2010      	movs	r0, #16
 8008abc:	f7fc ffe4 	bl	8005a88 <malloc>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	61e8      	str	r0, [r5, #28]
 8008ac4:	b920      	cbnz	r0, 8008ad0 <_Bfree+0x20>
 8008ac6:	218f      	movs	r1, #143	@ 0x8f
 8008ac8:	4b08      	ldr	r3, [pc, #32]	@ (8008aec <_Bfree+0x3c>)
 8008aca:	4809      	ldr	r0, [pc, #36]	@ (8008af0 <_Bfree+0x40>)
 8008acc:	f000 fec8 	bl	8009860 <__assert_func>
 8008ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad4:	6006      	str	r6, [r0, #0]
 8008ad6:	60c6      	str	r6, [r0, #12]
 8008ad8:	b13c      	cbz	r4, 8008aea <_Bfree+0x3a>
 8008ada:	69eb      	ldr	r3, [r5, #28]
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae4:	6021      	str	r1, [r4, #0]
 8008ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	08009a8b 	.word	0x08009a8b
 8008af0:	08009b6b 	.word	0x08009b6b

08008af4 <__multadd>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	4607      	mov	r7, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	461e      	mov	r6, r3
 8008afe:	2000      	movs	r0, #0
 8008b00:	690d      	ldr	r5, [r1, #16]
 8008b02:	f101 0c14 	add.w	ip, r1, #20
 8008b06:	f8dc 3000 	ldr.w	r3, [ip]
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	b299      	uxth	r1, r3
 8008b0e:	fb02 6101 	mla	r1, r2, r1, r6
 8008b12:	0c1e      	lsrs	r6, r3, #16
 8008b14:	0c0b      	lsrs	r3, r1, #16
 8008b16:	fb02 3306 	mla	r3, r2, r6, r3
 8008b1a:	b289      	uxth	r1, r1
 8008b1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b20:	4285      	cmp	r5, r0
 8008b22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b26:	f84c 1b04 	str.w	r1, [ip], #4
 8008b2a:	dcec      	bgt.n	8008b06 <__multadd+0x12>
 8008b2c:	b30e      	cbz	r6, 8008b72 <__multadd+0x7e>
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	42ab      	cmp	r3, r5
 8008b32:	dc19      	bgt.n	8008b68 <__multadd+0x74>
 8008b34:	6861      	ldr	r1, [r4, #4]
 8008b36:	4638      	mov	r0, r7
 8008b38:	3101      	adds	r1, #1
 8008b3a:	f7ff ff79 	bl	8008a30 <_Balloc>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <__multadd+0x5a>
 8008b42:	4602      	mov	r2, r0
 8008b44:	21ba      	movs	r1, #186	@ 0xba
 8008b46:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <__multadd+0x84>)
 8008b48:	480c      	ldr	r0, [pc, #48]	@ (8008b7c <__multadd+0x88>)
 8008b4a:	f000 fe89 	bl	8009860 <__assert_func>
 8008b4e:	6922      	ldr	r2, [r4, #16]
 8008b50:	f104 010c 	add.w	r1, r4, #12
 8008b54:	3202      	adds	r2, #2
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	300c      	adds	r0, #12
 8008b5a:	f7fe fd64 	bl	8007626 <memcpy>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ffa5 	bl	8008ab0 <_Bfree>
 8008b66:	4644      	mov	r4, r8
 8008b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	615e      	str	r6, [r3, #20]
 8008b70:	6125      	str	r5, [r4, #16]
 8008b72:	4620      	mov	r0, r4
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	08009afa 	.word	0x08009afa
 8008b7c:	08009b6b 	.word	0x08009b6b

08008b80 <__s2b>:
 8008b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b84:	4615      	mov	r5, r2
 8008b86:	2209      	movs	r2, #9
 8008b88:	461f      	mov	r7, r3
 8008b8a:	3308      	adds	r3, #8
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b92:	4606      	mov	r6, r0
 8008b94:	2201      	movs	r2, #1
 8008b96:	2100      	movs	r1, #0
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	db09      	blt.n	8008bb0 <__s2b+0x30>
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff ff47 	bl	8008a30 <_Balloc>
 8008ba2:	b940      	cbnz	r0, 8008bb6 <__s2b+0x36>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	21d3      	movs	r1, #211	@ 0xd3
 8008ba8:	4b18      	ldr	r3, [pc, #96]	@ (8008c0c <__s2b+0x8c>)
 8008baa:	4819      	ldr	r0, [pc, #100]	@ (8008c10 <__s2b+0x90>)
 8008bac:	f000 fe58 	bl	8009860 <__assert_func>
 8008bb0:	0052      	lsls	r2, r2, #1
 8008bb2:	3101      	adds	r1, #1
 8008bb4:	e7f0      	b.n	8008b98 <__s2b+0x18>
 8008bb6:	9b08      	ldr	r3, [sp, #32]
 8008bb8:	2d09      	cmp	r5, #9
 8008bba:	6143      	str	r3, [r0, #20]
 8008bbc:	f04f 0301 	mov.w	r3, #1
 8008bc0:	6103      	str	r3, [r0, #16]
 8008bc2:	dd16      	ble.n	8008bf2 <__s2b+0x72>
 8008bc4:	f104 0909 	add.w	r9, r4, #9
 8008bc8:	46c8      	mov	r8, r9
 8008bca:	442c      	add	r4, r5
 8008bcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bd0:	4601      	mov	r1, r0
 8008bd2:	220a      	movs	r2, #10
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	3b30      	subs	r3, #48	@ 0x30
 8008bd8:	f7ff ff8c 	bl	8008af4 <__multadd>
 8008bdc:	45a0      	cmp	r8, r4
 8008bde:	d1f5      	bne.n	8008bcc <__s2b+0x4c>
 8008be0:	f1a5 0408 	sub.w	r4, r5, #8
 8008be4:	444c      	add	r4, r9
 8008be6:	1b2d      	subs	r5, r5, r4
 8008be8:	1963      	adds	r3, r4, r5
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	db04      	blt.n	8008bf8 <__s2b+0x78>
 8008bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf2:	2509      	movs	r5, #9
 8008bf4:	340a      	adds	r4, #10
 8008bf6:	e7f6      	b.n	8008be6 <__s2b+0x66>
 8008bf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	220a      	movs	r2, #10
 8008c00:	4630      	mov	r0, r6
 8008c02:	3b30      	subs	r3, #48	@ 0x30
 8008c04:	f7ff ff76 	bl	8008af4 <__multadd>
 8008c08:	e7ee      	b.n	8008be8 <__s2b+0x68>
 8008c0a:	bf00      	nop
 8008c0c:	08009afa 	.word	0x08009afa
 8008c10:	08009b6b 	.word	0x08009b6b

08008c14 <__hi0bits>:
 8008c14:	4603      	mov	r3, r0
 8008c16:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c1a:	bf3a      	itte	cc
 8008c1c:	0403      	lslcc	r3, r0, #16
 8008c1e:	2010      	movcc	r0, #16
 8008c20:	2000      	movcs	r0, #0
 8008c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c26:	bf3c      	itt	cc
 8008c28:	021b      	lslcc	r3, r3, #8
 8008c2a:	3008      	addcc	r0, #8
 8008c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c30:	bf3c      	itt	cc
 8008c32:	011b      	lslcc	r3, r3, #4
 8008c34:	3004      	addcc	r0, #4
 8008c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3a:	bf3c      	itt	cc
 8008c3c:	009b      	lslcc	r3, r3, #2
 8008c3e:	3002      	addcc	r0, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	db05      	blt.n	8008c50 <__hi0bits+0x3c>
 8008c44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c48:	f100 0001 	add.w	r0, r0, #1
 8008c4c:	bf08      	it	eq
 8008c4e:	2020      	moveq	r0, #32
 8008c50:	4770      	bx	lr

08008c52 <__lo0bits>:
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	4602      	mov	r2, r0
 8008c56:	f013 0007 	ands.w	r0, r3, #7
 8008c5a:	d00b      	beq.n	8008c74 <__lo0bits+0x22>
 8008c5c:	07d9      	lsls	r1, r3, #31
 8008c5e:	d421      	bmi.n	8008ca4 <__lo0bits+0x52>
 8008c60:	0798      	lsls	r0, r3, #30
 8008c62:	bf49      	itett	mi
 8008c64:	085b      	lsrmi	r3, r3, #1
 8008c66:	089b      	lsrpl	r3, r3, #2
 8008c68:	2001      	movmi	r0, #1
 8008c6a:	6013      	strmi	r3, [r2, #0]
 8008c6c:	bf5c      	itt	pl
 8008c6e:	2002      	movpl	r0, #2
 8008c70:	6013      	strpl	r3, [r2, #0]
 8008c72:	4770      	bx	lr
 8008c74:	b299      	uxth	r1, r3
 8008c76:	b909      	cbnz	r1, 8008c7c <__lo0bits+0x2a>
 8008c78:	2010      	movs	r0, #16
 8008c7a:	0c1b      	lsrs	r3, r3, #16
 8008c7c:	b2d9      	uxtb	r1, r3
 8008c7e:	b909      	cbnz	r1, 8008c84 <__lo0bits+0x32>
 8008c80:	3008      	adds	r0, #8
 8008c82:	0a1b      	lsrs	r3, r3, #8
 8008c84:	0719      	lsls	r1, r3, #28
 8008c86:	bf04      	itt	eq
 8008c88:	091b      	lsreq	r3, r3, #4
 8008c8a:	3004      	addeq	r0, #4
 8008c8c:	0799      	lsls	r1, r3, #30
 8008c8e:	bf04      	itt	eq
 8008c90:	089b      	lsreq	r3, r3, #2
 8008c92:	3002      	addeq	r0, #2
 8008c94:	07d9      	lsls	r1, r3, #31
 8008c96:	d403      	bmi.n	8008ca0 <__lo0bits+0x4e>
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	f100 0001 	add.w	r0, r0, #1
 8008c9e:	d003      	beq.n	8008ca8 <__lo0bits+0x56>
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	4770      	bx	lr
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4770      	bx	lr
 8008ca8:	2020      	movs	r0, #32
 8008caa:	4770      	bx	lr

08008cac <__i2b>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	460c      	mov	r4, r1
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	f7ff febd 	bl	8008a30 <_Balloc>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	b928      	cbnz	r0, 8008cc6 <__i2b+0x1a>
 8008cba:	f240 1145 	movw	r1, #325	@ 0x145
 8008cbe:	4b04      	ldr	r3, [pc, #16]	@ (8008cd0 <__i2b+0x24>)
 8008cc0:	4804      	ldr	r0, [pc, #16]	@ (8008cd4 <__i2b+0x28>)
 8008cc2:	f000 fdcd 	bl	8009860 <__assert_func>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	6144      	str	r4, [r0, #20]
 8008cca:	6103      	str	r3, [r0, #16]
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	bf00      	nop
 8008cd0:	08009afa 	.word	0x08009afa
 8008cd4:	08009b6b 	.word	0x08009b6b

08008cd8 <__multiply>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	4617      	mov	r7, r2
 8008cde:	690a      	ldr	r2, [r1, #16]
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	4689      	mov	r9, r1
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	bfa2      	ittt	ge
 8008ce8:	463b      	movge	r3, r7
 8008cea:	460f      	movge	r7, r1
 8008cec:	4699      	movge	r9, r3
 8008cee:	693d      	ldr	r5, [r7, #16]
 8008cf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	eb05 060a 	add.w	r6, r5, sl
 8008cfc:	42b3      	cmp	r3, r6
 8008cfe:	b085      	sub	sp, #20
 8008d00:	bfb8      	it	lt
 8008d02:	3101      	addlt	r1, #1
 8008d04:	f7ff fe94 	bl	8008a30 <_Balloc>
 8008d08:	b930      	cbnz	r0, 8008d18 <__multiply+0x40>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d10:	4b40      	ldr	r3, [pc, #256]	@ (8008e14 <__multiply+0x13c>)
 8008d12:	4841      	ldr	r0, [pc, #260]	@ (8008e18 <__multiply+0x140>)
 8008d14:	f000 fda4 	bl	8009860 <__assert_func>
 8008d18:	f100 0414 	add.w	r4, r0, #20
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	2200      	movs	r2, #0
 8008d20:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008d24:	4573      	cmp	r3, lr
 8008d26:	d320      	bcc.n	8008d6a <__multiply+0x92>
 8008d28:	f107 0814 	add.w	r8, r7, #20
 8008d2c:	f109 0114 	add.w	r1, r9, #20
 8008d30:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008d34:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008d38:	9302      	str	r3, [sp, #8]
 8008d3a:	1beb      	subs	r3, r5, r7
 8008d3c:	3b15      	subs	r3, #21
 8008d3e:	f023 0303 	bic.w	r3, r3, #3
 8008d42:	3304      	adds	r3, #4
 8008d44:	3715      	adds	r7, #21
 8008d46:	42bd      	cmp	r5, r7
 8008d48:	bf38      	it	cc
 8008d4a:	2304      	movcc	r3, #4
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	9b02      	ldr	r3, [sp, #8]
 8008d50:	9103      	str	r1, [sp, #12]
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d80c      	bhi.n	8008d70 <__multiply+0x98>
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	dd03      	ble.n	8008d62 <__multiply+0x8a>
 8008d5a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d055      	beq.n	8008e0e <__multiply+0x136>
 8008d62:	6106      	str	r6, [r0, #16]
 8008d64:	b005      	add	sp, #20
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	f843 2b04 	str.w	r2, [r3], #4
 8008d6e:	e7d9      	b.n	8008d24 <__multiply+0x4c>
 8008d70:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d74:	f1ba 0f00 	cmp.w	sl, #0
 8008d78:	d01f      	beq.n	8008dba <__multiply+0xe2>
 8008d7a:	46c4      	mov	ip, r8
 8008d7c:	46a1      	mov	r9, r4
 8008d7e:	2700      	movs	r7, #0
 8008d80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d84:	f8d9 3000 	ldr.w	r3, [r9]
 8008d88:	fa1f fb82 	uxth.w	fp, r2
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d92:	443b      	add	r3, r7
 8008d94:	f8d9 7000 	ldr.w	r7, [r9]
 8008d98:	0c12      	lsrs	r2, r2, #16
 8008d9a:	0c3f      	lsrs	r7, r7, #16
 8008d9c:	fb0a 7202 	mla	r2, sl, r2, r7
 8008da0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008daa:	4565      	cmp	r5, ip
 8008dac:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008db0:	f849 3b04 	str.w	r3, [r9], #4
 8008db4:	d8e4      	bhi.n	8008d80 <__multiply+0xa8>
 8008db6:	9b01      	ldr	r3, [sp, #4]
 8008db8:	50e7      	str	r7, [r4, r3]
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	3104      	adds	r1, #4
 8008dbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dc2:	f1b9 0f00 	cmp.w	r9, #0
 8008dc6:	d020      	beq.n	8008e0a <__multiply+0x132>
 8008dc8:	4647      	mov	r7, r8
 8008dca:	46a4      	mov	ip, r4
 8008dcc:	f04f 0a00 	mov.w	sl, #0
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	f8b7 b000 	ldrh.w	fp, [r7]
 8008dd6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	fb09 220b 	mla	r2, r9, fp, r2
 8008de0:	4452      	add	r2, sl
 8008de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008de6:	f84c 3b04 	str.w	r3, [ip], #4
 8008dea:	f857 3b04 	ldr.w	r3, [r7], #4
 8008dee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008df2:	f8bc 3000 	ldrh.w	r3, [ip]
 8008df6:	42bd      	cmp	r5, r7
 8008df8:	fb09 330a 	mla	r3, r9, sl, r3
 8008dfc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e04:	d8e5      	bhi.n	8008dd2 <__multiply+0xfa>
 8008e06:	9a01      	ldr	r2, [sp, #4]
 8008e08:	50a3      	str	r3, [r4, r2]
 8008e0a:	3404      	adds	r4, #4
 8008e0c:	e79f      	b.n	8008d4e <__multiply+0x76>
 8008e0e:	3e01      	subs	r6, #1
 8008e10:	e7a1      	b.n	8008d56 <__multiply+0x7e>
 8008e12:	bf00      	nop
 8008e14:	08009afa 	.word	0x08009afa
 8008e18:	08009b6b 	.word	0x08009b6b

08008e1c <__pow5mult>:
 8008e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e20:	4615      	mov	r5, r2
 8008e22:	f012 0203 	ands.w	r2, r2, #3
 8008e26:	4607      	mov	r7, r0
 8008e28:	460e      	mov	r6, r1
 8008e2a:	d007      	beq.n	8008e3c <__pow5mult+0x20>
 8008e2c:	4c25      	ldr	r4, [pc, #148]	@ (8008ec4 <__pow5mult+0xa8>)
 8008e2e:	3a01      	subs	r2, #1
 8008e30:	2300      	movs	r3, #0
 8008e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e36:	f7ff fe5d 	bl	8008af4 <__multadd>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	10ad      	asrs	r5, r5, #2
 8008e3e:	d03d      	beq.n	8008ebc <__pow5mult+0xa0>
 8008e40:	69fc      	ldr	r4, [r7, #28]
 8008e42:	b97c      	cbnz	r4, 8008e64 <__pow5mult+0x48>
 8008e44:	2010      	movs	r0, #16
 8008e46:	f7fc fe1f 	bl	8005a88 <malloc>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	61f8      	str	r0, [r7, #28]
 8008e4e:	b928      	cbnz	r0, 8008e5c <__pow5mult+0x40>
 8008e50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec8 <__pow5mult+0xac>)
 8008e56:	481d      	ldr	r0, [pc, #116]	@ (8008ecc <__pow5mult+0xb0>)
 8008e58:	f000 fd02 	bl	8009860 <__assert_func>
 8008e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e60:	6004      	str	r4, [r0, #0]
 8008e62:	60c4      	str	r4, [r0, #12]
 8008e64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e6c:	b94c      	cbnz	r4, 8008e82 <__pow5mult+0x66>
 8008e6e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ff1a 	bl	8008cac <__i2b>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e80:	6003      	str	r3, [r0, #0]
 8008e82:	f04f 0900 	mov.w	r9, #0
 8008e86:	07eb      	lsls	r3, r5, #31
 8008e88:	d50a      	bpl.n	8008ea0 <__pow5mult+0x84>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff ff22 	bl	8008cd8 <__multiply>
 8008e94:	4680      	mov	r8, r0
 8008e96:	4631      	mov	r1, r6
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff fe09 	bl	8008ab0 <_Bfree>
 8008e9e:	4646      	mov	r6, r8
 8008ea0:	106d      	asrs	r5, r5, #1
 8008ea2:	d00b      	beq.n	8008ebc <__pow5mult+0xa0>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	b938      	cbnz	r0, 8008eb8 <__pow5mult+0x9c>
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ff13 	bl	8008cd8 <__multiply>
 8008eb2:	6020      	str	r0, [r4, #0]
 8008eb4:	f8c0 9000 	str.w	r9, [r0]
 8008eb8:	4604      	mov	r4, r0
 8008eba:	e7e4      	b.n	8008e86 <__pow5mult+0x6a>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	bf00      	nop
 8008ec4:	08009c68 	.word	0x08009c68
 8008ec8:	08009a8b 	.word	0x08009a8b
 8008ecc:	08009b6b 	.word	0x08009b6b

08008ed0 <__lshift>:
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	4691      	mov	r9, r2
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	6849      	ldr	r1, [r1, #4]
 8008ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee8:	f108 0601 	add.w	r6, r8, #1
 8008eec:	42b3      	cmp	r3, r6
 8008eee:	db0b      	blt.n	8008f08 <__lshift+0x38>
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff fd9d 	bl	8008a30 <_Balloc>
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	b948      	cbnz	r0, 8008f0e <__lshift+0x3e>
 8008efa:	4602      	mov	r2, r0
 8008efc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f00:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <__lshift+0xd0>)
 8008f02:	4828      	ldr	r0, [pc, #160]	@ (8008fa4 <__lshift+0xd4>)
 8008f04:	f000 fcac 	bl	8009860 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	e7ee      	b.n	8008eec <__lshift+0x1c>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f100 0114 	add.w	r1, r0, #20
 8008f14:	f100 0210 	add.w	r2, r0, #16
 8008f18:	4618      	mov	r0, r3
 8008f1a:	4553      	cmp	r3, sl
 8008f1c:	db33      	blt.n	8008f86 <__lshift+0xb6>
 8008f1e:	6920      	ldr	r0, [r4, #16]
 8008f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f24:	f104 0314 	add.w	r3, r4, #20
 8008f28:	f019 091f 	ands.w	r9, r9, #31
 8008f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f34:	d02b      	beq.n	8008f8e <__lshift+0xbe>
 8008f36:	468a      	mov	sl, r1
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	fa00 f009 	lsl.w	r0, r0, r9
 8008f44:	4310      	orrs	r0, r2
 8008f46:	f84a 0b04 	str.w	r0, [sl], #4
 8008f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4e:	459c      	cmp	ip, r3
 8008f50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f54:	d8f3      	bhi.n	8008f3e <__lshift+0x6e>
 8008f56:	ebac 0304 	sub.w	r3, ip, r4
 8008f5a:	3b15      	subs	r3, #21
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	3304      	adds	r3, #4
 8008f62:	f104 0015 	add.w	r0, r4, #21
 8008f66:	4560      	cmp	r0, ip
 8008f68:	bf88      	it	hi
 8008f6a:	2304      	movhi	r3, #4
 8008f6c:	50ca      	str	r2, [r1, r3]
 8008f6e:	b10a      	cbz	r2, 8008f74 <__lshift+0xa4>
 8008f70:	f108 0602 	add.w	r6, r8, #2
 8008f74:	3e01      	subs	r6, #1
 8008f76:	4638      	mov	r0, r7
 8008f78:	4621      	mov	r1, r4
 8008f7a:	612e      	str	r6, [r5, #16]
 8008f7c:	f7ff fd98 	bl	8008ab0 <_Bfree>
 8008f80:	4628      	mov	r0, r5
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	e7c5      	b.n	8008f1a <__lshift+0x4a>
 8008f8e:	3904      	subs	r1, #4
 8008f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f94:	459c      	cmp	ip, r3
 8008f96:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f9a:	d8f9      	bhi.n	8008f90 <__lshift+0xc0>
 8008f9c:	e7ea      	b.n	8008f74 <__lshift+0xa4>
 8008f9e:	bf00      	nop
 8008fa0:	08009afa 	.word	0x08009afa
 8008fa4:	08009b6b 	.word	0x08009b6b

08008fa8 <__mcmp>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	690a      	ldr	r2, [r1, #16]
 8008fac:	6900      	ldr	r0, [r0, #16]
 8008fae:	b530      	push	{r4, r5, lr}
 8008fb0:	1a80      	subs	r0, r0, r2
 8008fb2:	d10e      	bne.n	8008fd2 <__mcmp+0x2a>
 8008fb4:	3314      	adds	r3, #20
 8008fb6:	3114      	adds	r1, #20
 8008fb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fc8:	4295      	cmp	r5, r2
 8008fca:	d003      	beq.n	8008fd4 <__mcmp+0x2c>
 8008fcc:	d205      	bcs.n	8008fda <__mcmp+0x32>
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	bd30      	pop	{r4, r5, pc}
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d3f3      	bcc.n	8008fc0 <__mcmp+0x18>
 8008fd8:	e7fb      	b.n	8008fd2 <__mcmp+0x2a>
 8008fda:	2001      	movs	r0, #1
 8008fdc:	e7f9      	b.n	8008fd2 <__mcmp+0x2a>
	...

08008fe0 <__mdiff>:
 8008fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4689      	mov	r9, r1
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4648      	mov	r0, r9
 8008fec:	4614      	mov	r4, r2
 8008fee:	f7ff ffdb 	bl	8008fa8 <__mcmp>
 8008ff2:	1e05      	subs	r5, r0, #0
 8008ff4:	d112      	bne.n	800901c <__mdiff+0x3c>
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff fd19 	bl	8008a30 <_Balloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	b928      	cbnz	r0, 800900e <__mdiff+0x2e>
 8009002:	f240 2137 	movw	r1, #567	@ 0x237
 8009006:	4b3e      	ldr	r3, [pc, #248]	@ (8009100 <__mdiff+0x120>)
 8009008:	483e      	ldr	r0, [pc, #248]	@ (8009104 <__mdiff+0x124>)
 800900a:	f000 fc29 	bl	8009860 <__assert_func>
 800900e:	2301      	movs	r3, #1
 8009010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009014:	4610      	mov	r0, r2
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901c:	bfbc      	itt	lt
 800901e:	464b      	movlt	r3, r9
 8009020:	46a1      	movlt	r9, r4
 8009022:	4630      	mov	r0, r6
 8009024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009028:	bfba      	itte	lt
 800902a:	461c      	movlt	r4, r3
 800902c:	2501      	movlt	r5, #1
 800902e:	2500      	movge	r5, #0
 8009030:	f7ff fcfe 	bl	8008a30 <_Balloc>
 8009034:	4602      	mov	r2, r0
 8009036:	b918      	cbnz	r0, 8009040 <__mdiff+0x60>
 8009038:	f240 2145 	movw	r1, #581	@ 0x245
 800903c:	4b30      	ldr	r3, [pc, #192]	@ (8009100 <__mdiff+0x120>)
 800903e:	e7e3      	b.n	8009008 <__mdiff+0x28>
 8009040:	f100 0b14 	add.w	fp, r0, #20
 8009044:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009048:	f109 0310 	add.w	r3, r9, #16
 800904c:	60c5      	str	r5, [r0, #12]
 800904e:	f04f 0c00 	mov.w	ip, #0
 8009052:	f109 0514 	add.w	r5, r9, #20
 8009056:	46d9      	mov	r9, fp
 8009058:	6926      	ldr	r6, [r4, #16]
 800905a:	f104 0e14 	add.w	lr, r4, #20
 800905e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009062:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800906e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009072:	b281      	uxth	r1, r0
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	fa1f f38a 	uxth.w	r3, sl
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	0c00      	lsrs	r0, r0, #16
 800907e:	4463      	add	r3, ip
 8009080:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009084:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800908e:	4576      	cmp	r6, lr
 8009090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009094:	f849 3b04 	str.w	r3, [r9], #4
 8009098:	d8e6      	bhi.n	8009068 <__mdiff+0x88>
 800909a:	1b33      	subs	r3, r6, r4
 800909c:	3b15      	subs	r3, #21
 800909e:	f023 0303 	bic.w	r3, r3, #3
 80090a2:	3415      	adds	r4, #21
 80090a4:	3304      	adds	r3, #4
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	bf38      	it	cc
 80090aa:	2304      	movcc	r3, #4
 80090ac:	441d      	add	r5, r3
 80090ae:	445b      	add	r3, fp
 80090b0:	461e      	mov	r6, r3
 80090b2:	462c      	mov	r4, r5
 80090b4:	4544      	cmp	r4, r8
 80090b6:	d30e      	bcc.n	80090d6 <__mdiff+0xf6>
 80090b8:	f108 0103 	add.w	r1, r8, #3
 80090bc:	1b49      	subs	r1, r1, r5
 80090be:	f021 0103 	bic.w	r1, r1, #3
 80090c2:	3d03      	subs	r5, #3
 80090c4:	45a8      	cmp	r8, r5
 80090c6:	bf38      	it	cc
 80090c8:	2100      	movcc	r1, #0
 80090ca:	440b      	add	r3, r1
 80090cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090d0:	b199      	cbz	r1, 80090fa <__mdiff+0x11a>
 80090d2:	6117      	str	r7, [r2, #16]
 80090d4:	e79e      	b.n	8009014 <__mdiff+0x34>
 80090d6:	46e6      	mov	lr, ip
 80090d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80090dc:	fa1f fc81 	uxth.w	ip, r1
 80090e0:	44f4      	add	ip, lr
 80090e2:	0c08      	lsrs	r0, r1, #16
 80090e4:	4471      	add	r1, lr
 80090e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090ea:	b289      	uxth	r1, r1
 80090ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090f4:	f846 1b04 	str.w	r1, [r6], #4
 80090f8:	e7dc      	b.n	80090b4 <__mdiff+0xd4>
 80090fa:	3f01      	subs	r7, #1
 80090fc:	e7e6      	b.n	80090cc <__mdiff+0xec>
 80090fe:	bf00      	nop
 8009100:	08009afa 	.word	0x08009afa
 8009104:	08009b6b 	.word	0x08009b6b

08009108 <__ulp>:
 8009108:	4b0e      	ldr	r3, [pc, #56]	@ (8009144 <__ulp+0x3c>)
 800910a:	400b      	ands	r3, r1
 800910c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc08      	bgt.n	8009126 <__ulp+0x1e>
 8009114:	425b      	negs	r3, r3
 8009116:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800911a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800911e:	da04      	bge.n	800912a <__ulp+0x22>
 8009120:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009124:	4113      	asrs	r3, r2
 8009126:	2200      	movs	r2, #0
 8009128:	e008      	b.n	800913c <__ulp+0x34>
 800912a:	f1a2 0314 	sub.w	r3, r2, #20
 800912e:	2b1e      	cmp	r3, #30
 8009130:	bfd6      	itet	le
 8009132:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009136:	2201      	movgt	r2, #1
 8009138:	40da      	lsrle	r2, r3
 800913a:	2300      	movs	r3, #0
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	7ff00000 	.word	0x7ff00000

08009148 <__b2d>:
 8009148:	6902      	ldr	r2, [r0, #16]
 800914a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914c:	f100 0614 	add.w	r6, r0, #20
 8009150:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009154:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009158:	4f1e      	ldr	r7, [pc, #120]	@ (80091d4 <__b2d+0x8c>)
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff fd5a 	bl	8008c14 <__hi0bits>
 8009160:	4603      	mov	r3, r0
 8009162:	f1c0 0020 	rsb	r0, r0, #32
 8009166:	2b0a      	cmp	r3, #10
 8009168:	f1a2 0504 	sub.w	r5, r2, #4
 800916c:	6008      	str	r0, [r1, #0]
 800916e:	dc12      	bgt.n	8009196 <__b2d+0x4e>
 8009170:	42ae      	cmp	r6, r5
 8009172:	bf2c      	ite	cs
 8009174:	2200      	movcs	r2, #0
 8009176:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800917a:	f1c3 0c0b 	rsb	ip, r3, #11
 800917e:	3315      	adds	r3, #21
 8009180:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009184:	fa04 f303 	lsl.w	r3, r4, r3
 8009188:	fa22 f20c 	lsr.w	r2, r2, ip
 800918c:	ea4e 0107 	orr.w	r1, lr, r7
 8009190:	431a      	orrs	r2, r3
 8009192:	4610      	mov	r0, r2
 8009194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009196:	42ae      	cmp	r6, r5
 8009198:	bf36      	itet	cc
 800919a:	f1a2 0508 	subcc.w	r5, r2, #8
 800919e:	2200      	movcs	r2, #0
 80091a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80091a4:	3b0b      	subs	r3, #11
 80091a6:	d012      	beq.n	80091ce <__b2d+0x86>
 80091a8:	f1c3 0720 	rsb	r7, r3, #32
 80091ac:	fa22 f107 	lsr.w	r1, r2, r7
 80091b0:	409c      	lsls	r4, r3
 80091b2:	430c      	orrs	r4, r1
 80091b4:	42b5      	cmp	r5, r6
 80091b6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80091ba:	bf94      	ite	ls
 80091bc:	2400      	movls	r4, #0
 80091be:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80091c2:	409a      	lsls	r2, r3
 80091c4:	40fc      	lsrs	r4, r7
 80091c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80091ca:	4322      	orrs	r2, r4
 80091cc:	e7e1      	b.n	8009192 <__b2d+0x4a>
 80091ce:	ea44 0107 	orr.w	r1, r4, r7
 80091d2:	e7de      	b.n	8009192 <__b2d+0x4a>
 80091d4:	3ff00000 	.word	0x3ff00000

080091d8 <__d2b>:
 80091d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80091dc:	2101      	movs	r1, #1
 80091de:	4690      	mov	r8, r2
 80091e0:	4699      	mov	r9, r3
 80091e2:	9e08      	ldr	r6, [sp, #32]
 80091e4:	f7ff fc24 	bl	8008a30 <_Balloc>
 80091e8:	4604      	mov	r4, r0
 80091ea:	b930      	cbnz	r0, 80091fa <__d2b+0x22>
 80091ec:	4602      	mov	r2, r0
 80091ee:	f240 310f 	movw	r1, #783	@ 0x30f
 80091f2:	4b23      	ldr	r3, [pc, #140]	@ (8009280 <__d2b+0xa8>)
 80091f4:	4823      	ldr	r0, [pc, #140]	@ (8009284 <__d2b+0xac>)
 80091f6:	f000 fb33 	bl	8009860 <__assert_func>
 80091fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009202:	b10d      	cbz	r5, 8009208 <__d2b+0x30>
 8009204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	f1b8 0300 	subs.w	r3, r8, #0
 800920e:	d024      	beq.n	800925a <__d2b+0x82>
 8009210:	4668      	mov	r0, sp
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	f7ff fd1d 	bl	8008c52 <__lo0bits>
 8009218:	e9dd 1200 	ldrd	r1, r2, [sp]
 800921c:	b1d8      	cbz	r0, 8009256 <__d2b+0x7e>
 800921e:	f1c0 0320 	rsb	r3, r0, #32
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	430b      	orrs	r3, r1
 8009228:	40c2      	lsrs	r2, r0
 800922a:	6163      	str	r3, [r4, #20]
 800922c:	9201      	str	r2, [sp, #4]
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	bf0c      	ite	eq
 8009234:	2201      	moveq	r2, #1
 8009236:	2202      	movne	r2, #2
 8009238:	61a3      	str	r3, [r4, #24]
 800923a:	6122      	str	r2, [r4, #16]
 800923c:	b1ad      	cbz	r5, 800926a <__d2b+0x92>
 800923e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009242:	4405      	add	r5, r0
 8009244:	6035      	str	r5, [r6, #0]
 8009246:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800924a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800924c:	6018      	str	r0, [r3, #0]
 800924e:	4620      	mov	r0, r4
 8009250:	b002      	add	sp, #8
 8009252:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009256:	6161      	str	r1, [r4, #20]
 8009258:	e7e9      	b.n	800922e <__d2b+0x56>
 800925a:	a801      	add	r0, sp, #4
 800925c:	f7ff fcf9 	bl	8008c52 <__lo0bits>
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	6163      	str	r3, [r4, #20]
 8009266:	3020      	adds	r0, #32
 8009268:	e7e7      	b.n	800923a <__d2b+0x62>
 800926a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800926e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009272:	6030      	str	r0, [r6, #0]
 8009274:	6918      	ldr	r0, [r3, #16]
 8009276:	f7ff fccd 	bl	8008c14 <__hi0bits>
 800927a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800927e:	e7e4      	b.n	800924a <__d2b+0x72>
 8009280:	08009afa 	.word	0x08009afa
 8009284:	08009b6b 	.word	0x08009b6b

08009288 <__ratio>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	b085      	sub	sp, #20
 800928e:	e9cd 1000 	strd	r1, r0, [sp]
 8009292:	a902      	add	r1, sp, #8
 8009294:	f7ff ff58 	bl	8009148 <__b2d>
 8009298:	468b      	mov	fp, r1
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	9800      	ldr	r0, [sp, #0]
 80092a0:	a903      	add	r1, sp, #12
 80092a2:	f7ff ff51 	bl	8009148 <__b2d>
 80092a6:	460d      	mov	r5, r1
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	4689      	mov	r9, r1
 80092ac:	6919      	ldr	r1, [r3, #16]
 80092ae:	9b00      	ldr	r3, [sp, #0]
 80092b0:	4604      	mov	r4, r0
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	4630      	mov	r0, r6
 80092b6:	1ac9      	subs	r1, r1, r3
 80092b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfcd      	iteet	gt
 80092c6:	463a      	movgt	r2, r7
 80092c8:	462a      	movle	r2, r5
 80092ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092ce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80092d2:	bfd8      	it	le
 80092d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092d8:	464b      	mov	r3, r9
 80092da:	4622      	mov	r2, r4
 80092dc:	4659      	mov	r1, fp
 80092de:	f7f7 fae3 	bl	80008a8 <__aeabi_ddiv>
 80092e2:	b005      	add	sp, #20
 80092e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092e8 <__copybits>:
 80092e8:	3901      	subs	r1, #1
 80092ea:	b570      	push	{r4, r5, r6, lr}
 80092ec:	1149      	asrs	r1, r1, #5
 80092ee:	6914      	ldr	r4, [r2, #16]
 80092f0:	3101      	adds	r1, #1
 80092f2:	f102 0314 	add.w	r3, r2, #20
 80092f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092fe:	1f05      	subs	r5, r0, #4
 8009300:	42a3      	cmp	r3, r4
 8009302:	d30c      	bcc.n	800931e <__copybits+0x36>
 8009304:	1aa3      	subs	r3, r4, r2
 8009306:	3b11      	subs	r3, #17
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	3211      	adds	r2, #17
 800930e:	42a2      	cmp	r2, r4
 8009310:	bf88      	it	hi
 8009312:	2300      	movhi	r3, #0
 8009314:	4418      	add	r0, r3
 8009316:	2300      	movs	r3, #0
 8009318:	4288      	cmp	r0, r1
 800931a:	d305      	bcc.n	8009328 <__copybits+0x40>
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009322:	f845 6f04 	str.w	r6, [r5, #4]!
 8009326:	e7eb      	b.n	8009300 <__copybits+0x18>
 8009328:	f840 3b04 	str.w	r3, [r0], #4
 800932c:	e7f4      	b.n	8009318 <__copybits+0x30>

0800932e <__any_on>:
 800932e:	f100 0214 	add.w	r2, r0, #20
 8009332:	6900      	ldr	r0, [r0, #16]
 8009334:	114b      	asrs	r3, r1, #5
 8009336:	4298      	cmp	r0, r3
 8009338:	b510      	push	{r4, lr}
 800933a:	db11      	blt.n	8009360 <__any_on+0x32>
 800933c:	dd0a      	ble.n	8009354 <__any_on+0x26>
 800933e:	f011 011f 	ands.w	r1, r1, #31
 8009342:	d007      	beq.n	8009354 <__any_on+0x26>
 8009344:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009348:	fa24 f001 	lsr.w	r0, r4, r1
 800934c:	fa00 f101 	lsl.w	r1, r0, r1
 8009350:	428c      	cmp	r4, r1
 8009352:	d10b      	bne.n	800936c <__any_on+0x3e>
 8009354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009358:	4293      	cmp	r3, r2
 800935a:	d803      	bhi.n	8009364 <__any_on+0x36>
 800935c:	2000      	movs	r0, #0
 800935e:	bd10      	pop	{r4, pc}
 8009360:	4603      	mov	r3, r0
 8009362:	e7f7      	b.n	8009354 <__any_on+0x26>
 8009364:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009368:	2900      	cmp	r1, #0
 800936a:	d0f5      	beq.n	8009358 <__any_on+0x2a>
 800936c:	2001      	movs	r0, #1
 800936e:	e7f6      	b.n	800935e <__any_on+0x30>

08009370 <__ascii_wctomb>:
 8009370:	4603      	mov	r3, r0
 8009372:	4608      	mov	r0, r1
 8009374:	b141      	cbz	r1, 8009388 <__ascii_wctomb+0x18>
 8009376:	2aff      	cmp	r2, #255	@ 0xff
 8009378:	d904      	bls.n	8009384 <__ascii_wctomb+0x14>
 800937a:	228a      	movs	r2, #138	@ 0x8a
 800937c:	f04f 30ff 	mov.w	r0, #4294967295
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	4770      	bx	lr
 8009384:	2001      	movs	r0, #1
 8009386:	700a      	strb	r2, [r1, #0]
 8009388:	4770      	bx	lr

0800938a <__sfputc_r>:
 800938a:	6893      	ldr	r3, [r2, #8]
 800938c:	b410      	push	{r4}
 800938e:	3b01      	subs	r3, #1
 8009390:	2b00      	cmp	r3, #0
 8009392:	6093      	str	r3, [r2, #8]
 8009394:	da07      	bge.n	80093a6 <__sfputc_r+0x1c>
 8009396:	6994      	ldr	r4, [r2, #24]
 8009398:	42a3      	cmp	r3, r4
 800939a:	db01      	blt.n	80093a0 <__sfputc_r+0x16>
 800939c:	290a      	cmp	r1, #10
 800939e:	d102      	bne.n	80093a6 <__sfputc_r+0x1c>
 80093a0:	bc10      	pop	{r4}
 80093a2:	f7fd bffc 	b.w	800739e <__swbuf_r>
 80093a6:	6813      	ldr	r3, [r2, #0]
 80093a8:	1c58      	adds	r0, r3, #1
 80093aa:	6010      	str	r0, [r2, #0]
 80093ac:	7019      	strb	r1, [r3, #0]
 80093ae:	4608      	mov	r0, r1
 80093b0:	bc10      	pop	{r4}
 80093b2:	4770      	bx	lr

080093b4 <__sfputs_r>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	4606      	mov	r6, r0
 80093b8:	460f      	mov	r7, r1
 80093ba:	4614      	mov	r4, r2
 80093bc:	18d5      	adds	r5, r2, r3
 80093be:	42ac      	cmp	r4, r5
 80093c0:	d101      	bne.n	80093c6 <__sfputs_r+0x12>
 80093c2:	2000      	movs	r0, #0
 80093c4:	e007      	b.n	80093d6 <__sfputs_r+0x22>
 80093c6:	463a      	mov	r2, r7
 80093c8:	4630      	mov	r0, r6
 80093ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ce:	f7ff ffdc 	bl	800938a <__sfputc_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	d1f3      	bne.n	80093be <__sfputs_r+0xa>
 80093d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093d8 <_vfiprintf_r>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	460d      	mov	r5, r1
 80093de:	4614      	mov	r4, r2
 80093e0:	4698      	mov	r8, r3
 80093e2:	4606      	mov	r6, r0
 80093e4:	b09d      	sub	sp, #116	@ 0x74
 80093e6:	b118      	cbz	r0, 80093f0 <_vfiprintf_r+0x18>
 80093e8:	6a03      	ldr	r3, [r0, #32]
 80093ea:	b90b      	cbnz	r3, 80093f0 <_vfiprintf_r+0x18>
 80093ec:	f7fd feee 	bl	80071cc <__sinit>
 80093f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093f2:	07d9      	lsls	r1, r3, #31
 80093f4:	d405      	bmi.n	8009402 <_vfiprintf_r+0x2a>
 80093f6:	89ab      	ldrh	r3, [r5, #12]
 80093f8:	059a      	lsls	r2, r3, #22
 80093fa:	d402      	bmi.n	8009402 <_vfiprintf_r+0x2a>
 80093fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093fe:	f7fe f902 	bl	8007606 <__retarget_lock_acquire_recursive>
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	071b      	lsls	r3, r3, #28
 8009406:	d501      	bpl.n	800940c <_vfiprintf_r+0x34>
 8009408:	692b      	ldr	r3, [r5, #16]
 800940a:	b99b      	cbnz	r3, 8009434 <_vfiprintf_r+0x5c>
 800940c:	4629      	mov	r1, r5
 800940e:	4630      	mov	r0, r6
 8009410:	f7fe f804 	bl	800741c <__swsetup_r>
 8009414:	b170      	cbz	r0, 8009434 <_vfiprintf_r+0x5c>
 8009416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009418:	07dc      	lsls	r4, r3, #31
 800941a:	d504      	bpl.n	8009426 <_vfiprintf_r+0x4e>
 800941c:	f04f 30ff 	mov.w	r0, #4294967295
 8009420:	b01d      	add	sp, #116	@ 0x74
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	0598      	lsls	r0, r3, #22
 800942a:	d4f7      	bmi.n	800941c <_vfiprintf_r+0x44>
 800942c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800942e:	f7fe f8eb 	bl	8007608 <__retarget_lock_release_recursive>
 8009432:	e7f3      	b.n	800941c <_vfiprintf_r+0x44>
 8009434:	2300      	movs	r3, #0
 8009436:	9309      	str	r3, [sp, #36]	@ 0x24
 8009438:	2320      	movs	r3, #32
 800943a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800943e:	2330      	movs	r3, #48	@ 0x30
 8009440:	f04f 0901 	mov.w	r9, #1
 8009444:	f8cd 800c 	str.w	r8, [sp, #12]
 8009448:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80095f4 <_vfiprintf_r+0x21c>
 800944c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009450:	4623      	mov	r3, r4
 8009452:	469a      	mov	sl, r3
 8009454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009458:	b10a      	cbz	r2, 800945e <_vfiprintf_r+0x86>
 800945a:	2a25      	cmp	r2, #37	@ 0x25
 800945c:	d1f9      	bne.n	8009452 <_vfiprintf_r+0x7a>
 800945e:	ebba 0b04 	subs.w	fp, sl, r4
 8009462:	d00b      	beq.n	800947c <_vfiprintf_r+0xa4>
 8009464:	465b      	mov	r3, fp
 8009466:	4622      	mov	r2, r4
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ffa2 	bl	80093b4 <__sfputs_r>
 8009470:	3001      	adds	r0, #1
 8009472:	f000 80a7 	beq.w	80095c4 <_vfiprintf_r+0x1ec>
 8009476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009478:	445a      	add	r2, fp
 800947a:	9209      	str	r2, [sp, #36]	@ 0x24
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 809f 	beq.w	80095c4 <_vfiprintf_r+0x1ec>
 8009486:	2300      	movs	r3, #0
 8009488:	f04f 32ff 	mov.w	r2, #4294967295
 800948c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009490:	f10a 0a01 	add.w	sl, sl, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800949c:	931a      	str	r3, [sp, #104]	@ 0x68
 800949e:	4654      	mov	r4, sl
 80094a0:	2205      	movs	r2, #5
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4853      	ldr	r0, [pc, #332]	@ (80095f4 <_vfiprintf_r+0x21c>)
 80094a8:	f7fe f8af 	bl	800760a <memchr>
 80094ac:	9a04      	ldr	r2, [sp, #16]
 80094ae:	b9d8      	cbnz	r0, 80094e8 <_vfiprintf_r+0x110>
 80094b0:	06d1      	lsls	r1, r2, #27
 80094b2:	bf44      	itt	mi
 80094b4:	2320      	movmi	r3, #32
 80094b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094ba:	0713      	lsls	r3, r2, #28
 80094bc:	bf44      	itt	mi
 80094be:	232b      	movmi	r3, #43	@ 0x2b
 80094c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094c4:	f89a 3000 	ldrb.w	r3, [sl]
 80094c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ca:	d015      	beq.n	80094f8 <_vfiprintf_r+0x120>
 80094cc:	4654      	mov	r4, sl
 80094ce:	2000      	movs	r0, #0
 80094d0:	f04f 0c0a 	mov.w	ip, #10
 80094d4:	9a07      	ldr	r2, [sp, #28]
 80094d6:	4621      	mov	r1, r4
 80094d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094dc:	3b30      	subs	r3, #48	@ 0x30
 80094de:	2b09      	cmp	r3, #9
 80094e0:	d94b      	bls.n	800957a <_vfiprintf_r+0x1a2>
 80094e2:	b1b0      	cbz	r0, 8009512 <_vfiprintf_r+0x13a>
 80094e4:	9207      	str	r2, [sp, #28]
 80094e6:	e014      	b.n	8009512 <_vfiprintf_r+0x13a>
 80094e8:	eba0 0308 	sub.w	r3, r0, r8
 80094ec:	fa09 f303 	lsl.w	r3, r9, r3
 80094f0:	4313      	orrs	r3, r2
 80094f2:	46a2      	mov	sl, r4
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	e7d2      	b.n	800949e <_vfiprintf_r+0xc6>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	1d19      	adds	r1, r3, #4
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	9103      	str	r1, [sp, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfbb      	ittet	lt
 8009504:	425b      	neglt	r3, r3
 8009506:	f042 0202 	orrlt.w	r2, r2, #2
 800950a:	9307      	strge	r3, [sp, #28]
 800950c:	9307      	strlt	r3, [sp, #28]
 800950e:	bfb8      	it	lt
 8009510:	9204      	strlt	r2, [sp, #16]
 8009512:	7823      	ldrb	r3, [r4, #0]
 8009514:	2b2e      	cmp	r3, #46	@ 0x2e
 8009516:	d10a      	bne.n	800952e <_vfiprintf_r+0x156>
 8009518:	7863      	ldrb	r3, [r4, #1]
 800951a:	2b2a      	cmp	r3, #42	@ 0x2a
 800951c:	d132      	bne.n	8009584 <_vfiprintf_r+0x1ac>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	3402      	adds	r4, #2
 8009522:	1d1a      	adds	r2, r3, #4
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	9203      	str	r2, [sp, #12]
 8009528:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800952c:	9305      	str	r3, [sp, #20]
 800952e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80095f8 <_vfiprintf_r+0x220>
 8009532:	2203      	movs	r2, #3
 8009534:	4650      	mov	r0, sl
 8009536:	7821      	ldrb	r1, [r4, #0]
 8009538:	f7fe f867 	bl	800760a <memchr>
 800953c:	b138      	cbz	r0, 800954e <_vfiprintf_r+0x176>
 800953e:	2240      	movs	r2, #64	@ 0x40
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	eba0 000a 	sub.w	r0, r0, sl
 8009546:	4082      	lsls	r2, r0
 8009548:	4313      	orrs	r3, r2
 800954a:	3401      	adds	r4, #1
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009552:	2206      	movs	r2, #6
 8009554:	4829      	ldr	r0, [pc, #164]	@ (80095fc <_vfiprintf_r+0x224>)
 8009556:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800955a:	f7fe f856 	bl	800760a <memchr>
 800955e:	2800      	cmp	r0, #0
 8009560:	d03f      	beq.n	80095e2 <_vfiprintf_r+0x20a>
 8009562:	4b27      	ldr	r3, [pc, #156]	@ (8009600 <_vfiprintf_r+0x228>)
 8009564:	bb1b      	cbnz	r3, 80095ae <_vfiprintf_r+0x1d6>
 8009566:	9b03      	ldr	r3, [sp, #12]
 8009568:	3307      	adds	r3, #7
 800956a:	f023 0307 	bic.w	r3, r3, #7
 800956e:	3308      	adds	r3, #8
 8009570:	9303      	str	r3, [sp, #12]
 8009572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009574:	443b      	add	r3, r7
 8009576:	9309      	str	r3, [sp, #36]	@ 0x24
 8009578:	e76a      	b.n	8009450 <_vfiprintf_r+0x78>
 800957a:	460c      	mov	r4, r1
 800957c:	2001      	movs	r0, #1
 800957e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009582:	e7a8      	b.n	80094d6 <_vfiprintf_r+0xfe>
 8009584:	2300      	movs	r3, #0
 8009586:	f04f 0c0a 	mov.w	ip, #10
 800958a:	4619      	mov	r1, r3
 800958c:	3401      	adds	r4, #1
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	4620      	mov	r0, r4
 8009592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009596:	3a30      	subs	r2, #48	@ 0x30
 8009598:	2a09      	cmp	r2, #9
 800959a:	d903      	bls.n	80095a4 <_vfiprintf_r+0x1cc>
 800959c:	2b00      	cmp	r3, #0
 800959e:	d0c6      	beq.n	800952e <_vfiprintf_r+0x156>
 80095a0:	9105      	str	r1, [sp, #20]
 80095a2:	e7c4      	b.n	800952e <_vfiprintf_r+0x156>
 80095a4:	4604      	mov	r4, r0
 80095a6:	2301      	movs	r3, #1
 80095a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ac:	e7f0      	b.n	8009590 <_vfiprintf_r+0x1b8>
 80095ae:	ab03      	add	r3, sp, #12
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	462a      	mov	r2, r5
 80095b4:	4630      	mov	r0, r6
 80095b6:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <_vfiprintf_r+0x22c>)
 80095b8:	a904      	add	r1, sp, #16
 80095ba:	f7fd f9bf 	bl	800693c <_printf_float>
 80095be:	4607      	mov	r7, r0
 80095c0:	1c78      	adds	r0, r7, #1
 80095c2:	d1d6      	bne.n	8009572 <_vfiprintf_r+0x19a>
 80095c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095c6:	07d9      	lsls	r1, r3, #31
 80095c8:	d405      	bmi.n	80095d6 <_vfiprintf_r+0x1fe>
 80095ca:	89ab      	ldrh	r3, [r5, #12]
 80095cc:	059a      	lsls	r2, r3, #22
 80095ce:	d402      	bmi.n	80095d6 <_vfiprintf_r+0x1fe>
 80095d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095d2:	f7fe f819 	bl	8007608 <__retarget_lock_release_recursive>
 80095d6:	89ab      	ldrh	r3, [r5, #12]
 80095d8:	065b      	lsls	r3, r3, #25
 80095da:	f53f af1f 	bmi.w	800941c <_vfiprintf_r+0x44>
 80095de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095e0:	e71e      	b.n	8009420 <_vfiprintf_r+0x48>
 80095e2:	ab03      	add	r3, sp, #12
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	462a      	mov	r2, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	4b06      	ldr	r3, [pc, #24]	@ (8009604 <_vfiprintf_r+0x22c>)
 80095ec:	a904      	add	r1, sp, #16
 80095ee:	f7fd fc43 	bl	8006e78 <_printf_i>
 80095f2:	e7e4      	b.n	80095be <_vfiprintf_r+0x1e6>
 80095f4:	08009bc4 	.word	0x08009bc4
 80095f8:	08009bca 	.word	0x08009bca
 80095fc:	08009bce 	.word	0x08009bce
 8009600:	0800693d 	.word	0x0800693d
 8009604:	080093b5 	.word	0x080093b5

08009608 <__sflush_r>:
 8009608:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	0716      	lsls	r6, r2, #28
 8009610:	4605      	mov	r5, r0
 8009612:	460c      	mov	r4, r1
 8009614:	d454      	bmi.n	80096c0 <__sflush_r+0xb8>
 8009616:	684b      	ldr	r3, [r1, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	dc02      	bgt.n	8009622 <__sflush_r+0x1a>
 800961c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800961e:	2b00      	cmp	r3, #0
 8009620:	dd48      	ble.n	80096b4 <__sflush_r+0xac>
 8009622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009624:	2e00      	cmp	r6, #0
 8009626:	d045      	beq.n	80096b4 <__sflush_r+0xac>
 8009628:	2300      	movs	r3, #0
 800962a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800962e:	682f      	ldr	r7, [r5, #0]
 8009630:	6a21      	ldr	r1, [r4, #32]
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	d030      	beq.n	8009698 <__sflush_r+0x90>
 8009636:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	0759      	lsls	r1, r3, #29
 800963c:	d505      	bpl.n	800964a <__sflush_r+0x42>
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	1ad2      	subs	r2, r2, r3
 8009642:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009644:	b10b      	cbz	r3, 800964a <__sflush_r+0x42>
 8009646:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	2300      	movs	r3, #0
 800964c:	4628      	mov	r0, r5
 800964e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009650:	6a21      	ldr	r1, [r4, #32]
 8009652:	47b0      	blx	r6
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	d106      	bne.n	8009668 <__sflush_r+0x60>
 800965a:	6829      	ldr	r1, [r5, #0]
 800965c:	291d      	cmp	r1, #29
 800965e:	d82b      	bhi.n	80096b8 <__sflush_r+0xb0>
 8009660:	4a28      	ldr	r2, [pc, #160]	@ (8009704 <__sflush_r+0xfc>)
 8009662:	40ca      	lsrs	r2, r1
 8009664:	07d6      	lsls	r6, r2, #31
 8009666:	d527      	bpl.n	80096b8 <__sflush_r+0xb0>
 8009668:	2200      	movs	r2, #0
 800966a:	6062      	str	r2, [r4, #4]
 800966c:	6922      	ldr	r2, [r4, #16]
 800966e:	04d9      	lsls	r1, r3, #19
 8009670:	6022      	str	r2, [r4, #0]
 8009672:	d504      	bpl.n	800967e <__sflush_r+0x76>
 8009674:	1c42      	adds	r2, r0, #1
 8009676:	d101      	bne.n	800967c <__sflush_r+0x74>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	b903      	cbnz	r3, 800967e <__sflush_r+0x76>
 800967c:	6560      	str	r0, [r4, #84]	@ 0x54
 800967e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009680:	602f      	str	r7, [r5, #0]
 8009682:	b1b9      	cbz	r1, 80096b4 <__sflush_r+0xac>
 8009684:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009688:	4299      	cmp	r1, r3
 800968a:	d002      	beq.n	8009692 <__sflush_r+0x8a>
 800968c:	4628      	mov	r0, r5
 800968e:	f7fe fe3b 	bl	8008308 <_free_r>
 8009692:	2300      	movs	r3, #0
 8009694:	6363      	str	r3, [r4, #52]	@ 0x34
 8009696:	e00d      	b.n	80096b4 <__sflush_r+0xac>
 8009698:	2301      	movs	r3, #1
 800969a:	4628      	mov	r0, r5
 800969c:	47b0      	blx	r6
 800969e:	4602      	mov	r2, r0
 80096a0:	1c50      	adds	r0, r2, #1
 80096a2:	d1c9      	bne.n	8009638 <__sflush_r+0x30>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0c6      	beq.n	8009638 <__sflush_r+0x30>
 80096aa:	2b1d      	cmp	r3, #29
 80096ac:	d001      	beq.n	80096b2 <__sflush_r+0xaa>
 80096ae:	2b16      	cmp	r3, #22
 80096b0:	d11d      	bne.n	80096ee <__sflush_r+0xe6>
 80096b2:	602f      	str	r7, [r5, #0]
 80096b4:	2000      	movs	r0, #0
 80096b6:	e021      	b.n	80096fc <__sflush_r+0xf4>
 80096b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096bc:	b21b      	sxth	r3, r3
 80096be:	e01a      	b.n	80096f6 <__sflush_r+0xee>
 80096c0:	690f      	ldr	r7, [r1, #16]
 80096c2:	2f00      	cmp	r7, #0
 80096c4:	d0f6      	beq.n	80096b4 <__sflush_r+0xac>
 80096c6:	0793      	lsls	r3, r2, #30
 80096c8:	bf18      	it	ne
 80096ca:	2300      	movne	r3, #0
 80096cc:	680e      	ldr	r6, [r1, #0]
 80096ce:	bf08      	it	eq
 80096d0:	694b      	ldreq	r3, [r1, #20]
 80096d2:	1bf6      	subs	r6, r6, r7
 80096d4:	600f      	str	r7, [r1, #0]
 80096d6:	608b      	str	r3, [r1, #8]
 80096d8:	2e00      	cmp	r6, #0
 80096da:	ddeb      	ble.n	80096b4 <__sflush_r+0xac>
 80096dc:	4633      	mov	r3, r6
 80096de:	463a      	mov	r2, r7
 80096e0:	4628      	mov	r0, r5
 80096e2:	6a21      	ldr	r1, [r4, #32]
 80096e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80096e8:	47e0      	blx	ip
 80096ea:	2800      	cmp	r0, #0
 80096ec:	dc07      	bgt.n	80096fe <__sflush_r+0xf6>
 80096ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f6:	f04f 30ff 	mov.w	r0, #4294967295
 80096fa:	81a3      	strh	r3, [r4, #12]
 80096fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096fe:	4407      	add	r7, r0
 8009700:	1a36      	subs	r6, r6, r0
 8009702:	e7e9      	b.n	80096d8 <__sflush_r+0xd0>
 8009704:	20400001 	.word	0x20400001

08009708 <_fflush_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	690b      	ldr	r3, [r1, #16]
 800970c:	4605      	mov	r5, r0
 800970e:	460c      	mov	r4, r1
 8009710:	b913      	cbnz	r3, 8009718 <_fflush_r+0x10>
 8009712:	2500      	movs	r5, #0
 8009714:	4628      	mov	r0, r5
 8009716:	bd38      	pop	{r3, r4, r5, pc}
 8009718:	b118      	cbz	r0, 8009722 <_fflush_r+0x1a>
 800971a:	6a03      	ldr	r3, [r0, #32]
 800971c:	b90b      	cbnz	r3, 8009722 <_fflush_r+0x1a>
 800971e:	f7fd fd55 	bl	80071cc <__sinit>
 8009722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0f3      	beq.n	8009712 <_fflush_r+0xa>
 800972a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800972c:	07d0      	lsls	r0, r2, #31
 800972e:	d404      	bmi.n	800973a <_fflush_r+0x32>
 8009730:	0599      	lsls	r1, r3, #22
 8009732:	d402      	bmi.n	800973a <_fflush_r+0x32>
 8009734:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009736:	f7fd ff66 	bl	8007606 <__retarget_lock_acquire_recursive>
 800973a:	4628      	mov	r0, r5
 800973c:	4621      	mov	r1, r4
 800973e:	f7ff ff63 	bl	8009608 <__sflush_r>
 8009742:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009744:	4605      	mov	r5, r0
 8009746:	07da      	lsls	r2, r3, #31
 8009748:	d4e4      	bmi.n	8009714 <_fflush_r+0xc>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	059b      	lsls	r3, r3, #22
 800974e:	d4e1      	bmi.n	8009714 <_fflush_r+0xc>
 8009750:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009752:	f7fd ff59 	bl	8007608 <__retarget_lock_release_recursive>
 8009756:	e7dd      	b.n	8009714 <_fflush_r+0xc>

08009758 <__swhatbuf_r>:
 8009758:	b570      	push	{r4, r5, r6, lr}
 800975a:	460c      	mov	r4, r1
 800975c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009760:	4615      	mov	r5, r2
 8009762:	2900      	cmp	r1, #0
 8009764:	461e      	mov	r6, r3
 8009766:	b096      	sub	sp, #88	@ 0x58
 8009768:	da0c      	bge.n	8009784 <__swhatbuf_r+0x2c>
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	2100      	movs	r1, #0
 800976e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009772:	bf14      	ite	ne
 8009774:	2340      	movne	r3, #64	@ 0x40
 8009776:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800977a:	2000      	movs	r0, #0
 800977c:	6031      	str	r1, [r6, #0]
 800977e:	602b      	str	r3, [r5, #0]
 8009780:	b016      	add	sp, #88	@ 0x58
 8009782:	bd70      	pop	{r4, r5, r6, pc}
 8009784:	466a      	mov	r2, sp
 8009786:	f000 f849 	bl	800981c <_fstat_r>
 800978a:	2800      	cmp	r0, #0
 800978c:	dbed      	blt.n	800976a <__swhatbuf_r+0x12>
 800978e:	9901      	ldr	r1, [sp, #4]
 8009790:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009794:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009798:	4259      	negs	r1, r3
 800979a:	4159      	adcs	r1, r3
 800979c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097a0:	e7eb      	b.n	800977a <__swhatbuf_r+0x22>

080097a2 <__smakebuf_r>:
 80097a2:	898b      	ldrh	r3, [r1, #12]
 80097a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a6:	079d      	lsls	r5, r3, #30
 80097a8:	4606      	mov	r6, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	d507      	bpl.n	80097be <__smakebuf_r+0x1c>
 80097ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097b2:	6023      	str	r3, [r4, #0]
 80097b4:	6123      	str	r3, [r4, #16]
 80097b6:	2301      	movs	r3, #1
 80097b8:	6163      	str	r3, [r4, #20]
 80097ba:	b003      	add	sp, #12
 80097bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097be:	466a      	mov	r2, sp
 80097c0:	ab01      	add	r3, sp, #4
 80097c2:	f7ff ffc9 	bl	8009758 <__swhatbuf_r>
 80097c6:	9f00      	ldr	r7, [sp, #0]
 80097c8:	4605      	mov	r5, r0
 80097ca:	4639      	mov	r1, r7
 80097cc:	4630      	mov	r0, r6
 80097ce:	f7fc f985 	bl	8005adc <_malloc_r>
 80097d2:	b948      	cbnz	r0, 80097e8 <__smakebuf_r+0x46>
 80097d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d4ee      	bmi.n	80097ba <__smakebuf_r+0x18>
 80097dc:	f023 0303 	bic.w	r3, r3, #3
 80097e0:	f043 0302 	orr.w	r3, r3, #2
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	e7e2      	b.n	80097ae <__smakebuf_r+0xc>
 80097e8:	89a3      	ldrh	r3, [r4, #12]
 80097ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	9b01      	ldr	r3, [sp, #4]
 80097f6:	6020      	str	r0, [r4, #0]
 80097f8:	b15b      	cbz	r3, 8009812 <__smakebuf_r+0x70>
 80097fa:	4630      	mov	r0, r6
 80097fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009800:	f000 f81e 	bl	8009840 <_isatty_r>
 8009804:	b128      	cbz	r0, 8009812 <__smakebuf_r+0x70>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	f023 0303 	bic.w	r3, r3, #3
 800980c:	f043 0301 	orr.w	r3, r3, #1
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	431d      	orrs	r5, r3
 8009816:	81a5      	strh	r5, [r4, #12]
 8009818:	e7cf      	b.n	80097ba <__smakebuf_r+0x18>
	...

0800981c <_fstat_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	2300      	movs	r3, #0
 8009820:	4d06      	ldr	r5, [pc, #24]	@ (800983c <_fstat_r+0x20>)
 8009822:	4604      	mov	r4, r0
 8009824:	4608      	mov	r0, r1
 8009826:	4611      	mov	r1, r2
 8009828:	602b      	str	r3, [r5, #0]
 800982a:	f7f8 fbef 	bl	800200c <_fstat>
 800982e:	1c43      	adds	r3, r0, #1
 8009830:	d102      	bne.n	8009838 <_fstat_r+0x1c>
 8009832:	682b      	ldr	r3, [r5, #0]
 8009834:	b103      	cbz	r3, 8009838 <_fstat_r+0x1c>
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	bd38      	pop	{r3, r4, r5, pc}
 800983a:	bf00      	nop
 800983c:	20000498 	.word	0x20000498

08009840 <_isatty_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	2300      	movs	r3, #0
 8009844:	4d05      	ldr	r5, [pc, #20]	@ (800985c <_isatty_r+0x1c>)
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f8 fbed 	bl	800202a <_isatty>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_isatty_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_isatty_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20000498 	.word	0x20000498

08009860 <__assert_func>:
 8009860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009862:	4614      	mov	r4, r2
 8009864:	461a      	mov	r2, r3
 8009866:	4b09      	ldr	r3, [pc, #36]	@ (800988c <__assert_func+0x2c>)
 8009868:	4605      	mov	r5, r0
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68d8      	ldr	r0, [r3, #12]
 800986e:	b14c      	cbz	r4, 8009884 <__assert_func+0x24>
 8009870:	4b07      	ldr	r3, [pc, #28]	@ (8009890 <__assert_func+0x30>)
 8009872:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009876:	9100      	str	r1, [sp, #0]
 8009878:	462b      	mov	r3, r5
 800987a:	4906      	ldr	r1, [pc, #24]	@ (8009894 <__assert_func+0x34>)
 800987c:	f000 f822 	bl	80098c4 <fiprintf>
 8009880:	f000 f832 	bl	80098e8 <abort>
 8009884:	4b04      	ldr	r3, [pc, #16]	@ (8009898 <__assert_func+0x38>)
 8009886:	461c      	mov	r4, r3
 8009888:	e7f3      	b.n	8009872 <__assert_func+0x12>
 800988a:	bf00      	nop
 800988c:	20000188 	.word	0x20000188
 8009890:	08009bd5 	.word	0x08009bd5
 8009894:	08009be2 	.word	0x08009be2
 8009898:	08009c10 	.word	0x08009c10

0800989c <_calloc_r>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	fba1 5402 	umull	r5, r4, r1, r2
 80098a2:	b934      	cbnz	r4, 80098b2 <_calloc_r+0x16>
 80098a4:	4629      	mov	r1, r5
 80098a6:	f7fc f919 	bl	8005adc <_malloc_r>
 80098aa:	4606      	mov	r6, r0
 80098ac:	b928      	cbnz	r0, 80098ba <_calloc_r+0x1e>
 80098ae:	4630      	mov	r0, r6
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	220c      	movs	r2, #12
 80098b4:	2600      	movs	r6, #0
 80098b6:	6002      	str	r2, [r0, #0]
 80098b8:	e7f9      	b.n	80098ae <_calloc_r+0x12>
 80098ba:	462a      	mov	r2, r5
 80098bc:	4621      	mov	r1, r4
 80098be:	f7fd fe03 	bl	80074c8 <memset>
 80098c2:	e7f4      	b.n	80098ae <_calloc_r+0x12>

080098c4 <fiprintf>:
 80098c4:	b40e      	push	{r1, r2, r3}
 80098c6:	b503      	push	{r0, r1, lr}
 80098c8:	4601      	mov	r1, r0
 80098ca:	ab03      	add	r3, sp, #12
 80098cc:	4805      	ldr	r0, [pc, #20]	@ (80098e4 <fiprintf+0x20>)
 80098ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d2:	6800      	ldr	r0, [r0, #0]
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	f7ff fd7f 	bl	80093d8 <_vfiprintf_r>
 80098da:	b002      	add	sp, #8
 80098dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098e0:	b003      	add	sp, #12
 80098e2:	4770      	bx	lr
 80098e4:	20000188 	.word	0x20000188

080098e8 <abort>:
 80098e8:	2006      	movs	r0, #6
 80098ea:	b508      	push	{r3, lr}
 80098ec:	f000 f82c 	bl	8009948 <raise>
 80098f0:	2001      	movs	r0, #1
 80098f2:	f7f8 fb3c 	bl	8001f6e <_exit>

080098f6 <_raise_r>:
 80098f6:	291f      	cmp	r1, #31
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	d904      	bls.n	800990a <_raise_r+0x14>
 8009900:	2316      	movs	r3, #22
 8009902:	6003      	str	r3, [r0, #0]
 8009904:	f04f 30ff 	mov.w	r0, #4294967295
 8009908:	bd38      	pop	{r3, r4, r5, pc}
 800990a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800990c:	b112      	cbz	r2, 8009914 <_raise_r+0x1e>
 800990e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009912:	b94b      	cbnz	r3, 8009928 <_raise_r+0x32>
 8009914:	4628      	mov	r0, r5
 8009916:	f000 f831 	bl	800997c <_getpid_r>
 800991a:	4622      	mov	r2, r4
 800991c:	4601      	mov	r1, r0
 800991e:	4628      	mov	r0, r5
 8009920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009924:	f000 b818 	b.w	8009958 <_kill_r>
 8009928:	2b01      	cmp	r3, #1
 800992a:	d00a      	beq.n	8009942 <_raise_r+0x4c>
 800992c:	1c59      	adds	r1, r3, #1
 800992e:	d103      	bne.n	8009938 <_raise_r+0x42>
 8009930:	2316      	movs	r3, #22
 8009932:	6003      	str	r3, [r0, #0]
 8009934:	2001      	movs	r0, #1
 8009936:	e7e7      	b.n	8009908 <_raise_r+0x12>
 8009938:	2100      	movs	r1, #0
 800993a:	4620      	mov	r0, r4
 800993c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009940:	4798      	blx	r3
 8009942:	2000      	movs	r0, #0
 8009944:	e7e0      	b.n	8009908 <_raise_r+0x12>
	...

08009948 <raise>:
 8009948:	4b02      	ldr	r3, [pc, #8]	@ (8009954 <raise+0xc>)
 800994a:	4601      	mov	r1, r0
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	f7ff bfd2 	b.w	80098f6 <_raise_r>
 8009952:	bf00      	nop
 8009954:	20000188 	.word	0x20000188

08009958 <_kill_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	2300      	movs	r3, #0
 800995c:	4d06      	ldr	r5, [pc, #24]	@ (8009978 <_kill_r+0x20>)
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	4611      	mov	r1, r2
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	f7f8 faf2 	bl	8001f4e <_kill>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	d102      	bne.n	8009974 <_kill_r+0x1c>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	b103      	cbz	r3, 8009974 <_kill_r+0x1c>
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	bd38      	pop	{r3, r4, r5, pc}
 8009976:	bf00      	nop
 8009978:	20000498 	.word	0x20000498

0800997c <_getpid_r>:
 800997c:	f7f8 bae0 	b.w	8001f40 <_getpid>

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
